

(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["frontend"] = factory();
	else
		root["frontend"] = factory();
})(this, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@popperjs/core/dist/umd/popper.js":
/*!********************************************************!*\
  !*** ./node_modules/@popperjs/core/dist/umd/popper.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports) {

/**
 * @popperjs/core v2.10.0 - MIT License
 */

(function (global, factory) {
   true ? factory(exports) :
  0;
}(this, (function (exports) { 'use strict';

  function getWindow(node) {
    if (node == null) {
      return window;
    }

    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }

    return node;
  }

  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }

  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }

  function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
      return false;
    }

    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  var round$1 = Math.round;
  function getBoundingClientRect(element, includeScale) {
    if (includeScale === void 0) {
      includeScale = false;
    }

    var rect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;

    if (isHTMLElement(element) && includeScale) {
      var offsetHeight = element.offsetHeight;
      var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
      // Fallback to 1 in case both values are `0`

      if (offsetWidth > 0) {
        scaleX = rect.width / offsetWidth || 1;
      }

      if (offsetHeight > 0) {
        scaleY = rect.height / offsetHeight || 1;
      }
    }

    return {
      width: round$1(rect.width / scaleX),
      height: round$1(rect.height / scaleY),
      top: round$1(rect.top / scaleY),
      right: round$1(rect.right / scaleX),
      bottom: round$1(rect.bottom / scaleY),
      left: round$1(rect.left / scaleX),
      x: round$1(rect.left / scaleX),
      y: round$1(rect.top / scaleY)
    };
  }

  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop
    };
  }

  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
  }

  function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
    element.document) || window.document).documentElement;
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
  }

  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle(element),
        overflow = _getComputedStyle.overflow,
        overflowX = _getComputedStyle.overflowX,
        overflowY = _getComputedStyle.overflowY;

    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = rect.width / element.offsetWidth || 1;
    var scaleY = rect.height / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  } // Returns the composite rect of an element relative to its offsetParent.
  // Composite means it takes into account transforms as well as layout.


  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }

    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };

    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }

      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }

    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  // means it doesn't take into account transforms.

  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223

    var width = element.offsetWidth;
    var height = element.offsetHeight;

    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }

    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }

    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width,
      height: height
    };
  }

  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element;
    }

    return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || ( // DOM Element detected
      isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element) // fallback

    );
  }

  function getScrollParent(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body;
    }

    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }

    return getScrollParent(getParentNode(node));
  }

  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the
  reference element's position.
  */

  function listScrollParents(element, list) {
    var _element$ownerDocumen;

    if (list === void 0) {
      list = [];
    }

    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)));
  }

  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
  }

  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle(element).position === 'fixed') {
      return null;
    }

    return element.offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block


  function getContainingBlock(element) {
    var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
    var isIE = navigator.userAgent.indexOf('Trident') !== -1;

    if (isIE && isHTMLElement(element)) {
      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
      var elementCss = getComputedStyle(element);

      if (elementCss.position === 'fixed') {
        return null;
      }
    }

    var currentNode = getParentNode(element);

    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }

    return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.


  function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);

    while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
      offsetParent = getTrueOffsetParent(offsetParent);
    }

    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
      return window;
    }

    return offsetParent || getContainingBlock(element) || window;
  }

  var top = 'top';
  var bottom = 'bottom';
  var right = 'right';
  var left = 'left';
  var auto = 'auto';
  var basePlacements = [top, bottom, right, left];
  var start = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []); // modifiers that need to read the DOM

  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers

  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);

          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }

    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier);
      }
    });
    return result;
  }

  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(orderedModifiers.filter(function (modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  function debounce(fn) {
    var pending;
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined;
            resolve(fn());
          });
        });
      }

      return pending;
    };
  }

  function format(str) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return [].concat(args).reduce(function (p, c) {
      return p.replace(/%s/, c);
    }, str);
  }

  var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
  var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
  var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
  function validateModifiers(modifiers) {
    modifiers.forEach(function (modifier) {
      [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
      .filter(function (value, index, self) {
        return self.indexOf(value) === index;
      }).forEach(function (key) {
        switch (key) {
          case 'name':
            if (typeof modifier.name !== 'string') {
              console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
            }

            break;

          case 'enabled':
            if (typeof modifier.enabled !== 'boolean') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
            }

            break;

          case 'phase':
            if (modifierPhases.indexOf(modifier.phase) < 0) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
            }

            break;

          case 'fn':
            if (typeof modifier.fn !== 'function') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
            }

            break;

          case 'effect':
            if (modifier.effect != null && typeof modifier.effect !== 'function') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
            }

            break;

          case 'requires':
            if (modifier.requires != null && !Array.isArray(modifier.requires)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
            }

            break;

          case 'requiresIfExists':
            if (!Array.isArray(modifier.requiresIfExists)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
            }

            break;

          case 'options':
          case 'data':
            break;

          default:
            console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
              return "\"" + s + "\"";
            }).join(', ') + "; but \"" + key + "\" was provided.");
        }

        modifier.requires && modifier.requires.forEach(function (requirement) {
          if (modifiers.find(function (mod) {
            return mod.name === requirement;
          }) == null) {
            console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
          }
        });
      });
    });
  }

  function uniqueBy(arr, fn) {
    var identifiers = new Set();
    return arr.filter(function (item) {
      var identifier = fn(item);

      if (!identifiers.has(identifier)) {
        identifiers.add(identifier);
        return true;
      }
    });
  }

  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }

  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name];
      merged[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged;
    }, {}); // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key];
    });
  }

  function getViewportRect(element) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
    // can be obscured underneath it.
    // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
    // if it isn't open, so if this isn't available, the popper will be detected
    // to overflow the bottom of the screen too early.

    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
      // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
      // errors due to floating point numbers, so we need to check precision.
      // Safari returns a number <= 0, usually < -1 when pinch-zoomed
      // Feature detection fails in mobile emulation mode in Chrome.
      // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
      // 0.001
      // Fallback here: "Not Safari" userAgent

      if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }

    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y
    };
  }

  var max = Math.max;
  var min = Math.min;
  var round = Math.round;

  // of the `<html>` and `<body>` rect bounds if horizontally scrollable

  function getDocumentRect(element) {
    var _element$ownerDocumen;

    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;

    if (getComputedStyle(body || html).direction === 'rtl') {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }

    return {
      width: width,
      height: height,
      x: x,
      y: y
    };
  }

  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

    if (parent.contains(child)) {
      return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
        var next = child;

        do {
          if (next && parent.isSameNode(next)) {
            return true;
          } // $FlowFixMe[prop-missing]: need a better way to handle this...


          next = next.parentNode || next.host;
        } while (next);
      } // Give up, the result is false


    return false;
  }

  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  function getInnerBoundingClientRect(element) {
    var rect = getBoundingClientRect(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }

  function getClientRectFromMixedType(element, clippingParent) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`


  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

    if (!isElement(clipperElement)) {
      return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


    return clippingParents.filter(function (clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents


  function getClippingRect(element, boundary, rootBoundary) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  function getVariation(placement) {
    return placement.split('-')[1];
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
  }

  function computeOffsets(_ref) {
    var reference = _ref.reference,
        element = _ref.element,
        placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;

    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference.y - element.height
        };
        break;

      case bottom:
        offsets = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;

      case right:
        offsets = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;

      case left:
        offsets = {
          x: reference.x - element.width,
          y: commonY
        };
        break;

      default:
        offsets = {
          x: reference.x,
          y: reference.y
        };
    }

    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width';

      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
          break;

        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
          break;
      }
    }

    return offsets;
  }

  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$placement = _options.placement,
        placement = _options$placement === void 0 ? state.placement : _options$placement,
        _options$boundary = _options.boundary,
        boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
        _options$rootBoundary = _options.rootBoundary,
        rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
        _options$elementConte = _options.elementContext,
        elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
        _options$altBoundary = _options.altBoundary,
        altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
        _options$padding = _options.padding,
        padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: 'absolute',
      placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }

    return overflowOffsets;
  }

  var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
  var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
  var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
  };

  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function');
    });
  }

  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }

    var _generatorOptions = generatorOptions,
        _generatorOptions$def = _generatorOptions.defaultModifiers,
        defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
        _generatorOptions$def2 = _generatorOptions.defaultOptions,
        defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions;
      }

      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state: state,
        setOptions: function setOptions(setOptionsAction) {
          var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options);
          state.scrollParents = {
            reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
            popper: listScrollParents(popper)
          }; // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled;
          }); // Validate the provided modifiers so that the consumer will get warned
          // if one of the modifiers is invalid for any reason

          {
            var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
              var name = _ref.name;
              return name;
            });
            validateModifiers(modifiers);

            if (getBasePlacement(state.options.placement) === auto) {
              var flipModifier = state.orderedModifiers.find(function (_ref2) {
                var name = _ref2.name;
                return name === 'flip';
              });

              if (!flipModifier) {
                console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
              }
            }

            var _getComputedStyle = getComputedStyle(popper),
                marginTop = _getComputedStyle.marginTop,
                marginRight = _getComputedStyle.marginRight,
                marginBottom = _getComputedStyle.marginBottom,
                marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
            // cause bugs with positioning, so we'll warn the consumer


            if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
              return parseFloat(margin);
            })) {
              console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
            }
          }

          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }

          var _state$elements = state.elements,
              reference = _state$elements.reference,
              popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {
            {
              console.error(INVALID_ELEMENT_ERROR);
            }

            return;
          } // Store the reference and popper rects to be read by modifiers


          state.rects = {
            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
            popper: getLayoutRect(popper)
          }; // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false;
          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          var __debug_loops__ = 0;

          for (var index = 0; index < state.orderedModifiers.length; index++) {
            {
              __debug_loops__ += 1;

              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR);
                break;
              }
            }

            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }

            var _state$orderedModifie = state.orderedModifiers[index],
                fn = _state$orderedModifie.fn,
                _state$orderedModifie2 = _state$orderedModifie.options,
                _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                name = _state$orderedModifie.name;

            if (typeof fn === 'function') {
              state = fn({
                state: state,
                options: _options,
                name: name,
                instance: instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };

      if (!areValidElements(reference, popper)) {
        {
          console.error(INVALID_ELEMENT_ERROR);
        }

        return instance;
      }

      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state);
        }
      }); // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref3) {
          var name = _ref3.name,
              _ref3$options = _ref3.options,
              options = _ref3$options === void 0 ? {} : _ref3$options,
              effect = _ref3.effect;

          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options
            });

            var noopFn = function noopFn() {};

            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }

      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn();
        });
        effectCleanupFns = [];
      }

      return instance;
    };
  }

  var passive = {
    passive: true
  };

  function effect$2(_ref) {
    var state = _ref.state,
        instance = _ref.instance,
        options = _ref.options;
    var _options$scroll = options.scroll,
        scroll = _options$scroll === void 0 ? true : _options$scroll,
        _options$resize = options.resize,
        resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.addEventListener('resize', instance.update, passive);
    }

    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.removeEventListener('resize', instance.update, passive);
      }
    };
  } // eslint-disable-next-line import/no-unused-modules


  var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect$2,
    data: {}
  };

  function popperOffsets(_ref) {
    var state = _ref.state,
        name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: 'absolute',
      placement: state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
  };

  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsetsByDPR(_ref) {
    var x = _ref.x,
        y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(round(x * dpr) / dpr) || 0,
      y: round(round(y * dpr) / dpr) || 0
    };
  }

  function mapToStyles(_ref2) {
    var _Object$assign2;

    var popper = _ref2.popper,
        popperRect = _ref2.popperRect,
        placement = _ref2.placement,
        offsets = _ref2.offsets,
        position = _ref2.position,
        gpuAcceleration = _ref2.gpuAcceleration,
        adaptive = _ref2.adaptive,
        roundOffsets = _ref2.roundOffsets;

    var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets,
        _ref3$x = _ref3.x,
        x = _ref3$x === void 0 ? 0 : _ref3$x,
        _ref3$y = _ref3.y,
        y = _ref3$y === void 0 ? 0 : _ref3$y;

    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;

    if (adaptive) {
      var offsetParent = getOffsetParent(popper);
      var heightProp = 'clientHeight';
      var widthProp = 'clientWidth';

      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper);

        if (getComputedStyle(offsetParent).position !== 'static') {
          heightProp = 'scrollHeight';
          widthProp = 'scrollWidth';
        }
      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


      offsetParent = offsetParent;

      if (placement === top) {
        sideY = bottom; // $FlowFixMe[prop-missing]

        y -= offsetParent[heightProp] - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }

      if (placement === left) {
        sideX = right; // $FlowFixMe[prop-missing]

        x -= offsetParent[widthProp] - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }

    var commonStyles = Object.assign({
      position: position
    }, adaptive && unsetSides);

    if (gpuAcceleration) {
      var _Object$assign;

      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) < 2 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }

    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
  }

  function computeStyles(_ref4) {
    var state = _ref4.state,
        options = _ref4.options;
    var _options$gpuAccelerat = options.gpuAcceleration,
        gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
        _options$adaptive = options.adaptive,
        adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
        _options$roundOffsets = options.roundOffsets,
        roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

    {
      var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || '';

      if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
        return transitionProperty.indexOf(property) >= 0;
      })) {
        console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
      }
    }

    var commonStyles = {
      placement: getBasePlacement(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration
    };

    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
      })));
    }

    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
      })));
    }

    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-placement': state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
  };

  // and applies them to the HTMLElements such as popper and arrow

  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name]; // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe[cannot-write]


      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];

        if (value === false) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, value === true ? '' : value);
        }
      });
    });
  }

  function effect$1(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: '0',
        top: '0',
        margin: '0'
      },
      arrow: {
        position: 'absolute'
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;

    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }

    return function () {
      Object.keys(state.elements).forEach(function (name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

        var style = styleProperties.reduce(function (style, property) {
          style[property] = '';
          return style;
        }, {}); // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }

        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  } // eslint-disable-next-line import/no-unused-modules


  var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$1,
    requires: ['computeStyles']
  };

  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
      placement: placement
    })) : offset,
        skidding = _ref[0],
        distance = _ref[1];

    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }

  function offset(_ref2) {
    var state = _ref2.state,
        options = _ref2.options,
        name = _ref2.name;
    var _options$offset = options.offset,
        offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement],
        x = _data$state$placement.x,
        y = _data$state$placement.y;

    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset
  };

  var hash$1 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash$1[matched];
    });
  }

  var hash = {
    start: 'end',
    end: 'start'
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash[matched];
    });
  }

  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        placement = _options.placement,
        boundary = _options.boundary,
        rootBoundary = _options.rootBoundary,
        padding = _options.padding,
        flipVariations = _options.flipVariations,
        _options$allowedAutoP = _options.allowedAutoPlacements,
        allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
      return getVariation(placement) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0;
    });

    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;

      {
        console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
      }
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding
      })[getBasePlacement(placement)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b];
    });
  }

  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }

    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }

  function flip(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;

    if (state.modifiersData[name]._skip) {
      return;
    }

    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
        specifiedFallbackPlacements = options.fallbackPlacements,
        padding = options.padding,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        _options$flipVariatio = options.flipVariations,
        flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
        allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        flipVariations: flipVariations,
        allowedAutoPlacements: allowedAutoPlacements
      }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];

    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i];

      var _basePlacement = getBasePlacement(placement);

      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? 'width' : 'height';
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }

      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];

      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }

      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }

      if (checks.every(function (check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }

      checksMap.set(placement, checks);
    }

    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1;

      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement);

          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check;
            });
          }
        });

        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };

      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);

        if (_ret === "break") break;
      }
    }

    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  } // eslint-disable-next-line import/no-unused-modules


  var flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: ['offset'],
    data: {
      _skip: false
    }
  };

  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  function within(min$1, value, max$1) {
    return max(min$1, min(value, max$1));
  }

  function preventOverflow(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;
    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        padding = options.padding,
        _options$tether = options.tether,
        tether = _options$tether === void 0 ? true : _options$tether,
        _options$tetherOffset = options.tetherOffset,
        tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var data = {
      x: 0,
      y: 0
    };

    if (!popperOffsets) {
      return;
    }

    if (checkMainAxis || checkAltAxis) {
      var mainSide = mainAxis === 'y' ? top : left;
      var altSide = mainAxis === 'y' ? bottom : right;
      var len = mainAxis === 'y' ? 'height' : 'width';
      var offset = popperOffsets[mainAxis];
      var min$1 = popperOffsets[mainAxis] + overflow[mainSide];
      var max$1 = popperOffsets[mainAxis] - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
      var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;

      if (checkMainAxis) {
        var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
        popperOffsets[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset;
      }

      if (checkAltAxis) {
        var _mainSide = mainAxis === 'x' ? top : left;

        var _altSide = mainAxis === 'x' ? bottom : right;

        var _offset = popperOffsets[altAxis];

        var _min = _offset + overflow[_mainSide];

        var _max = _offset - overflow[_altSide];

        var _preventedOffset = within(tether ? min(_min, tetherMin) : _min, _offset, tether ? max(_max, tetherMax) : _max);

        popperOffsets[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
      }
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset']
  };

  var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  };

  function arrow(_ref) {
    var _state$modifiersData$;

    var state = _ref.state,
        name = _ref.name,
        options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';

    if (!arrowElement || !popperOffsets) {
      return;
    }

    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...

    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
  }

  function effect(_ref2) {
    var state = _ref2.state,
        options = _ref2.options;
    var _options$element = options.element,
        arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

    if (arrowElement == null) {
      return;
    } // CSS selector


    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement);

      if (!arrowElement) {
        return;
      }
    }

    {
      if (!isHTMLElement(arrowElement)) {
        console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
      }
    }

    if (!contains(state.elements.popper, arrowElement)) {
      {
        console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
      }

      return;
    }

    state.elements.arrow = arrowElement;
  } // eslint-disable-next-line import/no-unused-modules


  var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
  };

  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }

    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }

  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
      return overflow[side] >= 0;
    });
  }

  function hide(_ref) {
    var state = _ref.state,
        name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped
    });
  } // eslint-disable-next-line import/no-unused-modules


  var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide
  };

  var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];
  var createPopper$1 = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers$1
  }); // eslint-disable-next-line import/no-unused-modules

  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
  var createPopper = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules

  exports.applyStyles = applyStyles$1;
  exports.arrow = arrow$1;
  exports.computeStyles = computeStyles$1;
  exports.createPopper = createPopper;
  exports.createPopperLite = createPopper$1;
  exports.defaultModifiers = defaultModifiers;
  exports.detectOverflow = detectOverflow;
  exports.eventListeners = eventListeners;
  exports.flip = flip$1;
  exports.hide = hide$1;
  exports.offset = offset$1;
  exports.popperGenerator = popperGenerator;
  exports.popperOffsets = popperOffsets$1;
  exports.preventOverflow = preventOverflow$1;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=popper.js.map


/***/ }),

/***/ "./node_modules/@tensorworks/libspsfrontend/dist/libspsfrontend.min.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorworks/libspsfrontend/dist/libspsfrontend.min.js ***!
  \*****************************************************************************/
/***/ (function(module) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(this, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Afk/AfkLogic.ts":
/*!*****************************!*\
  !*** ./src/Afk/AfkLogic.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_672__) => {

__nested_webpack_require_672__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_672__.d(__webpack_exports__, {
/* harmony export */   "AfkLogic": () => (/* binding */ AfkLogic)
/* harmony export */ });
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_672__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_672__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");


var AfkLogic = /** @class */ (function () {
    function AfkLogic(controlScheme, afkTimeout) {
        this.warnTimeout = 0;
        this.closeTimeout = 10;
        this.active = false;
        this.warnTimer = undefined;
        this.countDown = 0;
        this.countDownTimer = undefined;
        this.warnTimeout = afkTimeout;
        this.controlScheme = controlScheme;
    }
    /**
     * The methods that occur when an afk event listener is clicked
     */
    AfkLogic.prototype.onAfkClick = function () {
        this.hideCurrentOverlay();
        clearInterval(this.countDownTimer);
        this.startAfkWarningTimer();
    };
    /**
     * Start the warning timer if a timeout is set greater that 0 seconds
     */
    AfkLogic.prototype.startAfkWarningTimer = function () {
        if (this.warnTimeout > 0) {
            this.active = true;
        }
        else {
            this.active = false;
        }
        this.resetAfkWarningTimer();
    };
    /**
     * Stop the afk warning timer
     */
    AfkLogic.prototype.stopAfkWarningTimer = function () {
        this.active = false;
        clearInterval(this.warnTimer);
        clearInterval(this.countDownTimer);
    };
    /**
     * Pause the timer which when elapsed will warn the user they are inactive.
     */
    AfkLogic.prototype.pauseAfkWarningTimer = function () {
        this.active = false;
    };
    /**
     * If the user interacts then reset the warning timer.
     */
    AfkLogic.prototype.resetAfkWarningTimer = function () {
        var _this = this;
        if (this.active) {
            clearTimeout(this.warnTimer);
            this.warnTimer = setTimeout(function () { return _this.activateAfkEvent(); }, this.warnTimeout * 1000);
        }
    };
    /**
     * Show the AFK overlay and begin the countDown
     */
    AfkLogic.prototype.activateAfkEvent = function () {
        var _this = this;
        // Pause the timer while the user is looking at the inactivity warning overlay
        this.pauseAfkWarningTimer();
        // instantiate a new overlay 
        this.showAfkOverlay();
        // update our countDown timer and overlay contents
        this.countDown = this.closeTimeout;
        this.updateAfkCountdown();
        // if we are in locked mouse exit pointerlock 
        if (this.controlScheme == _Config_Config__WEBPACK_IMPORTED_MODULE_0__.ControlSchemeType.LockedMouse) {
            // minor hack to alleviate ios not supporting pointerlock
            if (document.exitPointerLock) {
                document.exitPointerLock();
            }
        }
        // reset our countDown interval accordingly 
        this.countDownTimer = setInterval(function () {
            _this.countDown--;
            if (_this.countDown == 0) {
                // The user failed to click so hide the overlay and disconnect them.
                _this.hideCurrentOverlay();
                _this.setDisconnectMessageOverride("You have been disconnected due to inactivity");
                _this.closeWebSocket();
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "You have been disconnected due to inactivity");
                // switch off the afk feature as stream has closed 
                _this.stopAfkWarningTimer();
            }
            else {
                // Update the countDown message.
                _this.updateAfkCountdown();
            }
        }, 1000);
    };
    /**
     * An override method for updating the afk countdown number in the overlay
     */
    AfkLogic.prototype.updateAfkCountdown = function () { };
    /**
     * An override method for showing the afk overlay
     */
    AfkLogic.prototype.showAfkOverlay = function () { };
    /**
     * An override method for hiding the afk overlay
     */
    AfkLogic.prototype.hideCurrentOverlay = function () { };
    /**
     * An  override method for setting the override for the disconnect message
     */
    AfkLogic.prototype.setDisconnectMessageOverride = function (message) { };
    /**
     * An override method for closing the websocket connection from the clients side
     */
    AfkLogic.prototype.closeWebSocket = function () { };
    return AfkLogic;
}());



/***/ }),

/***/ "./src/Config/Config.ts":
/*!******************************!*\
  !*** ./src/Config/Config.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_5658__) => {

__nested_webpack_require_5658__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_5658__.d(__webpack_exports__, {
/* harmony export */   "Config": () => (/* binding */ Config),
/* harmony export */   "ControlSchemeType": () => (/* binding */ ControlSchemeType)
/* harmony export */ });
var Config = /** @class */ (function () {
    /**
     * @param signallingServerAddress - the address of the signaling server
     * @param playerElement - the player element ID
     */
    function Config(signallingServerAddress, playerElement) {
        // PRESET OPTIONS
        // enable the auto connect of the websocket 
        this.enableSpsAutoConnect = true;
        // enable the autoplay of the video if enabled by browser
        this.enableSpsAutoplay = false;
        // start the video muted
        this.startVideoMuted = false;
        // set the amount of wait time in seconds while there is inactivity for afk to occur 
        this.afkTimeout = 120;
        // The control scheme controls the behaviour of the mouse when it interacts with the WebRTC player.
        this.controlScheme = ControlSchemeType.HoveringMouse;
        // Browser keys are those which are typically used by the browser UI. We usually want to suppress these to allow, for example, UE4 to show shader complexity with the F5 key without the web page refreshing.
        this.suppressBrowserKeys = true;
        // UE4 has a fake touches option which fakes a single finger touch when the user drags with their mouse. 
        // We may perform the reverse; a single finger touch may be converted into a mouse drag UE4 side. This allows a non-touch application to be controlled partially via a touch device.
        this.fakeMouseWithTouches = false;
        this.signallingServerAddress = signallingServerAddress;
        this.playerElement = playerElement;
    }
    return Config;
}());

/**
 * The enum associated with the mouse being locked or hovering
 */
var ControlSchemeType;
(function (ControlSchemeType) {
    ControlSchemeType[ControlSchemeType["LockedMouse"] = 0] = "LockedMouse";
    ControlSchemeType[ControlSchemeType["HoveringMouse"] = 1] = "HoveringMouse";
})(ControlSchemeType || (ControlSchemeType = {}));


/***/ }),

/***/ "./src/DataChannel/DataChannelController.ts":
/*!**************************************************!*\
  !*** ./src/DataChannel/DataChannelController.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_8169__) => {

__nested_webpack_require_8169__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_8169__.d(__webpack_exports__, {
/* harmony export */   "DataChannelController": () => (/* binding */ DataChannelController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_8169__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_8169__(/*! ./DataChannelReceiveMessageType */ "./src/DataChannel/DataChannelReceiveMessageType.ts");
/* harmony import */ var _InitialSettings__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_8169__(/*! ./InitialSettings */ "./src/DataChannel/InitialSettings.ts");
/* harmony import */ var _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_8169__(/*! ../DataChannel/LatencyTestResults */ "./src/DataChannel/LatencyTestResults.ts");




/**
 * Handles the Sending and Receiving of messages to the UE Instance via the Data Channel
 */
var DataChannelController = /** @class */ (function () {
    function DataChannelController() {
        this.isReceivingFreezeFrame = false;
    }
    /**
     * To Create and Set up a Data Channel
     * @param peerConnection - The RTC Peer Connection
     * @param label - Label of the Data Channel
     * @param datachannelOptions - Optional RTC DataChannel options
     */
    DataChannelController.prototype.createDataChannel = function (peerConnection, label, datachannelOptions) {
        var _this = this;
        this.peerConnection = peerConnection;
        this.label = label;
        this.datachannelOptions = datachannelOptions;
        if (datachannelOptions == null) {
            this.datachannelOptions = {};
            this.datachannelOptions.ordered = true;
        }
        this.dataChannel = this.peerConnection.createDataChannel(this.label, this.datachannelOptions);
        //We Want an Array Buffer not a blob
        this.dataChannel.binaryType = "arraybuffer";
        this.dataChannel.onopen = function () { return _this.handleOnOpen(); };
        this.dataChannel.onclose = function () { return _this.handleOnClose(); };
        this.dataChannel.onmessage = function (ev) { return _this.handleOnMessage(ev); };
    };
    /**
     * Handles when the Data Channel is opened
     */
    DataChannelController.prototype.handleOnOpen = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Data Channel: " + this.label + " is opened.", 7);
    };
    /**
     * Handles when the Data Channel is closed
     */
    DataChannelController.prototype.handleOnClose = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Data Channel: " + this.label + " is closed.", 7);
    };
    /**
     * Handles when a message is received
     * @param event - Message Event
     */
    DataChannelController.prototype.handleOnMessage = function (event) {
        var message = new Uint8Array(event.data);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Message incoming", 6);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Message:" + message, 6);
        switch (message[0]) {
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.QualityControlOwnership: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.QualityControlOwnership", 6);
                var QualityOwnership = new Boolean(message[1]).valueOf();
                this.onQualityControlOwnership(QualityOwnership);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.Response: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.Response", 6);
                this.onResponse(message);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.Command: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.Command", 6);
                this.onCommand(message);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.FreezeFrame: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.FreezeFrame", 6);
                this.processFreezeFrameMessage(message);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.UnfreezeFrame: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.FreezeFrame", 6);
                this.isReceivingFreezeFrame = false;
                this.onUnFreezeFrame();
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.VideoEncoderAvgQP: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.VideoEncoderAvgQP", 6);
                var AvgQP = Number(new TextDecoder("utf-16").decode(message.slice(1)));
                this.onVideoEncoderAvgQP(AvgQP);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.latencyTest: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.latencyTest", 6);
                var latencyAsString = new TextDecoder("utf-16").decode(message.slice(1));
                var iLatencyTestResults = JSON.parse(latencyAsString);
                var latencyTestResults = new _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_3__.LatencyTestResults();
                Object.assign(latencyTestResults, iLatencyTestResults);
                latencyTestResults.processFields();
                this.onLatencyTestResult(latencyTestResults);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.InitialSettings: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.InitialSettings", 6);
                var payloadAsString = new TextDecoder("utf-16").decode(message.slice(1));
                var iInitialSettings = JSON.parse(payloadAsString);
                var initialSettings = new _InitialSettings__WEBPACK_IMPORTED_MODULE_2__.InitialSettings();
                Object.assign(initialSettings, iInitialSettings);
                initialSettings.ueCompatible();
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), payloadAsString, 6);
                this.OnInitialSettings(initialSettings);
                break;
            }
            default: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), message[0].toString());
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "unknown message sent on the Data channel");
                break;
            }
        }
    };
    /**
     * Fired when a Response message is sent from the UE Instance
     * @param message - Message Data Uint8Array
     */
    DataChannelController.prototype.onResponse = function (message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.Response", 6);
        var responses = new TextDecoder("utf-16").decode(message.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), responses, 6);
        //add to response handlers 
    };
    /**
     * Fired when a Command message is sent from the UE Instance
     * @param message - Message Data Uint8Array
     */
    DataChannelController.prototype.onCommand = function (message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.Command", 6);
        var commandAsString = new TextDecoder("utf-16").decode(message.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Data Channel Command: " + commandAsString, 6);
        var command = JSON.parse(commandAsString);
        if (command.command === "onScreenKeyboard") {
            //show on screen Keyboard;
        }
    };
    /**
     * Send Data over the Data channel to the UE Instance
     * @param data - Message Data Array Buffer
     */
    DataChannelController.prototype.sendData = function (data) {
        // reset the afk inactivity
        this.resetAfkWarningTimerOnDataSend();
        if (this.dataChannel && this.dataChannel.readyState == "open") {
            this.dataChannel.send(data);
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Message Failed: " + new Uint8Array(data));
        }
    };
    /**
     * Fired when the UE Instance updates who has Quality Ownership
     * @param hasQualityOwnership - Does the client have Quality Ownership
     */
    DataChannelController.prototype.onQualityControlOwnership = function (hasQualityOwnership) { };
    /**
     * Fired when the UE Instance sends freeze frame data
     * @param message - Freeze Frame Data
     */
    DataChannelController.prototype.processFreezeFrameMessage = function (message) { };
    /**
     * Fired when the UE Instance sends a un Freeze Frame
     */
    DataChannelController.prototype.onUnFreezeFrame = function () { };
    /**
     * Fired when the UE Instance sends the Video Encoder Avg QP
     * @param AvgQP - Avg QP
     */
    DataChannelController.prototype.onVideoEncoderAvgQP = function (AvgQP) { };
    /**
     * Fired when the UE Instance sends Latency test Results
     * @param latencyTestResults - Latency Test Results
     */
    DataChannelController.prototype.onLatencyTestResult = function (latencyTestResults) { };
    /**
     * Fired when the UE Instance sends Initial Settings
     * @param InitialSettings - Initial Settings
     */
    DataChannelController.prototype.OnInitialSettings = function (InitialSettings) { };
    /**
     * An override method for resetting the Afk warning timer when data is sent over the data channel
     */
    DataChannelController.prototype.resetAfkWarningTimerOnDataSend = function () { };
    return DataChannelController;
}());



/***/ }),

/***/ "./src/DataChannel/DataChannelReceiveMessageType.ts":
/*!**********************************************************!*\
  !*** ./src/DataChannel/DataChannelReceiveMessageType.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_20317__) => {

__nested_webpack_require_20317__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_20317__.d(__webpack_exports__, {
/* harmony export */   "DataChannelReceiveMessageType": () => (/* binding */ DataChannelReceiveMessageType)
/* harmony export */ });
/**
 * Data Channel Receives Message Type
 */
var DataChannelReceiveMessageType;
(function (DataChannelReceiveMessageType) {
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["QualityControlOwnership"] = 0] = "QualityControlOwnership";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["Response"] = 1] = "Response";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["Command"] = 2] = "Command";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["FreezeFrame"] = 3] = "FreezeFrame";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["UnfreezeFrame"] = 4] = "UnfreezeFrame";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["VideoEncoderAvgQP"] = 5] = "VideoEncoderAvgQP";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["latencyTest"] = 6] = "latencyTest";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["InitialSettings"] = 7] = "InitialSettings";
})(DataChannelReceiveMessageType || (DataChannelReceiveMessageType = {}));


/***/ }),

/***/ "./src/DataChannel/InitialSettings.ts":
/*!********************************************!*\
  !*** ./src/DataChannel/InitialSettings.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_21891__) => {

__nested_webpack_require_21891__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_21891__.d(__webpack_exports__, {
/* harmony export */   "Encoder": () => (/* binding */ Encoder),
/* harmony export */   "InitialSettings": () => (/* binding */ InitialSettings),
/* harmony export */   "PixelStreaming": () => (/* binding */ PixelStreaming),
/* harmony export */   "WebRTC": () => (/* binding */ WebRTC)
/* harmony export */ });
/**
 * Latency Test Results Data
 */
var InitialSettings = /** @class */ (function () {
    function InitialSettings() {
        this.PixelStreaming = new PixelStreaming();
        this.Encoder = new Encoder();
        this.WebRTC = new WebRTC();
    }
    InitialSettings.prototype.ueCompatible = function () {
        if (this.WebRTC.MaxFPS != null) {
            this.WebRTC.FPS = this.WebRTC.MaxFPS;
        }
    };
    return InitialSettings;
}());

var PixelStreaming = /** @class */ (function () {
    function PixelStreaming() {
    }
    return PixelStreaming;
}());

var Encoder = /** @class */ (function () {
    function Encoder() {
    }
    return Encoder;
}());

var WebRTC = /** @class */ (function () {
    function WebRTC() {
    }
    return WebRTC;
}());



/***/ }),

/***/ "./src/DataChannel/LatencyTestResults.ts":
/*!***********************************************!*\
  !*** ./src/DataChannel/LatencyTestResults.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_23391__) => {

__nested_webpack_require_23391__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_23391__.d(__webpack_exports__, {
/* harmony export */   "LatencyTestResults": () => (/* binding */ LatencyTestResults)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_23391__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");

/**
 * Latency Test Results Data
 */
var LatencyTestResults = /** @class */ (function () {
    function LatencyTestResults() {
        //Fields Set from the latency payload regardless of version
        this.ReceiptTimeMs = null;
        this.TransmissionTimeMs = null;
        //Fields Set from the latency payload from 4.27.2
        this.PreCaptureTimeMs = null;
        this.PostCaptureTimeMs = null;
        this.PreEncodeTimeMs = null;
        this.PostEncodeTimeMs = null;
        //Fields Set from the latency payload from 5.0
        this.EncodeMs = null;
        this.CaptureToSendMs = null;
        //Fields Set when processed
        this.testStartTimeMs = 0;
        this.browserReceiptTimeMs = 0;
        //Fields set from calculations
        this.latencyExcludingDecode = 0;
        this.testDuration = 0;
        //ueLatency: number = 0;
        this.networkLatency = 0;
        this.browserSendLatency = 0;
        this.frameDisplayDeltaTimeMs = 0;
        this.endToEndLatency = 0;
        //uePixelStreamLatency: number = 0;
        this.encodeLatency = 0;
    }
    /**
     * Sets the Delta Time Milliseconds
     * @param DeltaTimeMs - Delta Time Milliseconds
     */
    LatencyTestResults.prototype.setFrameDisplayDeltaTime = function (DeltaTimeMs) {
        if (this.frameDisplayDeltaTimeMs == 0) {
            this.frameDisplayDeltaTimeMs = Math.round(DeltaTimeMs);
        }
    };
    LatencyTestResults.prototype.processFields = function () {
        if (this.EncodeMs == null && (this.PreEncodeTimeMs != null || this.PostEncodeTimeMs != null)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Setting Encode Ms \n " + this.PostEncodeTimeMs + " \n " + this.PreEncodeTimeMs, 6);
            this.EncodeMs = this.PostEncodeTimeMs - this.PreEncodeTimeMs;
        }
        if (this.CaptureToSendMs == null && (this.PreCaptureTimeMs != null || this.PostCaptureTimeMs != null)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Setting CaptureToSendMs Ms \n " + this.PostCaptureTimeMs + " \n " + this.PreCaptureTimeMs, 6);
            this.CaptureToSendMs = this.PostCaptureTimeMs - this.PreCaptureTimeMs;
        }
    };
    return LatencyTestResults;
}());



/***/ }),

/***/ "./src/Delegate/DelegateBase.ts":
/*!**************************************!*\
  !*** ./src/Delegate/DelegateBase.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_26383__) => {

__nested_webpack_require_26383__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_26383__.d(__webpack_exports__, {
/* harmony export */   "DelegateBase": () => (/* binding */ DelegateBase)
/* harmony export */ });
/**
 * Provides common base functionality for delegates that implement the IDelegate interface
*/
var DelegateBase = /** @class */ (function () {
    /**
     * @param config - A newly instantiated config object
     * returns the base delegate object with the config inside it along with a new instance of the Overlay controller class
     */
    function DelegateBase(config) {
        this.showActionOrErrorOnDisconnect = true;
        this.config = config;
    }
    /**
     * Shows the disconnect overlay
     */
    DelegateBase.prototype.showDisconnectOverlay = function (updateText) {
        this.hideCurrentOverlay();
        this.updateDisconnectOverlay(updateText);
        this.disconnectOverlay.show();
        this.currentOverlay = this.disconnectOverlay;
    };
    /**
     * Update the disconnect overlays span text
     * @param updateText the new countdown number
     */
    DelegateBase.prototype.updateDisconnectOverlay = function (updateText) {
        this.disconnectOverlay.update(updateText);
    };
    /**
     * Activates the disconnect overlays action
     */
    DelegateBase.prototype.onDisconnectionAction = function () {
        this.disconnectOverlay.activate();
    };
    /**
     * Hides the current overlay
     */
    DelegateBase.prototype.hideCurrentOverlay = function () {
        if (this.currentOverlay != null) {
            this.currentOverlay.hide();
            this.currentOverlay = null;
        }
    };
    /**
     * Shows the connect overlay
     */
    DelegateBase.prototype.showConnectOverlay = function () {
        this.hideCurrentOverlay();
        this.connectOverlay.show();
        this.currentOverlay = this.connectOverlay;
    };
    /**
     * Shows the play overlay
     */
    DelegateBase.prototype.showPlayOverlay = function () {
        this.hideCurrentOverlay();
        this.playOverlay.show();
        this.currentOverlay = this.playOverlay;
    };
    /**
     * Shows the text overlay
     */
    DelegateBase.prototype.showTextOverlay = function (text) {
        this.hideCurrentOverlay();
        this.infoOverlay.update(text);
        this.infoOverlay.show();
        this.currentOverlay = this.infoOverlay;
    };
    /**
     * Shows the error overlay
     */
    DelegateBase.prototype.showErrorOverlay = function (text) {
        this.hideCurrentOverlay();
        this.errorOverlay.update(text);
        this.errorOverlay.show();
        this.currentOverlay = this.errorOverlay;
    };
    /**
     * Activates the connect overlays action
     */
    DelegateBase.prototype.onConnectAction = function () {
        this.connectOverlay.activate();
    };
    /**
     * Activates the play overlays action
     */
    DelegateBase.prototype.onPlayAction = function () {
        this.playOverlay.activate();
    };
    /**
     * Shows the afk overlay
     * @param countDown the countdown number for the afk countdown
     */
    DelegateBase.prototype.showAfkOverlay = function (countDown) {
        this.hideCurrentOverlay();
        this.updateAfkOverlay(countDown);
        this.afkOverlay.show();
        this.currentOverlay = this.afkOverlay;
    };
    /**
     * Update the afk overlays countdown number
     * @param countDown the new countdown number
     */
    DelegateBase.prototype.updateAfkOverlay = function (countDown) {
        this.afkOverlay.updateCountdown(countDown);
    };
    /**
     * Activates the afk overlays action
     */
    DelegateBase.prototype.onAfkAction = function () {
        this.afkOverlay.activate();
    };
    /**
     * Instantiate the WebRTCPlayerController interface to provide WebRTCPlayerController functionality within this class and set up anything that requires it
     * @param iWebRtcPlayerController
     */
    DelegateBase.prototype.setIWebRtcPlayerController = function (iWebRtcPlayerController) {
        var _this = this;
        this.iWebRtcController = iWebRtcPlayerController;
        this.iWebRtcController.resizePlayerStyle();
        this.disconnectOverlay.onAction(function () {
            _this.onWebRtcAutoConnect();
            _this.iWebRtcController.connectToSignallingSever();
        });
        // Build the webRtc connect overlay Event Listener and show the connect overlay
        this.connectOverlay.onAction(function () { return _this.iWebRtcController.connectToSignallingSever(); });
        // set up the afk overlays action 
        this.afkOverlay.onAction(function () { return _this.iWebRtcController.onAfkClick(); });
        // set up the play overlays action 
        this.playOverlay.onAction(function () {
            _this.onStreamLoading();
            _this.iWebRtcController.playStream();
        });
        // set up the connect overlays action
        this.showConnectOrAutoConnectOverlays();
    };
    /**
     * Show the Connect Overlay or auto connect
     */
    DelegateBase.prototype.showConnectOrAutoConnectOverlays = function () {
        // set up if the auto play will be used or regular click to start
        if (!this.config.enableSpsAutoConnect) {
            this.showConnectOverlay();
        }
        else {
            // if autoplaying show an info overlay while while waiting for the connection to begin 
            this.onWebRtcAutoConnect();
            this.iWebRtcController.connectToSignallingSever();
        }
    };
    /**
     * Show the webRtcAutoConnect Overlay and connect
     */
    DelegateBase.prototype.onWebRtcAutoConnect = function () {
        this.showTextOverlay("Auto Connecting Now");
        this.showActionOrErrorOnDisconnect = true;
    };
    /**
     * Set up functionality to happen when an instance state change occurs
     * @param instanceState - the message instance state
     */
    DelegateBase.prototype.onInstanceStateChange = function (instanceState) { };
    /**
     * Set up functionality to happen when receiving an auth response
     * @param authResponse - the auth response message type
     */
    DelegateBase.prototype.onAuthenticationResponse = function (authResponse) { };
    /**
     * Set up functionality to happen when receiving a webRTC answer
     */
    DelegateBase.prototype.onWebRtcAnswer = function () {
        this.showTextOverlay("RTC Answer");
    };
    /**
     * Shows a text overlay to alert the user the stream is currently loading
     */
    DelegateBase.prototype.onStreamLoading = function () {
        this.showTextOverlay("Loading Stream");
    };
    /**
     * Event fired when the video is disconnected
     */
    DelegateBase.prototype.onDisconnect = function (eventString) {
        // if we have overridden the default disconnection messsage, assign the new value here
        if (this.iWebRtcController.getDisconnectMessageOverride() != "" && this.iWebRtcController.getDisconnectMessageOverride() !== undefined && this.iWebRtcController.getDisconnectMessageOverride() != null) {
            eventString = this.iWebRtcController.getDisconnectMessageOverride();
            this.iWebRtcController.setDisconnectMessageOverride('');
        }
        if (this.showActionOrErrorOnDisconnect == false) {
            this.showErrorOverlay("Disconnected: " + eventString);
            this.showActionOrErrorOnDisconnect = true;
        }
        else {
            this.showDisconnectOverlay("Disconnected: " + eventString + "  \n Click To Restart");
        }
    };
    /**
     * Handles when Web Rtc is connecting
     */
    DelegateBase.prototype.onWebRtcConnecting = function () {
        this.showTextOverlay("Starting connection to server, please wait");
    };
    /**
     * Handles when Web Rtc has connected
     */
    DelegateBase.prototype.onWebRtcConnected = function () {
        this.showTextOverlay("WebRTC connected, waiting for video");
    };
    /**
     * Handles when Web Rtc fails to connect
     */
    DelegateBase.prototype.onWebRtcFailed = function () {
        this.showErrorOverlay("Unable to setup video");
    };
    /**
     * Set up methods and functions to run when the video is initialised
     */
    DelegateBase.prototype.onVideoInitialised = function () { };
    /**
     * Set up functionality to happen when receiving latency test results
     * @param latency - latency test results object
     */
    DelegateBase.prototype.onLatencyTestResult = function (latency) { };
    /**
     * Set up functionality to happen when receiving video statistics
     * @param videoStats - video statistics as a aggregate stats object
     */
    DelegateBase.prototype.onVideoStats = function (videoStats) { };
    /**
     * Set up functionality to happen when calculating the average video encoder qp
     * @param QP - the quality number of the stream
     */
    DelegateBase.prototype.onVideoEncoderAvgQP = function (QP) { };
    /**
     * Set up functionality to happen when receiving and handling initial settings for the UE app
     * @param settings - initial UE app settings
     */
    DelegateBase.prototype.onInitialSettings = function (settings) { };
    /**
     * Set up functionality to happen when setting quality control ownership of a stream
     * @param hasQualityOwnership - does this user have quality ownership of the stream true / false
     */
    DelegateBase.prototype.onQualityControlOwnership = function (hasQualityOwnership) { };
    return DelegateBase;
}());



/***/ }),

/***/ "./src/FreezeFrame/FreezeFrame.ts":
/*!****************************************!*\
  !*** ./src/FreezeFrame/FreezeFrame.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_36179__) => {

__nested_webpack_require_36179__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_36179__.d(__webpack_exports__, {
/* harmony export */   "FreezeFrame": () => (/* binding */ FreezeFrame)
/* harmony export */ });
/**
 * A class for managing the freeze frame object
 */
var FreezeFrame = /** @class */ (function () {
    /**
     * Construct a freeze frame
     * @param rootDiv the div that a freeze frame element will be created into
     */
    function FreezeFrame(rootDiv) {
        this.freezeFrameHeight = 0;
        this.freezeFrameWidth = 0;
        this.rootDiv = rootDiv;
        // create the overlay
        this.rootElement = document.createElement('div');
        this.rootElement.id = 'freezeFrame';
        this.rootElement.style.display = 'none';
        this.rootElement.style.pointerEvents = 'none';
        this.rootElement.style.position = 'absolute';
        this.rootElement.style.zIndex = '20';
        // create the image place holder
        this.imageElement = document.createElement('img');
        this.imageElement.style.position = 'absolute';
        // append the image into the root element and append the element to the root div
        this.rootElement.appendChild(this.imageElement);
        this.rootDiv.appendChild(this.rootElement);
    }
    /**
     * Set the freeze frame element for showing
     */
    FreezeFrame.prototype.setElementForShow = function () {
        this.rootElement.style.display = 'block';
    };
    /**
     * Set the freeze frame element for hiding
     */
    FreezeFrame.prototype.setElementForHide = function () {
        this.rootElement.style.display = 'none';
    };
    /**
     * Update the freeze frames image source
     * @param jpeg the freeze frame image as a byte array data
     */
    FreezeFrame.prototype.updateImageElementSource = function (jpeg) {
        var base64 = btoa(jpeg.reduce(function (data, byte) { return data + String.fromCharCode(byte); }, ''));
        this.imageElement.src = 'data:image/jpeg;base64,' + base64;
    };
    /**
     * Set the dimensions for the freeze frame from the element and resize it
     */
    FreezeFrame.prototype.setDimensionsFromElementAndResize = function () {
        this.freezeFrameHeight = this.imageElement.naturalHeight;
        this.freezeFrameWidth = this.imageElement.naturalWidth;
        this.resize();
    };
    /**
     * Resize a freeze frame element
     */
    FreezeFrame.prototype.resize = function () {
        if (this.freezeFrameWidth !== 0 && this.freezeFrameHeight !== 0) {
            var displayWidth = 0;
            var displayHeight = 0;
            var displayTop = 0;
            var displayLeft = 0;
            if (this.enlargeDisplayToFillWindow === null || this.enlargeDisplayToFillWindow === true) {
                var windowAspectRatio = window.innerWidth / window.innerHeight;
                var videoAspectRatio = this.freezeFrameWidth / this.freezeFrameHeight;
                if (windowAspectRatio < videoAspectRatio) {
                    displayWidth = window.innerWidth;
                    displayHeight = Math.floor(window.innerWidth / videoAspectRatio);
                    displayTop = Math.floor((window.innerHeight - displayHeight) * 0.5);
                    displayLeft = 0;
                }
                else {
                    displayWidth = Math.floor(window.innerHeight * videoAspectRatio);
                    displayHeight = window.innerHeight;
                    displayTop = 0;
                    displayLeft = Math.floor((window.innerWidth - displayWidth) * 0.5);
                }
            }
            else {
                // Video is coming in at native resolution, we care more about the player size
                var playerAspectRatio = this.rootDiv.offsetWidth / this.rootDiv.offsetHeight;
                var videoAspectRatio = this.freezeFrameWidth / this.freezeFrameHeight;
                if (playerAspectRatio < videoAspectRatio) {
                    displayWidth = this.rootDiv.offsetWidth;
                    displayHeight = Math.floor(this.rootDiv.offsetWidth / videoAspectRatio);
                    displayTop = Math.floor((this.rootDiv.offsetHeight - displayHeight) * 0.5);
                    displayLeft = 0;
                }
                else {
                    displayWidth = Math.floor(this.rootDiv.offsetHeight * videoAspectRatio);
                    displayHeight = this.rootDiv.offsetHeight;
                    displayTop = 0;
                    displayLeft = Math.floor((this.rootDiv.offsetWidth - displayWidth) * 0.5);
                }
            }
            this.rootElement.style.width = this.rootDiv.offsetWidth + 'px';
            this.rootElement.style.height = this.rootDiv.offsetHeight + 'px';
            this.rootElement.style.left = 0 + 'px';
            this.rootElement.style.top = 0 + 'px';
            this.imageElement.style.width = displayWidth + 'px';
            this.imageElement.style.height = displayHeight + 'px';
            this.imageElement.style.left = displayLeft + 'px';
            this.imageElement.style.top = displayTop + 'px';
        }
    };
    return FreezeFrame;
}());



/***/ }),

/***/ "./src/FreezeFrame/FreezeFrameController.ts":
/*!**************************************************!*\
  !*** ./src/FreezeFrame/FreezeFrameController.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_41646__) => {

__nested_webpack_require_41646__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_41646__.d(__webpack_exports__, {
/* harmony export */   "FreezeFrameController": () => (/* binding */ FreezeFrameController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_41646__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _FreezeFrame__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_41646__(/*! ./FreezeFrame */ "./src/FreezeFrame/FreezeFrame.ts");


/**
 * A class for controlling freeze frame functionality
 */
var FreezeFrameController = /** @class */ (function () {
    /**
     * Construct a freeze frame controller
     * @param rootDiv the div that a freeze frame element will be created into
     */
    function FreezeFrameController(rootDiv) {
        this.receiving = false;
        this.size = 0;
        this.jpeg = undefined;
        this.valid = false;
        this.freezeFrame = new _FreezeFrame__WEBPACK_IMPORTED_MODULE_1__.FreezeFrame(rootDiv);
    }
    /**
     * Show the freeze frame if it is valid
     */
    FreezeFrameController.prototype.showFreezeFrame = function () {
        if (this.valid) {
            this.freezeFrame.setElementForShow();
        }
    };
    /**
     * Hide the freeze frame and set the validity to false
     */
    FreezeFrameController.prototype.hideFreezeFrame = function () {
        this.valid = false;
        this.freezeFrame.setElementForHide();
    };
    /**
     * Update the freeze frames image source and load it
     * @param jpeg the freeze frame image as a byte array data
     * @param onLoadCallBack a call back for managing if the play overlay needs to be shown or not
     */
    FreezeFrameController.prototype.updateFreezeFrameAndShow = function (jpeg, onLoadCallBack) {
        var _this = this;
        this.freezeFrame.updateImageElementSource(jpeg);
        this.freezeFrame.imageElement.onload = function () {
            _this.freezeFrame.setDimensionsFromElementAndResize();
            onLoadCallBack();
        };
    };
    /**
     * Process the new freeze frame image and update it
     * @param view the freeze frame image as a byte array data
     * @param onLoadCallBack a call back for managing if the play overlay needs to be shown or not
     */
    FreezeFrameController.prototype.processFreezeFrameMessage = function (view, onLoadCallBack) {
        // Reset freeze frame if we got a freeze frame message and we are not "receiving" yet.
        if (!this.receiving) {
            this.receiving = true;
            this.valid = false;
            this.size = 0;
            this.jpeg = undefined;
        }
        // Extract total size of freeze frame (across all chunks)
        this.size = (new DataView(view.slice(1, 5).buffer)).getInt32(0, true);
        // Get the jpeg part of the payload
        var jpegBytes = view.slice(1 + 4);
        // Append to existing jpeg that holds the freeze frame
        if (this.jpeg) {
            var jpeg = new Uint8Array(this.jpeg.length + jpegBytes.length);
            jpeg.set(this.jpeg, 0);
            jpeg.set(jpegBytes, this.jpeg.length);
            this.jpeg = jpeg;
        }
        // No existing freeze frame jpeg, make one
        else {
            this.jpeg = jpegBytes;
            this.receiving = true;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "received first chunk of freeze frame: " + this.jpeg.length + "/" + this.size, 6);
        }
        // Finished receiving freeze frame, we can show it now
        if (this.jpeg.length === this.size) {
            this.receiving = false;
            this.valid = true;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "received complete freeze frame " + this.size, 6);
            this.updateFreezeFrameAndShow(this.jpeg, onLoadCallBack);
        }
        // We received more data than the freeze frame payload message indicate (this is an error)
        else if (this.jpeg.length > this.size) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "received bigger freeze frame than advertised: " + this.jpeg.length + "/" + this.size);
            this.jpeg = undefined;
            this.receiving = false;
        }
    };
    return FreezeFrameController;
}());



/***/ }),

/***/ "./src/Inputs/FakeTouchController.ts":
/*!*******************************************!*\
  !*** ./src/Inputs/FakeTouchController.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_46431__) => {

__nested_webpack_require_46431__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_46431__.d(__webpack_exports__, {
/* harmony export */   "FakeTouchController": () => (/* binding */ FakeTouchController)
/* harmony export */ });
/* harmony import */ var _UeInstanceMessage_UeInputMouseMessage__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_46431__(/*! ../UeInstanceMessage/UeInputMouseMessage */ "./src/UeInstanceMessage/UeInputMouseMessage.ts");
/* harmony import */ var _MouseButtons__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_46431__(/*! ./MouseButtons */ "./src/Inputs/MouseButtons.ts");


/**
 * Allows for the usage of fake touch events and implements ITouchController
 * @param dataChannelController - The controller for the Data channel
 * @param videoPlayerElement - The video player DOM element
 */
var FakeTouchController = /** @class */ (function () {
    function FakeTouchController(dataChannelController, videoPlayerElement) {
        var _this = this;
        this.ueInputMouseMessage = new _UeInstanceMessage_UeInputMouseMessage__WEBPACK_IMPORTED_MODULE_0__.UeInputMouseMessage(dataChannelController);
        this.videoPlayerElement = videoPlayerElement;
        document.ontouchstart = function (ev) { return _this.onTouchStart(ev); };
        document.ontouchend = function (ev) { return _this.onTouchEnd(ev); };
        document.ontouchmove = function (ev) { return _this.onTouchMove(ev); };
    }
    /**
     * When a touch event begins
     * @param touch - the activating touch event
     */
    FakeTouchController.prototype.onTouchStart = function (touch) {
        if (this.finger == null) {
            var first_touch = touch.changedTouches[0];
            this.finger = {
                ID: first_touch.identifier,
                X: first_touch.clientX - this.videoPlayerElement.getBoundingClientRect().left,
                Y: first_touch.clientY - -this.videoPlayerElement.getBoundingClientRect().top
            };
            var mouseEvent = new MouseEvent(touch.type, first_touch);
            this.videoPlayerElement.onmouseenter(mouseEvent);
            this.ueInputMouseMessage.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton, this.finger.X, this.finger.Y);
        }
    };
    /**
     * When a touch event ends
     * @param touchEvent - the activating touch event
     */
    FakeTouchController.prototype.onTouchEnd = function (touchEvent) {
        for (var i = 0; i < touchEvent.changedTouches.length; i++) {
            var touch = touchEvent.changedTouches[i];
            if (touch.identifier === this.finger.ID) {
                var x = touch.clientX - this.videoPlayerElement.getBoundingClientRect().left;
                var y = touch.clientY - this.videoPlayerElement.getBoundingClientRect().top;
                this.ueInputMouseMessage.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton, x, y);
                var mouseEvent = new MouseEvent(touchEvent.type, touch);
                this.videoPlayerElement.onmouseleave(mouseEvent);
                this.finger = null;
            }
        }
    };
    /**
     * On a Move touch event
     * @param touchEvent - the activating touch event
     */
    FakeTouchController.prototype.onTouchMove = function (touchEvent) {
        for (var i = 0; i < touchEvent.touches.length; i++) {
            var touch = touchEvent.touches[i];
            if (touch.identifier === this.finger.ID) {
                var x = touch.clientX - this.videoPlayerElement.getBoundingClientRect().left;
                var y = touch.clientY - this.videoPlayerElement.getBoundingClientRect().top;
                this.ueInputMouseMessage.sendMouseMove(x, y, x - this.finger.X, y - this.finger.Y);
                this.finger.X = x;
                this.finger.Y = y;
            }
        }
    };
    return FakeTouchController;
}());



/***/ }),

/***/ "./src/Inputs/GamepadController.ts":
/*!*****************************************!*\
  !*** ./src/Inputs/GamepadController.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_50579__) => {

__nested_webpack_require_50579__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_50579__.d(__webpack_exports__, {
/* harmony export */   "GamePadController": () => (/* binding */ GamePadController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_50579__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _UeInstanceMessage_UeInputGamePadMessage__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_50579__(/*! ../UeInstanceMessage/UeInputGamePadMessage */ "./src/UeInstanceMessage/UeInputGamePadMessage.ts");


/**
 * The class that handles the functionality of gamepads and controllers
 */
var GamePadController = /** @class */ (function () {
    /**
     * @param dataChannelController - the data chanel controller
     */
    function GamePadController(dataChannelController) {
        var _this = this;
        this.ueInputGamePadMessage = new _UeInstanceMessage_UeInputGamePadMessage__WEBPACK_IMPORTED_MODULE_1__.UeInputGamePadMessage(dataChannelController);
        if ("GamepadEvent" in window) {
            window.addEventListener("gamepadconnected", function (ev) { return _this.gamePadConnectHandler(ev); });
            window.addEventListener("gamepaddisconnected", function (ev) { return _this.gamePadDisconnectHandler(ev); });
        }
        else if ("WebKitGamepadEvent" in window) {
            window.addEventListener("webkitgamepadconnected", function (ev) { return _this.gamePadConnectHandler(ev); });
            window.addEventListener("webkitgamepaddisconnected", function (ev) { return _this.gamePadDisconnectHandler(ev); });
        }
        this.controllers = [];
    }
    /**
     * Connects the gamepad handler
     * @param gamePadEvent - the activating gamepad event
     */
    GamePadController.prototype.gamePadConnectHandler = function (gamePadEvent) {
        var _this = this;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Gamepad connect handler", 6);
        var gamepad = gamePadEvent.gamepad;
        var temp = {
            currentState: gamepad,
            prevState: gamepad
        };
        this.controllers.push(temp);
        this.controllers[gamepad.index].currentState = gamepad;
        this.controllers[gamepad.index].prevState = gamepad;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "gamepad: " + gamepad.id + " connected", 6);
        window.requestAnimationFrame(function () { return _this.updateStatus(); });
    };
    /**
     * Disconnects the gamepad handler
     * @param gamePadEvent - the activating gamepad event
     */
    GamePadController.prototype.gamePadDisconnectHandler = function (gamePadEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Gamepad disconnect handler", 6);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "gamepad: " + gamePadEvent.gamepad.id + " disconnected", 6);
        delete this.controllers[gamePadEvent.gamepad.index];
        this.controllers = this.controllers.filter(function (controller) { return controller !== undefined; });
    };
    /**
     * Scan for connected gamepads
     */
    GamePadController.prototype.scanGamePads = function () {
        var gamepads = ((navigator.getGamepads) ? navigator.getGamepads() : []); //  : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);
        for (var i = 0; i < gamepads.length; i++) {
            if (gamepads[i] && (gamepads[i].index in this.controllers)) {
                this.controllers[gamepads[i].index].currentState = gamepads[i];
            }
        }
    };
    /**
     * Updates the status of the gamepad and sends the inputs
     */
    GamePadController.prototype.updateStatus = function () {
        var _this = this;
        this.scanGamePads();
        // Iterate over multiple controllers in the case the multiple gamepads are connected
        for (var _i = 0, _a = this.controllers; _i < _a.length; _i++) {
            var controller = _a[_i];
            try {
                var currentState = controller.currentState;
                for (var i = 0; i < controller.currentState.buttons.length; i++) {
                    var currentButton = controller.currentState.buttons[i];
                    var previousButton = controller.prevState.buttons[i];
                    // Button 6 is actually the left trigger, send it to UE as an analog axis
                    // Button 7 is actually the right trigger, send it to UE as an analog axis
                    // The rest are normal buttons. Treat as such
                    if (currentButton.pressed && !previousButton.pressed) {
                        // New press
                        if (i == 6) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 5, currentButton.value);
                        }
                        else if (i == 7) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 6, currentButton.value);
                        }
                        else {
                            this.ueInputGamePadMessage.sendControllerButtonPressed(currentState.index, i, false);
                        }
                    }
                    else if (!currentButton.pressed && previousButton.pressed) {
                        // release
                        if (i == 6) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 5, 0);
                        }
                        else if (i == 7) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 6, 0);
                        }
                        else {
                            this.ueInputGamePadMessage.sendControllerButtonReleased(currentState.index, i);
                        }
                    }
                    else if (currentButton.pressed && previousButton.pressed) {
                        // repeat press / hold
                        if (i == 6) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 5, currentButton.value);
                        }
                        else if (i == 7) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 6, currentButton.value);
                        }
                        else {
                            this.ueInputGamePadMessage.sendControllerButtonPressed(currentState.index, i, true);
                        }
                    }
                    // Last case is button isn't currently pressed and wasn't pressed before. This doesn't need an else block
                }
                for (var i = 0; i < currentState.axes.length; i += 2) {
                    var x = parseFloat(currentState.axes[i].toFixed(4));
                    // https://w3c.github.io/gamepad/#remapping Gamepad browser side standard mapping has positive down, negative up. This is downright disgusting. So we fix it.
                    var y = -parseFloat(currentState.axes[i + 1].toFixed(4));
                    if (i === 0) {
                        // left stick
                        // axis 1 = left horizontal
                        this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 1, x);
                        // axis 2 = left vertical
                        this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 2, y);
                    }
                    else if (i === 2) {
                        // right stick
                        // axis 3 = right horizontal
                        this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 3, x);
                        // axis 4 = right vertical
                        this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 4, y);
                    }
                }
                this.controllers[currentState.index].prevState = currentState;
            }
            catch (error) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Oh dear the gamepad poll loop has thrown an error");
            }
        }
        window.requestAnimationFrame(function () { return _this.updateStatus(); });
    };
    return GamePadController;
}());



/***/ }),

/***/ "./src/Inputs/GyroController.ts":
/*!**************************************!*\
  !*** ./src/Inputs/GyroController.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_59534__) => {

__nested_webpack_require_59534__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_59534__.d(__webpack_exports__, {
/* harmony export */   "GyroController": () => (/* binding */ GyroController)
/* harmony export */ });
/**
 * The Class that handles gyro input
 */
var GyroController = /** @class */ (function () {
    function GyroController(dataChannelController) {
        this.dataChannelController = dataChannelController;
    }
    return GyroController;
}());



/***/ }),

/***/ "./src/Inputs/InputController.ts":
/*!***************************************!*\
  !*** ./src/Inputs/InputController.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_60264__) => {

__nested_webpack_require_60264__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_60264__.d(__webpack_exports__, {
/* harmony export */   "InputController": () => (/* binding */ InputController)
/* harmony export */ });
/* harmony import */ var _FakeTouchController__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_60264__(/*! ./FakeTouchController */ "./src/Inputs/FakeTouchController.ts");
/* harmony import */ var _KeyboardController__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_60264__(/*! ./KeyboardController */ "./src/Inputs/KeyboardController.ts");
/* harmony import */ var _MouseController__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_60264__(/*! ./MouseController */ "./src/Inputs/MouseController.ts");
/* harmony import */ var _TouchController__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_60264__(/*! ./TouchController */ "./src/Inputs/TouchController.ts");
/* harmony import */ var _GamepadController__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_60264__(/*! ./GamepadController */ "./src/Inputs/GamepadController.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_60264__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _VideoPlayer_VideoPlayerMouseLockedEvents__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_60264__(/*! ../VideoPlayer/VideoPlayerMouseLockedEvents */ "./src/VideoPlayer/VideoPlayerMouseLockedEvents.ts");
/* harmony import */ var _VideoPlayer_VideoPlayerMouseHoverEvents__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_60264__(/*! ../VideoPlayer/VideoPlayerMouseHoverEvents */ "./src/VideoPlayer/VideoPlayerMouseHoverEvents.ts");
/* harmony import */ var _GyroController__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_60264__(/*! ./GyroController */ "./src/Inputs/GyroController.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_60264__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");










/**
 * Class for handling inputs for mouse and keyboard
 */
var InputController = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - the data channel controller
     */
    function InputController(dataChannelController, videoElementProvider) {
        this.dataChannelController = dataChannelController;
        this.videoElementProvider = videoElementProvider;
    }
    /**
     * registers browser key events
     * @param suppressBrowserKeys - option to suppress browser keys
     */
    InputController.prototype.registerKeyBoard = function (suppressBrowserKeys) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Register Keyboard Events", 7);
        this.keyboardController = new _KeyboardController__WEBPACK_IMPORTED_MODULE_1__.KeyboardController(this.dataChannelController, suppressBrowserKeys);
        this.keyboardController.registerKeyBoardEvents();
    };
    /**
     * register mouse events based on a control type
     * @param controlScheme - if the mouse is either hovering or locked
     */
    InputController.prototype.registerMouse = function (controlScheme) {
        var _this = this;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Register Mouse Events", 7);
        // casting these as any as they do not have the moz attributes we require
        var videoElement = this.videoElementProvider.getVideoElement();
        var videoInputBindings;
        this.mouseController = new _MouseController__WEBPACK_IMPORTED_MODULE_2__.MouseController(this.dataChannelController, this.videoElementProvider);
        switch (controlScheme) {
            case _Config_Config__WEBPACK_IMPORTED_MODULE_5__.ControlSchemeType.LockedMouse:
                videoInputBindings = new _VideoPlayer_VideoPlayerMouseLockedEvents__WEBPACK_IMPORTED_MODULE_6__.VideoPlayerMouseLockedEvents(this.videoElementProvider, this.mouseController);
                videoElement.onclick = function (event) { return _this.videoElementProvider.setClickActions(event); };
                document.addEventListener('pointerlockchange', function () { return videoInputBindings.handleLockStateChange(); }, false);
                document.addEventListener('mozpointerlockchange', function () { return videoInputBindings.handleLockStateChange(); }, false);
                break;
            case _Config_Config__WEBPACK_IMPORTED_MODULE_5__.ControlSchemeType.HoveringMouse:
                videoInputBindings = new _VideoPlayer_VideoPlayerMouseHoverEvents__WEBPACK_IMPORTED_MODULE_7__.VideoPlayerMouseHoverEvents(this.mouseController);
                // set the onclick to null if the input bindings were previously set to pointerlock
                videoElement.onclick = null;
                document.onmousemove = function (mouseEvent) { return videoInputBindings.handleMouseMove(mouseEvent); };
                document.onwheel = function (mouseEvent) { return videoInputBindings.handleMouseWheel(mouseEvent); };
                videoElement.onmousedown = function (mouseEvent) { return videoInputBindings.handleMouseDown(mouseEvent); };
                videoElement.onmouseup = function (mouseEvent) { return videoInputBindings.handleMouseUp(mouseEvent); };
                break;
            default:
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "unknown Control Scheme Type Defaulting to Locked Mouse Events");
                break;
        }
    };
    /**
     * register touch events
     * @param fakeMouseTouch - the faked mouse touch event
     * @param playerElement - the player elements DOM
     */
    InputController.prototype.registerTouch = function (fakeMouseTouch, playerElement) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Registering Touch", 6);
        if (fakeMouseTouch) {
            this.touchController = new _FakeTouchController__WEBPACK_IMPORTED_MODULE_0__.FakeTouchController(this.dataChannelController, playerElement.getElementsByTagName("video")[0]);
        }
        else {
            this.touchController = new _TouchController__WEBPACK_IMPORTED_MODULE_3__.TouchController(this.dataChannelController, playerElement, this.videoElementProvider);
        }
    };
    /**
     * registers a gamepad
     */
    InputController.prototype.registerGamePad = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Register Game Pad", 7);
        this.gamePadController = new _GamepadController__WEBPACK_IMPORTED_MODULE_4__.GamePadController(this.dataChannelController);
    };
    /**
     * registers a gyro device
     */
    InputController.prototype.registerGyro = function () {
        this.gyroController = new _GyroController__WEBPACK_IMPORTED_MODULE_8__.GyroController(this.dataChannelController);
    };
    return InputController;
}());



/***/ }),

/***/ "./src/Inputs/KeyboardController.ts":
/*!******************************************!*\
  !*** ./src/Inputs/KeyboardController.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_67589__) => {

__nested_webpack_require_67589__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_67589__.d(__webpack_exports__, {
/* harmony export */   "KeyboardController": () => (/* binding */ KeyboardController)
/* harmony export */ });
/* harmony import */ var _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_67589__(/*! ./SpecialKeyCodes */ "./src/Inputs/SpecialKeyCodes.ts");
/* harmony import */ var _UeInstanceMessage_UeInputKeyboardMessage__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_67589__(/*! ../UeInstanceMessage/UeInputKeyboardMessage */ "./src/UeInstanceMessage/UeInputKeyboardMessage.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_67589__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");



/**
 * Handles the Keyboard Inputs for the document
 */
var KeyboardController = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - Data Channel Controller
     * @param suppressBrowserKeys - Suppress Browser Keys
     */
    function KeyboardController(dataChannelController, suppressBrowserKeys) {
        this.ueInputKeyBoardMessage = new _UeInstanceMessage_UeInputKeyboardMessage__WEBPACK_IMPORTED_MODULE_1__.UeInputKeyboardMessage(dataChannelController);
        this.suppressBrowserKeys = suppressBrowserKeys;
    }
    /**
     * Registers document keyboard events with the controller
     */
    KeyboardController.prototype.registerKeyBoardEvents = function () {
        var _this = this;
        document.onkeydown = function (ev) { return _this.handleOnKeyDown(ev); };
        document.onkeyup = function (ev) { return _this.handleOnKeyUp(ev); };
        //This has been deprecated as at Jun 13 2021
        document.onkeypress = function (ev) { return _this.handleOnKeyPress(ev); };
    };
    /**
     * Handles When a key is down
     * @param keyboardEvent - Keyboard event
     */
    KeyboardController.prototype.handleOnKeyDown = function (keyboardEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "handleOnKeyDown", 6);
        this.ueInputKeyBoardMessage.sendKeyDown(this.getKeycode(keyboardEvent), keyboardEvent.repeat);
        /* this needs to be tested but it is believed that this is not needed*/
        // backSpace is not considered a keypress in JavaScript but we need it
        // to be so characters may be deleted in a UE4 text entry field.
        if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.backSpace) {
            //let temp: KeyboardEvent = {charCode: SpecialKeyCodes.backSpace};
            //document.onkeypress({ charCode: SpecialKeyCodes.backSpace });
        }
        if (this.suppressBrowserKeys && this.isKeyCodeBrowserKey(keyboardEvent.keyCode)) {
            keyboardEvent.preventDefault();
        }
    };
    /**
     * handles when a key is up
     * @param keyboardEvent - Keyboard event
     */
    KeyboardController.prototype.handleOnKeyUp = function (keyboardEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "handleOnKeyUp", 6);
        this.ueInputKeyBoardMessage.sendKeyUp(this.getKeycode(keyboardEvent));
        if (this.suppressBrowserKeys && this.isKeyCodeBrowserKey(keyboardEvent.keyCode)) {
            keyboardEvent.preventDefault();
        }
    };
    /**
     * Handles when a key is press
     * @param keyboard - Keyboard Event
     */
    KeyboardController.prototype.handleOnKeyPress = function (keyboard) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "handleOnkeypress", 6);
        this.ueInputKeyBoardMessage.sendKeyPress(keyboard.charCode);
    };
    /**
     * Gets the Keycode of the Key pressed
     * @param keyboardEvent - Key board Event
     * @returns the key code of the Key
     */
    KeyboardController.prototype.getKeycode = function (keyboardEvent) {
        //Need to move this to a newer version using keyboard event location. as keyboardEvent.keycode is deprecated
        if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.shift && keyboardEvent.code === 'ShiftRight')
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.rightShift;
        else if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.control && keyboardEvent.code === 'ControlRight')
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.rightControl;
        else if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.alt && keyboardEvent.code === 'AltRight')
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.rightAlt;
        else
            return keyboardEvent.keyCode;
    };
    /**
     * Browser keys do not have a charCode so we only need to test keyCode.
     */
    KeyboardController.prototype.isKeyCodeBrowserKey = function (keyCode) {
        // Function keys or tab key.
        return keyCode >= 112 && keyCode <= 123 || keyCode === 9;
    };
    return KeyboardController;
}());

/* 5457524f4d4d */ 


/***/ }),

/***/ "./src/Inputs/MouseButtons.ts":
/*!************************************!*\
  !*** ./src/Inputs/MouseButtons.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_73122__) => {

__nested_webpack_require_73122__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_73122__.d(__webpack_exports__, {
/* harmony export */   "MouseButton": () => (/* binding */ MouseButton),
/* harmony export */   "MouseButtonsMask": () => (/* binding */ MouseButtonsMask)
/* harmony export */ });
/**
 * Mouse Button Data
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button}
 */
var MouseButton = /** @class */ (function () {
    function MouseButton() {
    }
    MouseButton.mainButton = 0; // Left button.
    MouseButton.auxiliaryButton = 1; // Wheel button.
    MouseButton.secondaryButton = 2; // Right button.
    MouseButton.fourthButton = 3; // Browser Back button.
    MouseButton.fifthButton = 4; // Browser Forward button.
    return MouseButton;
}());

/**
 * Mouse Button Mask Data
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons}
 */
var MouseButtonsMask = /** @class */ (function () {
    function MouseButtonsMask() {
    }
    MouseButtonsMask.primaryButton = 1; // Left button.
    MouseButtonsMask.secondaryButton = 2; // Right button.
    MouseButtonsMask.auxiliaryButton = 4; // Wheel button.
    MouseButtonsMask.fourthButton = 8; // Browser Back button.
    MouseButtonsMask.fifthButton = 16; // Browser Forward button.
    return MouseButtonsMask;
}());



/***/ }),

/***/ "./src/Inputs/MouseController.ts":
/*!***************************************!*\
  !*** ./src/Inputs/MouseController.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_74719__) => {

__nested_webpack_require_74719__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_74719__.d(__webpack_exports__, {
/* harmony export */   "MouseController": () => (/* binding */ MouseController)
/* harmony export */ });
/* harmony import */ var _UeInstanceMessage_UeInputMouseMessage__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_74719__(/*! ../UeInstanceMessage/UeInputMouseMessage */ "./src/UeInstanceMessage/UeInputMouseMessage.ts");
/* harmony import */ var _MouseButtons__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_74719__(/*! ./MouseButtons */ "./src/Inputs/MouseButtons.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_74719__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");



/**
 * Handles the Mouse Inputs for the document
 */
var MouseController = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - Data Channel Controller
     */
    function MouseController(dataChannelController, videoElementProvider) {
        this.unsignedOutOfRange = 65535;
        this.signedOutOfRange = 32767;
        this.printInputs = false;
        this.ueInputMouseMessage = new _UeInstanceMessage_UeInputMouseMessage__WEBPACK_IMPORTED_MODULE_0__.UeInputMouseMessage(dataChannelController);
        this.videoElementProvider = videoElementProvider;
    }
    /**
     * Handle when a mouse button is released
     * @param buttons - Mouse Button
     * @param X - Mouse pointer X coordinate
     * @param Y - Mouse pointer Y coordinate
     */
    MouseController.prototype.releaseMouseButtons = function (buttons, X, Y) {
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.primaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.secondaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.secondaryButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.auxiliaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.auxiliaryButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.fourthButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.fourthButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.fifthButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.fifthButton, X, Y);
        }
    };
    /**
     * Handle when a mouse button is pressed
     * @param buttons - Mouse Button
     * @param X - Mouse pointer X coordinate
     * @param Y - Mouse pointer Y coordinate
     */
    MouseController.prototype.pressMouseButtons = function (buttons, X, Y) {
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.primaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.secondaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.secondaryButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.auxiliaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.auxiliaryButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.fourthButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.fourthButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.fifthButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.fifthButton, X, Y);
        }
    };
    /**
     * Handle when a mouse is moved
     * @param X - Mouse X Coordinate
     * @param Y - Mouse Y Coordinate
     * @param deltaX - Mouse Delta X Coordinate
     * @param deltaY - Mouse Delta Y Coordinate
     */
    MouseController.prototype.sendMouseMove = function (X, Y, deltaX, deltaY) {
        if (this.printInputs) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "x: " + X + ", y:" + Y + ", dX: " + deltaX + ", dY: " + deltaY, 7);
        }
        var mouseCord = this.normaliseAndQuantiseUnsigned(X, Y);
        var deltaCode = this.normaliseAndQuantiseSigned(deltaX, deltaY);
        this.ueInputMouseMessage.sendMouseMove(mouseCord.x, mouseCord.y, deltaCode.x, deltaCode.y);
    };
    /**
     * Handles when a mouse button is pressed down
     * @param button - Mouse Button Pressed
     * @param X  - Mouse X Coordinate
     * @param Y  - Mouse Y Coordinate
     */
    MouseController.prototype.sendMouseDown = function (button, X, Y) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "mouse button " + button + " down at (" + X + ", " + Y + ")", 6);
        var coord = this.normaliseAndQuantiseUnsigned(X, Y);
        this.ueInputMouseMessage.sendMouseDown(button, coord.x, coord.y);
    };
    /**
     * Handles when a mouse button is pressed up
     * @param button - Mouse Button Pressed
     * @param X  - Mouse X Coordinate
     * @param Y  - Mouse Y Coordinate
     */
    MouseController.prototype.sendMouseUp = function (button, X, Y) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "mouse button " + button + " up at (" + X + ", " + Y + ")", 6);
        var coord = this.normaliseAndQuantiseUnsigned(X, Y);
        this.ueInputMouseMessage.sendMouseUp(button, coord.x, coord.y);
    };
    /**
     * Handles when a mouse wheel event
     * @param deltaY - Mouse Wheel data
     * @param X  - Mouse X Coordinate
     * @param Y  - Mouse Y Coordinate
     */
    MouseController.prototype.sendMouseWheel = function (deltaY, X, Y) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "mouse wheel with delta " + deltaY + " at (" + X + ", " + Y + ")", 6);
        var coord = this.normaliseAndQuantiseUnsigned(X, Y);
        this.ueInputMouseMessage.sendMouseWheel(deltaY, coord.x, coord.y);
    };
    /**
     * Handles mouse enter
     */
    MouseController.prototype.sendMouseEnter = function () {
        this.ueInputMouseMessage.sendMouseEnter();
    };
    /**
     * Handles mouse Leave
     */
    MouseController.prototype.sendMouseLeave = function () {
        this.ueInputMouseMessage.sendMouseLeave();
    };
    /**
     * Normalises and Quantised the Mouse Coordinates
     * @param x - Mouse X Coordinate
     * @param y - Mouse Y Coordinate
     * @returns - Normalize And Quantize Unsigned Data Type
     */
    MouseController.prototype.normaliseAndQuantiseUnsigned = function (x, y) {
        var rootDiv = this.videoElementProvider.getVideoParentElement();
        var videoElement = this.videoElementProvider.getVideoElement();
        if (rootDiv && videoElement) {
            var playerAspectRatio = rootDiv.clientHeight / rootDiv.clientWidth;
            var videoAspectRatio = videoElement.videoHeight / videoElement.videoWidth;
            // Unsigned XY positions are the ratio (0.0..1.0) along a viewport axis,
            // quantized into an uint16 (0..65536).
            // Signed XY deltas are the ratio (-1.0..1.0) along a viewport axis,
            // quantized into an int16 (-32767..32767).
            // This allows the browser viewport and client viewport to have a different
            // size.
            // Hack: Currently we set an out-of-range position to an extreme (65535)
            // as we can't yet accurately detect mouse enter and leave events
            // precisely inside a video with an aspect ratio which causes mattes.
            if (playerAspectRatio > videoAspectRatio) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio > videoAspectRatio', 6);
                var ratio = playerAspectRatio / videoAspectRatio;
                // Unsigned.
                var normalizedX = x / rootDiv.clientWidth;
                var normalizedY = ratio * (y / rootDiv.clientHeight - 0.5) + 0.5;
                if (normalizedX < 0.0 || normalizedX > 1.0 || normalizedY < 0.0 || normalizedY > 1.0) {
                    return {
                        inRange: false,
                        x: this.unsignedOutOfRange,
                        y: this.unsignedOutOfRange
                    };
                }
                else {
                    return {
                        inRange: true,
                        x: normalizedX * (this.unsignedOutOfRange + 1),
                        y: normalizedY * (this.unsignedOutOfRange + 1)
                    };
                }
            }
            else {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio', 6);
                var ratio = videoAspectRatio / playerAspectRatio;
                // Unsigned.
                var normalizedX = ratio * (x / rootDiv.clientWidth - 0.5) + 0.5;
                var normalizedY = y / rootDiv.clientHeight;
                if (normalizedX < 0.0 || normalizedX > 1.0 || normalizedY < 0.0 || normalizedY > 1.0) {
                    return {
                        inRange: false,
                        x: this.unsignedOutOfRange,
                        y: this.unsignedOutOfRange
                    };
                }
                else {
                    return {
                        inRange: true,
                        x: normalizedX * (this.unsignedOutOfRange + 1),
                        y: normalizedY * (this.unsignedOutOfRange + 1)
                    };
                }
            }
        }
    };
    /**
     * Denormalises and unquantised the Mouse Coordinates
     * @param x - Mouse X Coordinate
     * @param y - Mouse Y Coordinate
     * @returns - unquantise and Denormalize Unsigned Data Type
     */
    MouseController.prototype.unquantiseAndDenormaliseUnsigned = function (x, y) {
        var rootDiv = this.videoElementProvider.getVideoParentElement();
        var videoElement = this.videoElementProvider.getVideoElement();
        if (rootDiv && videoElement) {
            var playerAspectRatio = rootDiv.clientHeight / rootDiv.clientWidth;
            var videoAspectRatio = videoElement.videoHeight / videoElement.videoWidth;
            // Unsigned XY positions are the ratio (0.0..1.0) along a viewport axis,
            // quantized into an uint16 (0..65536).
            // Signed XY deltas are the ratio (-1.0..1.0) along a viewport axis,
            // quantized into an int16 (-32767..32767).
            // This allows the browser viewport and client viewport to have a different
            // size.
            // Hack: Currently we set an out-of-range position to an extreme (65535)
            // as we can't yet accurately detect mouse enter and leave events
            // precisely inside a video with an aspect ratio which causes mattes.
            if (playerAspectRatio > videoAspectRatio) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio > videoAspectRatio', 6);
                var ratio = playerAspectRatio / videoAspectRatio;
                // Unsigned.
                var normalizedX = x / (this.unsignedOutOfRange + 1);
                var normalizedY = (y / (this.unsignedOutOfRange + 1) - 0.5) / ratio + 0.5;
                return {
                    x: normalizedX * rootDiv.clientWidth,
                    y: normalizedY * rootDiv.clientHeight
                };
            }
            else {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio', 6);
                var ratio = videoAspectRatio / playerAspectRatio;
                // Unsigned.
                var normalizedX = (x / (this.unsignedOutOfRange + 1) - 0.5) / ratio + 0.5;
                var normalizedY = y / (this.unsignedOutOfRange + 1);
                return {
                    x: normalizedX * rootDiv.clientWidth,
                    y: normalizedY * rootDiv.clientHeight
                };
            }
        }
    };
    /**
     * Normalises and Quantised the Mouse Coordinates
     * @param x - Mouse X Coordinate
     * @param y - Mouse Y Coordinate
     * @returns - Normalize And Quantize Signed Data Type
     */
    MouseController.prototype.normaliseAndQuantiseSigned = function (x, y) {
        var rootDiv = this.videoElementProvider.getVideoParentElement();
        var videoElement = this.videoElementProvider.getVideoElement();
        if (rootDiv && videoElement) {
            var playerAspectRatio = rootDiv.clientHeight / rootDiv.clientWidth;
            var videoAspectRatio = videoElement.videoHeight / videoElement.videoWidth;
            // Unsigned XY positions are the ratio (0.0..1.0) along a viewport axis,
            // quantized into an uint16 (0..65536).
            // Signed XY deltas are the ratio (-1.0..1.0) along a viewport axis,
            // quantized into an int16 (-32767..32767).
            // This allows the browser viewport and client viewport to have a different
            // size.
            // Hack: Currently we set an out-of-range position to an extreme (65535)
            // as we can't yet accurately detect mouse enter and leave events
            // precisely inside a video with an aspect ratio which causes mattes.
            if (playerAspectRatio > videoAspectRatio) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio > videoAspectRatio', 6);
                var ratio = playerAspectRatio / videoAspectRatio;
                // Unsigned.
                var normalizedX = x / (0.5 * rootDiv.clientWidth);
                var normalizedY = (ratio * y) / (0.5 * rootDiv.clientHeight);
                return {
                    x: normalizedX * this.signedOutOfRange,
                    y: normalizedY * this.signedOutOfRange
                };
            }
            else {
                if (this.printInputs) {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio', 6);
                }
                var ratio = videoAspectRatio / playerAspectRatio;
                // Signed.
                var normalizedX = (ratio * x) / (0.5 * rootDiv.clientWidth);
                var normalizedY = y / (0.5 * rootDiv.clientHeight);
                return {
                    x: normalizedX * this.signedOutOfRange,
                    y: normalizedY * this.signedOutOfRange
                };
            }
        }
    };
    return MouseController;
}());



/***/ }),

/***/ "./src/Inputs/SpecialKeyCodes.ts":
/*!***************************************!*\
  !*** ./src/Inputs/SpecialKeyCodes.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_90740__) => {

__nested_webpack_require_90740__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_90740__.d(__webpack_exports__, {
/* harmony export */   "SpecialKeyCodes": () => (/* binding */ SpecialKeyCodes)
/* harmony export */ });
/**
 * Registers the Special Key codes
 *  Must be kept in sync with JavaScriptKeyCodeToFKey C++ array.
 * The index of the entry in the array is the special key code given below.
 */
var SpecialKeyCodes = /** @class */ (function () {
    function SpecialKeyCodes() {
    }
    SpecialKeyCodes.backSpace = 8;
    SpecialKeyCodes.shift = 16;
    SpecialKeyCodes.control = 17;
    SpecialKeyCodes.alt = 18;
    SpecialKeyCodes.rightShift = 253;
    SpecialKeyCodes.rightControl = 254;
    SpecialKeyCodes.rightAlt = 255;
    return SpecialKeyCodes;
}());



/***/ }),

/***/ "./src/Inputs/TouchController.ts":
/*!***************************************!*\
  !*** ./src/Inputs/TouchController.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_91778__) => {

__nested_webpack_require_91778__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_91778__.d(__webpack_exports__, {
/* harmony export */   "TouchController": () => (/* binding */ TouchController)
/* harmony export */ });
/* harmony import */ var _UeInstanceMessage_UeInputTouchMessage__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_91778__(/*! ../UeInstanceMessage/UeInputTouchMessage */ "./src/UeInstanceMessage/UeInputTouchMessage.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_91778__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");


/**
 * Handles the Touch input Events
 */
var TouchController = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - the data channel controller
     * @param playerElement - the player element DOM
     */
    function TouchController(dataChannelController, playerElement, videoElementProvider) {
        var _this = this;
        this.ueInputTouchMessage = new _UeInstanceMessage_UeInputTouchMessage__WEBPACK_IMPORTED_MODULE_0__.UeInputTouchMessage(dataChannelController, videoElementProvider);
        this.playerElement = playerElement;
        this.playerElement.ontouchstart = function (ev) { return _this.onTouchStart(ev); };
        this.playerElement.ontouchend = function (ev) { return _this.onTouchEnd(ev); };
        this.playerElement.ontouchmove = function (ev) { return _this.onTouchMove(ev); };
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "Touch Events Registered", 6);
    }
    /**
     * When a touch event starts
     * @param event - the touch event being intercepted
     */
    TouchController.prototype.onTouchStart = function (touchEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "on Touch Start", 6);
        for (var i = 0; i < touchEvent.changedTouches.length; i++) {
            var touch = touchEvent.changedTouches[i];
            var finger = this.ueInputTouchMessage.fingers.pop();
            if (finger === undefined) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "who has more then 10 fingers", 6);
            }
            this.ueInputTouchMessage.fingersIds[touch.identifier] = finger;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "touch.identifier: " + touch.identifier, 6);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "finger: " + finger, 6);
        }
        this.ueInputTouchMessage.sendTouchStart(touchEvent.changedTouches);
        touchEvent.preventDefault();
    };
    /**
     * When a touch event ends
     * @param event - the touch event being intercepted
     */
    TouchController.prototype.onTouchEnd = function (touchEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "on Touch END", 6);
        for (var i = 0; i < touchEvent.changedTouches.length; i++) {
            var touch = touchEvent.changedTouches[i];
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "on Forget Touch", 6);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "touch id: " + touch.identifier, 6);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "Fingers id Touch id: " + this.ueInputTouchMessage.fingersIds[touch.identifier], 6);
            this.ueInputTouchMessage.fingers.push(this.ueInputTouchMessage.fingersIds[touch.identifier]);
            this.ueInputTouchMessage.fingers.sort(function (a, b) { return b - a; });
            delete this.ueInputTouchMessage.fingersIds[touch.identifier];
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "touch.identifier: " + touch.identifier, 6);
        }
        this.ueInputTouchMessage.sendTouchEnd(touchEvent.changedTouches);
        touchEvent.preventDefault();
    };
    /**
     * when a moving touch event occurs
     * @param event - the touch event being intercepted
     */
    TouchController.prototype.onTouchMove = function (touchEvent) {
        for (var i = 0; i < touchEvent.touches.length; i++) {
            var touch = touchEvent.touches[i];
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "X: " + touch.clientX + " Y: " + touch.clientY, 6);
        }
        this.ueInputTouchMessage.sendTouchMove(touchEvent.touches);
        touchEvent.preventDefault();
    };
    return TouchController;
}());



/***/ }),

/***/ "./src/Logger/Logger.ts":
/*!******************************!*\
  !*** ./src/Logger/Logger.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_97082__) => {

__nested_webpack_require_97082__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_97082__.d(__webpack_exports__, {
/* harmony export */   "Logger": () => (/* binding */ Logger)
/* harmony export */ });
var Logger = /** @class */ (function () {
    function Logger() {
    }
    /**
     * Captures the stack and returns it
     * @returns the current stack
     */
    Logger.GetStackTrace = function () {
        var error = new Error();
        var formattedStack = "No Stack Available for this browser";
        // format the error
        if (error.stack) {
            formattedStack = error.stack.toString().replace(/Error/g, '');
        }
        return formattedStack;
    };
    ;
    /**
     * Set the log verbosity level
     */
    Logger.SetLoggerVerbosity = function (verboseLogLevel) {
        if (this.verboseLogLevel != null) {
            this.verboseLogLevel = verboseLogLevel;
        }
    };
    /**
     * The standard logging output
     * @param stack - the stack trace
     * @param message - the message to be logged
     * @param verbosity - the verbosity level
     */
    Logger.Log = function (stack, message, verbosity) {
        if (verbosity > this.verboseLogLevel) {
            return;
        }
        var returnString = "Level: Log, Caller: " + stack + ", Msg: " + message;
        console.log(returnString);
    };
    /**
     * The standard logging output
     * @param stack - the stack trace
     * @param message - the message to be logged
     * @param verbosity - the verbosity level
     */
    Logger.Info = function (stack, message, verbosity) {
        if (verbosity > this.verboseLogLevel) {
            return;
        }
        var returnString = "Level: Info, Msg: " + message;
        console.info(returnString);
    };
    /**
     * The standard logging output
     * @param stack - the stack trace
     * @param message - the message to be logged
     */
    Logger.Error = function (stack, message) {
        var returnString = "Level: Error, Caller: " + stack + ", Msg: " + message;
        console.error(returnString);
    };
    Logger.verboseLogLevel = 5;
    return Logger;
}());



/***/ }),

/***/ "./src/MicPlayer/MicController.ts":
/*!****************************************!*\
  !*** ./src/MicPlayer/MicController.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_99498__) => {

__nested_webpack_require_99498__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_99498__.d(__webpack_exports__, {
/* harmony export */   "MicController": () => (/* binding */ MicController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_99498__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");

var MicController = /** @class */ (function () {
    function MicController(urlParams) {
        // get the mic status from the url 
        this.useMic = urlParams.has('useMic');
        if (this.useMic) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Microphone access is enabled IT IS EXPERIMENTAL AND IS NOT PROPERLY SUPPORTED ACROSS UE. IF IT DOES NOT WORK ITS YOUR OWN FAULT! YOU HAVE BEEN TOLD.");
        }
        // if (!this.useMic) {
        //     Logger.Log(Logger.GetStackTrace(), "Microphone access is not enabled. Pass ?useMic in the url to enable it.");
        // }
        // check if the connection is not local and is https or mic will not work 
        this.isLocalhostConnection = location.hostname === "localhost" || location.hostname === "127.0.0.1";
        this.isHttpsConnection = location.protocol === 'https:';
        if (this.useMic && !this.isLocalhostConnection && !this.isHttpsConnection) {
            this.useMic = false;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Microphone access in the browser will not work if you are not on HTTPS or localhost. Disabling mic access.");
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "For testing you can enable HTTP microphone access Chrome by visiting chrome://flags/ and enabling 'unsafely-treat-insecure-origin-as-secure'");
        }
    }
    return MicController;
}());



/***/ }),

/***/ "./src/PeerConnectionController/AggregatedStats.ts":
/*!*********************************************************!*\
  !*** ./src/PeerConnectionController/AggregatedStats.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_101823__) => {

__nested_webpack_require_101823__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_101823__.d(__webpack_exports__, {
/* harmony export */   "AggregatedStats": () => (/* binding */ AggregatedStats)
/* harmony export */ });
/* harmony import */ var _InboundAudioStats__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_101823__(/*! ./InboundAudioStats */ "./src/PeerConnectionController/InboundAudioStats.ts");
/* harmony import */ var _InboundVideoStats__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_101823__(/*! ./InboundVideoStats */ "./src/PeerConnectionController/InboundVideoStats.ts");
/* harmony import */ var _DataChannelStats__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_101823__(/*! ./DataChannelStats */ "./src/PeerConnectionController/DataChannelStats.ts");
/* harmony import */ var _CandidateStat__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_101823__(/*! ./CandidateStat */ "./src/PeerConnectionController/CandidateStat.ts");
/* harmony import */ var _CandidatePairStats__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_101823__(/*! ./CandidatePairStats */ "./src/PeerConnectionController/CandidatePairStats.ts");
/* harmony import */ var _OutBoundVideoStats__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_101823__(/*! ./OutBoundVideoStats */ "./src/PeerConnectionController/OutBoundVideoStats.ts");
/* harmony import */ var _StreamStats__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_101823__(/*! ./StreamStats */ "./src/PeerConnectionController/StreamStats.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_101823__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};








var AggregatedStats = /** @class */ (function () {
    function AggregatedStats() {
        this.inboundVideoStats = new _InboundVideoStats__WEBPACK_IMPORTED_MODULE_1__.inboundVideoStats();
        this.inboundAudioStats = new _InboundAudioStats__WEBPACK_IMPORTED_MODULE_0__.inboundAudioStats();
        this.candidatePair = new _CandidatePairStats__WEBPACK_IMPORTED_MODULE_4__.CandidatePairStats();
        this.dataChannelStats = new _DataChannelStats__WEBPACK_IMPORTED_MODULE_2__.dataChannelStats();
        this.outBoundVideoStats = new _OutBoundVideoStats__WEBPACK_IMPORTED_MODULE_5__.OutBoundVideoStats();
        this.streamStats = new _StreamStats__WEBPACK_IMPORTED_MODULE_6__.StreamStats();
    }
    /**
     * Gather all the information from the RTC Peer Connection Report
     * @param rtcStatsReport - RTC Stats Report
     */
    AggregatedStats.prototype.processStats = function (rtcStatsReport) {
        var _this = this;
        this.localCandidates = new Array();
        this.remoteCandidates = new Array();
        rtcStatsReport.forEach(function (stat) {
            var type = stat.type;
            switch (type) {
                case "candidate-pair":
                    _this.handleCandidatePair(stat);
                    break;
                case "certificate":
                    break;
                case "codec":
                    break;
                case "csrc":
                    break;
                case "data-channel":
                    _this.handleDataChannel(stat);
                    break;
                case "inbound-rtp":
                    _this.handleInBoundRTP(stat);
                    break;
                case "local-candidate":
                    _this.handleLocalCandidate(stat);
                    break;
                case "media-source":
                    break;
                case "outbound-rtp":
                    break;
                case "peer-connection":
                    break;
                case "remote-candidate":
                    _this.handleRemoteCandidate(stat);
                    break;
                case "remote-inbound-rtp":
                    break;
                case "remote-outbound-rtp":
                    _this.handleRemoteOutBound(stat);
                    break;
                case "track":
                    _this.handleTrack(stat);
                    break;
                case "transport":
                    break;
                case "stream":
                    _this.handleStream(stat);
                    break;
                default:
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_7__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_7__.Logger.GetStackTrace(), "unhandled Stat Type");
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_7__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_7__.Logger.GetStackTrace(), stat);
                    break;
            }
        });
    };
    /**
     * Process stream stats data from webrtc
     *
     * @param stat the stats coming in from webrtc
     */
    AggregatedStats.prototype.handleStream = function (stat) {
        this.streamStats = stat;
    };
    /**
     * Process the Ice Candidate Pair Data
     */
    AggregatedStats.prototype.handleCandidatePair = function (stat) {
        this.candidatePair.bytesReceived = stat.bytesReceived;
        this.candidatePair.bytesSent = stat.bytesSent;
        this.candidatePair.localCandidateId = stat.localCandidateId;
        this.candidatePair.remoteCandidateId = stat.remoteCandidateId;
        this.candidatePair.nominated = stat.nominated;
        this.candidatePair.readable = stat.readable;
        this.candidatePair.selected = stat.selected;
        this.candidatePair.writable = stat.writable;
        this.candidatePair.state = stat.state;
        this.candidatePair.currentRoundTripTime = stat.currentRoundTripTime;
    };
    /**
     * Process the Data Channel Data
     */
    AggregatedStats.prototype.handleDataChannel = function (stat) {
        this.dataChannelStats.bytesReceived = stat.dataytesReceived;
        this.dataChannelStats.bytesSent = stat.bytesSent;
        this.dataChannelStats.dataChannelIdentifier = stat.dataChannelIdentifier;
        this.dataChannelStats.id = stat.id;
        this.dataChannelStats.label = stat.label;
        this.dataChannelStats.messagesReceived = stat.messagesReceived;
        this.dataChannelStats.messagesSent = stat.messagesSent;
        this.dataChannelStats.protocol = stat.protocol;
        this.dataChannelStats.state = stat.state;
        this.dataChannelStats.timestamp = stat.timestamp;
    };
    /**
     * Process the Local Ice Candidate Data
     */
    AggregatedStats.prototype.handleLocalCandidate = function (stat) {
        var localCandidate = new _CandidateStat__WEBPACK_IMPORTED_MODULE_3__.CandidateStat();
        localCandidate.label = "local-candidate";
        localCandidate.address = stat.address;
        localCandidate.port = stat.port;
        localCandidate.protocol = stat.protocol;
        localCandidate.candidateType = stat.candidateType;
        localCandidate.id = stat.id;
        this.localCandidates.push(localCandidate);
    };
    /**
     * Process the Remote Ice Candidate Data
     */
    AggregatedStats.prototype.handleRemoteCandidate = function (stat) {
        var RemoteCandidate = new _CandidateStat__WEBPACK_IMPORTED_MODULE_3__.CandidateStat();
        RemoteCandidate.label = "local-candidate";
        RemoteCandidate.address = stat.address;
        RemoteCandidate.port = stat.port;
        RemoteCandidate.protocol = stat.protocol;
        RemoteCandidate.id = stat.id;
        RemoteCandidate.candidateType = stat.candidateType;
        this.remoteCandidates.push(RemoteCandidate);
    };
    /**
     * Process the Inbound RTP Audio and Video Data
     */
    AggregatedStats.prototype.handleInBoundRTP = function (stat) {
        switch (stat.kind) {
            case "video":
                this.inboundVideoStats.timestamp = stat.timestamp;
                this.inboundVideoStats.bytesReceived = stat.bytesReceived;
                this.inboundVideoStats.framesDecoded = stat.framesDecoded;
                this.inboundVideoStats.packetsLost = stat.packetsLost;
                this.inboundVideoStats.jitter = stat.jitter;
                this.inboundVideoStats.bytesReceivedStart = (this.inboundVideoStats.bytesReceivedStart == null) ? stat.bytesReceived : this.inboundVideoStats.bytesReceivedStart;
                this.inboundVideoStats.framesDecodedStart = (this.inboundVideoStats.framesDecodedStart == null) ? stat.framesDecoded : this.inboundVideoStats.framesDecodedStart;
                this.inboundVideoStats.timestampStart = (this.inboundVideoStats.timestampStart == null) ? stat.timestamp : this.inboundVideoStats.timestampStart;
                this.inboundVideoStats.framesDecodedStart = (this.inboundVideoStats.framesDecodedStart == null) ? stat.framesDecoded : this.inboundVideoStats.framesDecodedStart;
                if (this.lastVideoStats != undefined) {
                    this.inboundVideoStats.bitrate = 8 * (stat.bytesReceived - this.lastVideoStats.bytesReceived) / (stat.timestamp - this.lastVideoStats.timestamp);
                    this.inboundVideoStats.bitrate = Math.floor(this.inboundVideoStats.bitrate);
                    this.inboundVideoStats.lowBitrate = (this.inboundVideoStats.lowBitrate == undefined || Number.isNaN(this.inboundVideoStats.lowBitrate)) ? this.inboundVideoStats.bitrate : this.inboundVideoStats.lowBitrate;
                    this.inboundVideoStats.lowBitrate = (this.inboundVideoStats.bitrate < this.inboundVideoStats.lowBitrate || Number.isNaN(this.inboundVideoStats.lowBitrate)) ? this.inboundVideoStats.bitrate : this.inboundVideoStats.lowBitrate;
                    this.inboundVideoStats.highBitrate = (this.inboundVideoStats.highBitrate == undefined || Number.isNaN(this.inboundVideoStats.highBitrate)) ? this.inboundVideoStats.bitrate : this.inboundVideoStats.highBitrate;
                    this.inboundVideoStats.highBitrate = (this.inboundVideoStats.bitrate > this.inboundVideoStats.highBitrate) ? this.inboundVideoStats.bitrate : this.inboundVideoStats.highBitrate;
                    this.inboundVideoStats.avgBitrate = 8 * (this.inboundVideoStats.bytesReceived - this.lastVideoStats.bytesReceived) / (this.inboundVideoStats.timestamp - this.lastVideoStats.timestamp);
                    this.inboundVideoStats.avgBitrate = Math.floor(this.inboundVideoStats.avgBitrate);
                    this.inboundVideoStats.framerate = (this.inboundVideoStats.framesDecoded - this.lastVideoStats.framesDecoded) / ((this.inboundVideoStats.timestamp - this.lastVideoStats.timestamp) / 1000);
                    this.inboundVideoStats.framerate = Math.floor(this.inboundVideoStats.framerate);
                    this.inboundVideoStats.lowFramerate = (this.inboundVideoStats.lowFramerate == undefined || Number.isNaN(this.inboundVideoStats.lowFramerate)) ? this.inboundVideoStats.framerate : this.inboundVideoStats.lowFramerate;
                    this.inboundVideoStats.lowFramerate = (this.inboundVideoStats.framerate < this.inboundVideoStats.lowFramerate) ? this.inboundVideoStats.framerate : this.inboundVideoStats.lowFramerate;
                    this.inboundVideoStats.highFramerate = (this.inboundVideoStats.highFramerate == undefined || Number.isNaN(this.inboundVideoStats.highFramerate)) ? this.inboundVideoStats.framerate : this.inboundVideoStats.highFramerate;
                    this.inboundVideoStats.highFramerate = (this.inboundVideoStats.framerate < this.inboundVideoStats.highFramerate) ? this.inboundVideoStats.framerate : this.inboundVideoStats.highFramerate;
                    this.inboundVideoStats.averageFrameRate = (this.inboundVideoStats.framesDecoded - this.lastVideoStats.framesDecodedStart) / ((this.inboundVideoStats.timestamp - this.lastVideoStats.timestampStart) / 1000);
                    this.inboundVideoStats.averageFrameRate = Math.floor(this.inboundVideoStats.averageFrameRate);
                }
                this.lastVideoStats = __assign({}, this.inboundVideoStats);
                break;
            case "audio":
                this.inboundAudioStats.bytesReceived = stat.bytesReceived;
                this.inboundAudioStats.jitter = stat.jitter;
                this.inboundAudioStats.packetsLost = stat.packetslost;
                this.inboundAudioStats.timestamp = stat.timestamp;
                break;
            default:
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_7__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_7__.Logger.GetStackTrace(), "Kind is not handled");
                break;
        }
    };
    /**
     * Process the outbound RTP Audio and Video Data
     */
    AggregatedStats.prototype.handleRemoteOutBound = function (stat) {
        switch (stat.kind) {
            case "video":
                this.outBoundVideoStats.bytesSent = stat.bytesSent;
                this.outBoundVideoStats.id = stat.id;
                this.outBoundVideoStats.localId = stat.localId;
                this.outBoundVideoStats.packetsSent = stat.packetsSent;
                this.outBoundVideoStats.remoteTimestamp = stat.remoteTimestamp;
                this.outBoundVideoStats.timestamp = stat.timestamp;
                break;
            case "audio":
                break;
            default:
                break;
        }
    };
    /**
     * Process the Inbound Video Track Data
     */
    AggregatedStats.prototype.handleTrack = function (stat) {
        // we only want to extract stats from the video track
        if (stat.type === 'track' && (stat.trackIdentifier === 'video_label' || stat.kind === 'video')) {
            this.inboundVideoStats.framesDropped = stat.framesDropped;
            this.inboundVideoStats.framesReceived = stat.framesReceived;
            this.inboundVideoStats.framesDroppedPercentage = stat.framesDropped / stat.framesReceived * 100;
            this.inboundVideoStats.frameHeight = stat.frameHeight;
            this.inboundVideoStats.frameWidth = stat.frameWidth;
            this.inboundVideoStats.frameHeightStart = (this.inboundVideoStats.frameHeightStart == null) ? stat.frameHeight : this.inboundVideoStats.frameHeightStart;
            this.inboundVideoStats.frameWidthStart = (this.inboundVideoStats.frameWidthStart == null) ? stat.frameWidth : this.inboundVideoStats.frameWidthStart;
        }
    };
    /**
     * Check if a value coming in from our stats is actually a number
     */
    AggregatedStats.prototype.isNumber = function (value) {
        return typeof value === 'number' && isFinite(value);
    };
    return AggregatedStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/CandidatePairStats.ts":
/*!************************************************************!*\
  !*** ./src/PeerConnectionController/CandidatePairStats.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_116917__) => {

__nested_webpack_require_116917__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_116917__.d(__webpack_exports__, {
/* harmony export */   "CandidatePairStats": () => (/* binding */ CandidatePairStats)
/* harmony export */ });
/**
 * ICE Candidate Pair Stats collected from the RTC Stats Report
 */
var CandidatePairStats = /** @class */ (function () {
    function CandidatePairStats() {
    }
    return CandidatePairStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/CandidateStat.ts":
/*!*******************************************************!*\
  !*** ./src/PeerConnectionController/CandidateStat.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_117677__) => {

__nested_webpack_require_117677__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_117677__.d(__webpack_exports__, {
/* harmony export */   "CandidateStat": () => (/* binding */ CandidateStat)
/* harmony export */ });
/**
 * ICE Candidate Stat collected from the RTC Stats Report
 */
var CandidateStat = /** @class */ (function () {
    function CandidateStat() {
    }
    return CandidateStat;
}());



/***/ }),

/***/ "./src/PeerConnectionController/DataChannelStats.ts":
/*!**********************************************************!*\
  !*** ./src/PeerConnectionController/DataChannelStats.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_118418__) => {

__nested_webpack_require_118418__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_118418__.d(__webpack_exports__, {
/* harmony export */   "dataChannelStats": () => (/* binding */ dataChannelStats)
/* harmony export */ });
/**
 * Data Channel Stats collected from the RTC Stats Report
 */
var dataChannelStats = /** @class */ (function () {
    function dataChannelStats() {
    }
    return dataChannelStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/InboundAudioStats.ts":
/*!***********************************************************!*\
  !*** ./src/PeerConnectionController/InboundAudioStats.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_119178__) => {

__nested_webpack_require_119178__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_119178__.d(__webpack_exports__, {
/* harmony export */   "inboundAudioStats": () => (/* binding */ inboundAudioStats)
/* harmony export */ });
/**
 * Inbound Audio Stats collected from the RTC Stats Report
 */
var inboundAudioStats = /** @class */ (function () {
    function inboundAudioStats() {
    }
    return inboundAudioStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/InboundVideoStats.ts":
/*!***********************************************************!*\
  !*** ./src/PeerConnectionController/InboundVideoStats.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_119944__) => {

__nested_webpack_require_119944__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_119944__.d(__webpack_exports__, {
/* harmony export */   "inboundVideoStats": () => (/* binding */ inboundVideoStats)
/* harmony export */ });
/**
 * Inbound Video Stats collected from the RTC Stats Report
 */
var inboundVideoStats = /** @class */ (function () {
    function inboundVideoStats() {
        this.receiveToCompositeMs = 0;
        this.timestamp = 0;
        this.bytesReceived = 0;
        this.framesDecoded = 0;
        this.packetsLost = 0;
        this.bytesReceivedStart = 0;
        this.framesDecodedStart = 0;
        this.timestampStart = 0;
        this.bitrate = 0;
        this.lowBitrate = 0;
        this.highBitrate = 0;
        this.avgBitrate = 0;
        this.framerate = 0;
        this.lowFramerate = 0;
        this.highFramerate = 0;
        this.averageFrameRate = 0;
        this.framesDropped = 0;
        this.framesReceived = 0;
        this.framesDroppedPercentage = 0;
        this.frameHeight = 0;
        this.frameWidth = 0;
        this.frameHeightStart = 0;
        this.frameWidthStart = 0;
        this.jitter = 0;
    }
    return inboundVideoStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/OutBoundVideoStats.ts":
/*!************************************************************!*\
  !*** ./src/PeerConnectionController/OutBoundVideoStats.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_121482__) => {

__nested_webpack_require_121482__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_121482__.d(__webpack_exports__, {
/* harmony export */   "OutBoundVideoStats": () => (/* binding */ OutBoundVideoStats)
/* harmony export */ });
/**
 * Outbound Video Stats collected from the RTC Stats Report
 */
var OutBoundVideoStats = /** @class */ (function () {
    function OutBoundVideoStats() {
    }
    return OutBoundVideoStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/PeerConnectionController.ts":
/*!******************************************************************!*\
  !*** ./src/PeerConnectionController/PeerConnectionController.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_122282__) => {

__nested_webpack_require_122282__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_122282__.d(__webpack_exports__, {
/* harmony export */   "PeerConnectionController": () => (/* binding */ PeerConnectionController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_122282__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _AggregatedStats__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_122282__(/*! ./AggregatedStats */ "./src/PeerConnectionController/AggregatedStats.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


/**
 * Handles the Peer Connection
 */
var PeerConnectionController = /** @class */ (function () {
    /**
     * Create a new RTC Peer Connection client
     * @param options - Peer connection Options
     */
    function PeerConnectionController(options, turnState) {
        var _this = this;
        // Set the turn state to true or false for rtc options
        this.forceTurn = turnState;
        if (this.forceTurn === true) {
            options.iceTransportPolicy = "relay";
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Forcing TURN usage by setting ICE Transport Policy in peer connection config.");
        }
        // build a new peer connection with the options
        this.peerConnection = new RTCPeerConnection(options);
        this.peerConnection.onsignalingstatechange = function (ev) { return _this.handleSignalStateChange(ev); };
        this.peerConnection.oniceconnectionstatechange = function (ev) { return _this.handleIceConnectionStateChange(ev); };
        this.peerConnection.onicegatheringstatechange = function (ev) { return _this.handleIceGatheringStateChange(ev); };
        this.peerConnection.ontrack = function (ev) { return _this.handleOnTrack(ev); };
        this.peerConnection.onicecandidate = function (ev) { return _this.handelIceCandidate(ev); };
        this.aggregatedStats = new _AggregatedStats__WEBPACK_IMPORTED_MODULE_1__.AggregatedStats();
    }
    /**
     * Create an offer for the Web RTC handshake and send the offer to the signaling server via websocket
     * @param offerOptions - RTC Offer Options
     */
    PeerConnectionController.prototype.createOffer = function (offerOptions, useMic) {
        var _this = this;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Create Offer", 6);
        this.setupTracksToSendAsync(useMic).finally(function () { });
        this.peerConnection.createOffer(offerOptions).then(function (offer) {
            _this.showTextOverlayConnecting();
            offer.sdp = _this.mungeOffer(offer.sdp, useMic);
            _this.peerConnection.setLocalDescription(offer);
            _this.onSendWebRTCOffer(offer);
        }).catch(function (onRejectedReason) {
            _this.showTextOverlaySetupFailure();
        });
    };
    /**
     * Generate Aggregated Stats and then fire a onVideo Stats event
     */
    PeerConnectionController.prototype.generateStats = function () {
        var _this = this;
        this.peerConnection.getStats(null).then(function (StatsData) {
            _this.aggregatedStats.processStats(StatsData);
            _this.onVideoStats(_this.aggregatedStats);
        });
    };
    /**
     * Close The Peer Connection
     */
    PeerConnectionController.prototype.close = function () {
        if (this.peerConnection) {
            this.peerConnection.close();
            this.peerConnection = null;
        }
    };
    /**
     * Modify the Session Descriptor
     * @param sdp - Session Descriptor as a string
     * @param useMic - Is the microphone in use
     * @returns A modified Session Descriptor
     */
    PeerConnectionController.prototype.mungeOffer = function (sdp, useMic) {
        var temp = sdp;
        temp.replace(/(a=fmtp:\d+ .*level-asymmetry-allowed=.*)\r\n/gm, "$1;x-google-start-bitrate=10000;x-google-max-bitrate=100000\r\n");
        temp.replace('useinbandfec=1', 'useinbandfec=1;stereo=1;sprop-maxcapturerate=48000');
        // Increase the capture rate of audio so we can have higher quality audio over mic
        if (useMic) {
            temp = temp.replace('useinbandfec=1', 'useinbandfec=1;sprop-maxcapturerate=48000;maxaveragebitrate=510000');
        }
        return temp;
    };
    /**
     * Set the Remote Descriptor from the signaling server to the RTC Peer Connection
     * @param sdpAnswer - RTC Session Descriptor from the Signaling Server
     */
    PeerConnectionController.prototype.handleAnswer = function (sdpAnswer) {
        this.peerConnection.setRemoteDescription(sdpAnswer);
    };
    /**
     * When a Ice Candidate is received add to the RTC Peer Connection
     * @param iceCandidate - RTC Ice Candidate from the Signaling Server
     */
    PeerConnectionController.prototype.handleOnIce = function (iceCandidate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "peerconnection handleOnIce", 6);
        // // if forcing TURN, reject any candidates not relay
        if (this.forceTurn) {
            // check if no relay address is found, if so, we are assuming it means no TURN server
            if (iceCandidate.candidate.indexOf("relay") < 0) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Dropping candidate because it was not TURN relay. | Type= " + iceCandidate.type + " | Protocol= " + iceCandidate.protocol + " | Address=" + iceCandidate.address + " | Port=" + iceCandidate.port + " |", 6);
                return;
            }
        }
        this.peerConnection.addIceCandidate(iceCandidate);
    };
    /**
     * When the RTC Peer Connection Signaling server state Changes
     * @param state - Signaling Server State Change Event
     */
    PeerConnectionController.prototype.handleSignalStateChange = function (state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'signaling state change: ' + state, 6);
    };
    /**
     * Handle when the Ice Connection State Changes
     * @param state - Ice Connection State
     */
    PeerConnectionController.prototype.handleIceConnectionStateChange = function (state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'ice connection state change: ' + state, 6);
    };
    /**
     * Handle when the Ice Gathering State Changes
     * @param state - Ice Gathering State Change
     */
    PeerConnectionController.prototype.handleIceGatheringStateChange = function (state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'ice gathering state change: ' + JSON.stringify(state), 6);
    };
    /**
     * Activates the onTrack method
     * @param event - The webRtc track event
     */
    PeerConnectionController.prototype.handleOnTrack = function (event) {
        this.onTrack(event);
    };
    /**
     * Activates the onPeerIceCandidate
     * @param event - The peer ice candidate
     */
    PeerConnectionController.prototype.handelIceCandidate = function (event) {
        this.onPeerIceCandidate(event);
    };
    /**
     * An override method for onTrack for use outside of the PeerConnectionController
     * @param trackEvent - The webRtc track event
     */
    PeerConnectionController.prototype.onTrack = function (trackEvent) { };
    /**
     * An override method for onPeerIceCandidate for use outside of the PeerConnectionController
     * @param peerConnectionIceEvent - The peer ice candidate
     */
    PeerConnectionController.prototype.onPeerIceCandidate = function (peerConnectionIceEvent) { };
    /**
     * Setup tracks on the RTC Peer Connection
     */
    PeerConnectionController.prototype.setupTracksToSendAsync = function (useMic) {
        return __awaiter(this, void 0, void 0, function () {
            var hasTransceivers, audioOptions, mediaSendOptions, stream, _i, _a, transceiver, _b, _c, track, _d, _e, track;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        hasTransceivers = this.peerConnection.getTransceivers().length > 0;
                        // Setup a transceiver for getting UE video
                        this.peerConnection.addTransceiver("video", { direction: "recvonly" });
                        if (!!useMic) return [3 /*break*/, 1];
                        this.peerConnection.addTransceiver("audio", { direction: "recvonly" });
                        return [3 /*break*/, 3];
                    case 1:
                        audioOptions = useMic ?
                            {
                                autoGainControl: false,
                                channelCount: 1,
                                echoCancellation: false,
                                latency: 0,
                                noiseSuppression: false,
                                sampleRate: 48000,
                                sampleSize: 16,
                                volume: 1.0
                            } : false;
                        mediaSendOptions = {
                            video: false,
                            audio: audioOptions,
                        };
                        return [4 /*yield*/, navigator.mediaDevices.getUserMedia(mediaSendOptions)];
                    case 2:
                        stream = _f.sent();
                        if (stream) {
                            if (hasTransceivers) {
                                for (_i = 0, _a = this.peerConnection.getTransceivers(); _i < _a.length; _i++) {
                                    transceiver = _a[_i];
                                    if (transceiver && transceiver.receiver && transceiver.receiver.track && transceiver.receiver.track.kind === "audio") {
                                        for (_b = 0, _c = stream.getTracks(); _b < _c.length; _b++) {
                                            track = _c[_b];
                                            if (track.kind && track.kind == "audio") {
                                                transceiver.sender.replaceTrack(track);
                                                transceiver.direction = "sendrecv";
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                for (_d = 0, _e = stream.getTracks(); _d < _e.length; _d++) {
                                    track = _e[_d];
                                    if (track.kind && track.kind == "audio") {
                                        this.peerConnection.addTransceiver(track, { direction: "sendrecv" });
                                    }
                                }
                            }
                        }
                        else {
                            this.peerConnection.addTransceiver("audio", { direction: "recvonly" });
                        }
                        _f.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * And override event for when the video stats are fired
     * @param event - Aggregated Stats
     */
    PeerConnectionController.prototype.onVideoStats = function (event) { };
    /**
     * Event to send the RTC offer to the Signaling server
     * @param offer - RTC Offer
     */
    PeerConnectionController.prototype.onSendWebRTCOffer = function (offer) { };
    /**
     * An override for showing the Peer connection connecting Overlay
     */
    PeerConnectionController.prototype.showTextOverlayConnecting = function () { };
    /**
     * An override for showing the Peer connection Failed overlay
     */
    PeerConnectionController.prototype.showTextOverlaySetupFailure = function () { };
    return PeerConnectionController;
}());



/***/ }),

/***/ "./src/PeerConnectionController/StreamStats.ts":
/*!*****************************************************!*\
  !*** ./src/PeerConnectionController/StreamStats.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_137431__) => {

__nested_webpack_require_137431__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_137431__.d(__webpack_exports__, {
/* harmony export */   "StreamStats": () => (/* binding */ StreamStats)
/* harmony export */ });
/**
 * Class to hold the stream stats data coming in from webRtc
 */
var StreamStats = /** @class */ (function () {
    function StreamStats() {
    }
    return StreamStats;
}());



/***/ }),

/***/ "./src/UeInstanceMessage/UeControlMessage.ts":
/*!***************************************************!*\
  !*** ./src/UeInstanceMessage/UeControlMessage.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_138137__) => {

__nested_webpack_require_138137__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_138137__.d(__webpack_exports__, {
/* harmony export */   "UeControlMessage": () => (/* binding */ UeControlMessage)
/* harmony export */ });
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_138137__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
/* harmony import */ var _UeDescriptor__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_138137__(/*! ./UeDescriptor */ "./src/UeInstanceMessage/UeDescriptor.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles Sending control messages to the UE Instance
 */
var UeControlMessage = /** @class */ (function (_super) {
    __extends(UeControlMessage, _super);
    /**
     *
     * @param dataChannelController - Data Channel Controller
     */
    function UeControlMessage(dataChannelController) {
        return _super.call(this, dataChannelController) || this;
    }
    /**
     * Send IFrame Request to the UE Instance
     */
    UeControlMessage.prototype.SendIFrameRequest = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.iFrameRequest]);
        this.sendData(payload.buffer);
    };
    /**
     * Send Request to Take Quality Control to the UE Instance
     */
    UeControlMessage.prototype.SendRequestQualityControl = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.requestQualityControl]);
        this.sendData(payload.buffer);
    };
    /**
     * Send Max FPS Request to the UE Instance
     */
    UeControlMessage.prototype.SendMaxFpsRequest = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.maxFpsRequest]);
        this.sendData(payload.buffer);
    };
    /**
     * Send Average Bitrate Request to the UE Instance
     */
    UeControlMessage.prototype.SendAverageBitrateRequest = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.averageBitrateRequest]);
        this.sendData(payload.buffer);
    };
    /**
     * Send a Start Streaming Message to the UE Instance
     */
    UeControlMessage.prototype.SendStartStreaming = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.startStreaming]);
        this.sendData(payload.buffer);
    };
    /**
     * Send a Stop Streaming Message to the UE Instance
     */
    UeControlMessage.prototype.SendStopStreaming = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.stopStreaming]);
        this.sendData(payload.buffer);
    };
    /**
     * Send a Latency Test to the UE Instance
     * @param StartTimeMs - Start Time of the Latency test
     */
    UeControlMessage.prototype.sendLatencyTest = function (StartTimeMs) {
        var payload = {
            StartTime: StartTimeMs,
        };
        this.sendDescriptor(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.latencyTest, JSON.stringify(payload));
    };
    /**
     * Send a Request Initial Settings to the UE Instance
     */
    UeControlMessage.prototype.SendRequestInitialSettings = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.requestInitialSettings]);
        this.sendData(payload.buffer);
    };
    return UeControlMessage;
}(_UeDescriptor__WEBPACK_IMPORTED_MODULE_1__.UeDescriptor));



/***/ }),

/***/ "./src/UeInstanceMessage/UeDataMessage.ts":
/*!************************************************!*\
  !*** ./src/UeInstanceMessage/UeDataMessage.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_142736__) => {

__nested_webpack_require_142736__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_142736__.d(__webpack_exports__, {
/* harmony export */   "UeDataMessage": () => (/* binding */ UeDataMessage)
/* harmony export */ });
/**
 * Handles sending a message to the UE Instance
 */
var UeDataMessage = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - Data Channel Controller
     */
    function UeDataMessage(dataChannelController) {
        this.dataChannelController = dataChannelController;
    }
    /**
     * Send an Array Buffer to the UE Instance
     * @param buffer - Message Buffer Array
     */
    UeDataMessage.prototype.sendData = function (buffer) {
        this.dataChannelController.sendData(buffer);
    };
    return UeDataMessage;
}());



/***/ }),

/***/ "./src/UeInstanceMessage/UeDescriptor.ts":
/*!***********************************************!*\
  !*** ./src/UeInstanceMessage/UeDescriptor.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_143815__) => {

__nested_webpack_require_143815__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_143815__.d(__webpack_exports__, {
/* harmony export */   "UeDescriptor": () => (/* binding */ UeDescriptor)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_143815__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_143815__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles sending a Descriptor to the UE Instance
 */
var UeDescriptor = /** @class */ (function (_super) {
    __extends(UeDescriptor, _super);
    /**
    * @param datachannelController - Data Channel Controller
    */
    function UeDescriptor(datachannelController) {
        return _super.call(this, datachannelController) || this;
    }
    /**
     * Send a Descriptor to the UE Instances
     * @param messageType - UE Message Type
     * @param JSODescriptor - Descriptor Message as JSON
     */
    UeDescriptor.prototype.sendDescriptor = function (messageType, JSODescriptor) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Sending: " + JSODescriptor, 6);
        // Add the UTF-16 JSON string to the array byte buffer, going two bytes at
        // a time.
        var data = new DataView(new ArrayBuffer(1 + 2 + 2 * JSODescriptor.length));
        var byteIdx = 0;
        data.setUint8(byteIdx, messageType);
        byteIdx++;
        data.setUint16(byteIdx, JSODescriptor.length, true);
        byteIdx += 2;
        for (var i = 0; i < JSODescriptor.length; i++) {
            data.setUint16(byteIdx, JSODescriptor.charCodeAt(i), true);
            byteIdx += 2;
        }
        this.sendData(data.buffer);
    };
    return UeDescriptor;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_1__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeDescriptorUi.ts":
/*!*************************************************!*\
  !*** ./src/UeInstanceMessage/UeDescriptorUi.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_146822__) => {

__nested_webpack_require_146822__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_146822__.d(__webpack_exports__, {
/* harmony export */   "UeDescriptorUi": () => (/* binding */ UeDescriptorUi)
/* harmony export */ });
/* harmony import */ var _UeDescriptor__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_146822__(/*! ./UeDescriptor */ "./src/UeInstanceMessage/UeDescriptor.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_146822__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles the Sending of a UI Descriptor to the UE Instance
 */
var UeDescriptorUi = /** @class */ (function (_super) {
    __extends(UeDescriptorUi, _super);
    /**
     * @param dataChannelController - Data Channel Controller
     */
    function UeDescriptorUi(dataChannelController) {
        return _super.call(this, dataChannelController) || this;
    }
    /**
     * Send a set res UI Descriptor to UE Instance
     * @param width - Width of res
     * @param height - Height of res
     */
    UeDescriptorUi.prototype.sendUpdateVideoStreamSize = function (width, height) {
        this.sendUiConsoleInteraction("r.setres " + width + "x" + height);
    };
    /**
     * Send a stat fps UI Descriptor to UE Instance
     */
    UeDescriptorUi.prototype.sendShowFps = function () {
        this.sendUiConsoleInteraction("stat fps");
    };
    /**
     * Send a Encoder Rate Control to UE Instance
     * @param rateControl - Rate Control "CBR" | "VBR" | "ConstQP"
     */
    UeDescriptorUi.prototype.sendEncoderRateControl = function (rateControl) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.RateControl " + rateControl);
    };
    /**
     * Send Encoder Target Bit Rate to the UE Instance
     * @param targetBitRate - Send a Target Bit Rate
     */
    UeDescriptorUi.prototype.sendEncoderTargetBitRate = function (targetBitRate) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.TargetBitrate " + (targetBitRate > 0 ? targetBitRate : -1));
    };
    /**
     * Send Encoder Max Bit Rate VBR to UE Instance
     * @param maxBitRate - Send A Max Bit Rate
     */
    UeDescriptorUi.prototype.sendEncoderMaxBitrateVbr = function (maxBitRate) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.MaxBitrateVBR " + (maxBitRate > 0 ? maxBitRate : 1));
    };
    /**
     * Send the Minimum Quantization Parameter to the UE Instance
     * @param minQP - Minimum Quantization Parameter
     */
    UeDescriptorUi.prototype.sendEncoderMinQP = function (minQP) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.MinQP " + minQP);
    };
    /**
     * Send the Maximum Quantization Parameter to the UE Instance
     * @param maxQP - Maximum Quantization Parameter
     */
    UeDescriptorUi.prototype.sendEncoderMaxQP = function (maxQP) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.MaxQP " + maxQP);
    };
    /**
     * Send Enable Filler Data to the UE Instance
     * @param enable - True
     */
    UeDescriptorUi.prototype.sendEncoderEnableFillerData = function (enable) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.EnableFillerData " + Number(enable).valueOf());
    };
    /**
     * Send Encoder MultiPass to UE Instance
     * @param multiPass - MultiPass "DISABLED" | "QUARTER" | "FULL"
     */
    UeDescriptorUi.prototype.sendEncoderMultiPass = function (multiPass) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.Multipass " + multiPass);
    };
    /**
     * Send a Web RTC Degradation Preference to UE Instance
     * @param DegradationPreference - Degradation Preference "BALANCED" | "MAINTAIN_FRAMERATE" | "MAINTAIN_RESOLUTION"
     */
    UeDescriptorUi.prototype.sendWebRtcDegradationPreference = function (DegradationPreference) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.DegradationPreference " + DegradationPreference);
    };
    /**
     * Sends the Max FPS to the UE Instance
     * @param MaxFps - Web RTC Max Frames Per Second
     */
    UeDescriptorUi.prototype.sendWebRtcMaxFps = function (MaxFps) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.MaxFps " + MaxFps);
    };
    /**
    * Sends the FPS to the UE Instance used un UE 5.0
    * @param Fps - Web RTC Frames Per Second
    */
    UeDescriptorUi.prototype.sendWebRtcFps = function (Fps) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.Fps " + Fps);
    };
    /**
     * Sends the Minimum bit rate to the UE Instance
     * @param MinBitrate - Web RTC Minimum Bitrate
     */
    UeDescriptorUi.prototype.sendWebRtcMinBitrate = function (MinBitrate) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.MinBitrate " + MinBitrate);
    };
    /**
     * Sends the Maximum bit rate to the UE Instance
     * @param MaxBitrate - Web RTC Maximum Bitrate
     */
    UeDescriptorUi.prototype.sendWebRtcMaxBitrate = function (MaxBitrate) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.MaxBitrate " + MaxBitrate);
    };
    /**
     * Sends the Low Quantization Parameter Threshold level to the UE Instance
     * @param LowQpThreshold - Low Quantization Parameter Threshold Level
     */
    UeDescriptorUi.prototype.sendWebRtcLowQpThreshold = function (LowQpThreshold) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.LowQpThreshold " + LowQpThreshold);
    };
    /**
     * Sends the High Quantization Parameter Threshold level to the UE Instance
     * @param HighQpThreshold - High Quantization Parameter Threshold Level
     */
    UeDescriptorUi.prototype.sendWebRtcHighQpThreshold = function (HighQpThreshold) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.HighQpThreshold " + HighQpThreshold);
    };
    /**
     * Sends a descriptor string to the UE Interaction Instance
     * @param descriptor - the String descriptor to send
     */
    UeDescriptorUi.prototype.sendUiInteraction = function (descriptor) {
        this.sendDescriptor(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.uiInteraction, descriptor);
    };
    /**
     * Sends a console descriptor
     * @param descriptor - The string descriptor to send
     */
    UeDescriptorUi.prototype.sendUiConsoleInteraction = function (descriptor) {
        var payload = {
            Console: descriptor
        };
        this.sendUiInteraction(JSON.stringify(payload));
    };
    return UeDescriptorUi;
}(_UeDescriptor__WEBPACK_IMPORTED_MODULE_0__.UeDescriptor));



/***/ }),

/***/ "./src/UeInstanceMessage/UeInputGamePadMessage.ts":
/*!********************************************************!*\
  !*** ./src/UeInstanceMessage/UeInputGamePadMessage.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_154434__) => {

__nested_webpack_require_154434__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_154434__.d(__webpack_exports__, {
/* harmony export */   "UeInputGamePadMessage": () => (/* binding */ UeInputGamePadMessage)
/* harmony export */ });
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_154434__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_154434__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * The class for handling UE Input GamePad Messages. It implements the UeDataMessage class
 */
var UeInputGamePadMessage = /** @class */ (function (_super) {
    __extends(UeInputGamePadMessage, _super);
    /**
     *
     * @param datachannelController - Data Channel Controller
     */
    function UeInputGamePadMessage(datachannelController) {
        return _super.call(this, datachannelController) || this;
    }
    /**
     * Send the controller button press data through the data channel
     * @param controllerIndex - the controller index number
     * @param buttonIndex - the button index number
     * @param isRepeat - is this a repeat press
     */
    UeInputGamePadMessage.prototype.sendControllerButtonPressed = function (controllerIndex, buttonIndex, isRepeat) {
        var Data = new DataView(new ArrayBuffer(4));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.gamepadButtonPressed);
        Data.setUint8(1, controllerIndex);
        Data.setUint8(2, buttonIndex);
        Data.setUint8(3, Number(isRepeat).valueOf());
        this.sendData(Data.buffer);
    };
    /**
     * Send the controller button release data through the data channel
     * @param controllerIndex - the controller index number
     * @param buttonIndex  - the button index number
     */
    UeInputGamePadMessage.prototype.sendControllerButtonReleased = function (controllerIndex, buttonIndex) {
        var Data = new DataView(new ArrayBuffer(3));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.gamepadButtonReleased);
        Data.setUint8(1, controllerIndex);
        Data.setUint8(2, buttonIndex);
        this.sendData(Data.buffer);
    };
    /**
     * Send controller axis data through the data channel
     * @param controllerIndex - the controller index number
     * @param axisIndex - the axis index number
     * @param analogValue - the analogue value number
     */
    UeInputGamePadMessage.prototype.sendControllerAxisMove = function (controllerIndex, axisIndex, analogValue) {
        var Data = new DataView(new ArrayBuffer(11));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.gamepadAnalog);
        Data.setUint8(1, controllerIndex);
        Data.setUint8(2, axisIndex);
        Data.setFloat64(3, analogValue, true);
        this.sendData(Data.buffer);
    };
    return UeInputGamePadMessage;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_0__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeInputKeyboardMessage.ts":
/*!*********************************************************!*\
  !*** ./src/UeInstanceMessage/UeInputKeyboardMessage.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_158593__) => {

__nested_webpack_require_158593__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_158593__.d(__webpack_exports__, {
/* harmony export */   "UeInputKeyboardMessage": () => (/* binding */ UeInputKeyboardMessage)
/* harmony export */ });
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_158593__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_158593__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles sending Keyboard Messages to the UE Instance
 */
var UeInputKeyboardMessage = /** @class */ (function (_super) {
    __extends(UeInputKeyboardMessage, _super);
    /**
     *
     * @param datachannelController - Data Channel Controller
     */
    function UeInputKeyboardMessage(datachannelController) {
        return _super.call(this, datachannelController) || this;
    }
    /**
     * Sends the key down to the UE Instance
     * @param keyCode - Key code
     * @param isRepeat - Is the key repeating
     */
    UeInputKeyboardMessage.prototype.sendKeyDown = function (keyCode, isRepeat) {
        var Payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.keyDown, keyCode, Number(isRepeat).valueOf()]);
        this.sendData(Payload.buffer);
    };
    /**
     * Sends the Key Up to the UE Instance
     * @param keyCode - Key code
     */
    UeInputKeyboardMessage.prototype.sendKeyUp = function (keyCode) {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.keyUp, keyCode]);
        this.sendData(payload.buffer);
    };
    /**
     * Sends the key press to the UE Instance
     * @param CharCode - character code of a key pressed
     */
    UeInputKeyboardMessage.prototype.sendKeyPress = function (CharCode) {
        var data = new DataView(new ArrayBuffer(3));
        data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.keyPress);
        data.setUint16(1, CharCode, true);
        this.sendData(data.buffer);
    };
    return UeInputKeyboardMessage;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_0__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeInputMouseMessage.ts":
/*!******************************************************!*\
  !*** ./src/UeInstanceMessage/UeInputMouseMessage.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_161901__) => {

__nested_webpack_require_161901__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_161901__.d(__webpack_exports__, {
/* harmony export */   "UeInputMouseMessage": () => (/* binding */ UeInputMouseMessage)
/* harmony export */ });
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_161901__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_161901__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles sending Mouse Messages to the UE Instance
 */
var UeInputMouseMessage = /** @class */ (function (_super) {
    __extends(UeInputMouseMessage, _super);
    /**
    * @param datachannelController - Data channel Controller
    */
    function UeInputMouseMessage(datachannelController) {
        return _super.call(this, datachannelController) || this;
    }
    /**
     * Send Mouse Enter to the UE Instance
     */
    UeInputMouseMessage.prototype.sendMouseEnter = function () {
        var Data = new DataView(new ArrayBuffer(1));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseEnter);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse Leave to the UE Instance
     */
    UeInputMouseMessage.prototype.sendMouseLeave = function () {
        var Data = new DataView(new ArrayBuffer(1));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseLeave);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse Down to the UE Instance
     * @param button - Mouse Button
     * @param X - X Coordinate Value of mouse
     * @param Y - Y Coordinate Value of mouse
     */
    UeInputMouseMessage.prototype.sendMouseDown = function (button, X, Y) {
        var Data = new DataView(new ArrayBuffer(6));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseDown);
        Data.setUint8(1, button);
        Data.setUint16(2, X, true);
        Data.setUint16(4, Y, true);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse Up to the UE Instance
     * @param button - Mouse Button
     * @param X - X Coordinate Value of mouse
     * @param Y - Y Coordinate Value of mouse
     */
    UeInputMouseMessage.prototype.sendMouseUp = function (button, X, Y) {
        var Data = new DataView(new ArrayBuffer(6));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseUp);
        Data.setUint8(1, button);
        Data.setUint16(2, X, true);
        Data.setUint16(4, Y, true);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse Move to the UE Instance
     * @param mouseCordX - X Mouse Coordinate
     * @param mouseCordY - Y Mouse Coordinate
     * @param deltaX - X Mouse Delta Coordinate
     * @param deltaY - Y Mouse Delta Coordinate
     */
    UeInputMouseMessage.prototype.sendMouseMove = function (mouseCordX, mouseCordY, deltaX, deltaY) {
        var Data = new DataView(new ArrayBuffer(9));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseMove);
        Data.setUint16(1, mouseCordX, true);
        Data.setUint16(3, mouseCordY, true);
        Data.setInt16(5, deltaX, true);
        Data.setInt16(7, deltaY, true);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse wheel event to the UE Instance
     * @param deltaY - Mouse Wheel delta Y
     * @param X - Mouse X Coordinate
     * @param Y - Mouse Y Coordinate
     */
    UeInputMouseMessage.prototype.sendMouseWheel = function (deltaY, X, Y) {
        var Data = new DataView(new ArrayBuffer(7));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseWheel);
        Data.setInt16(1, deltaY, true);
        Data.setUint16(3, X, true);
        Data.setUint16(5, Y, true);
        this.sendData(Data.buffer);
    };
    return UeInputMouseMessage;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_0__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeInputTouchMessage.ts":
/*!******************************************************!*\
  !*** ./src/UeInstanceMessage/UeInputTouchMessage.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_167038__) => {

__nested_webpack_require_167038__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_167038__.d(__webpack_exports__, {
/* harmony export */   "UeInputTouchMessage": () => (/* binding */ UeInputTouchMessage)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_167038__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_167038__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_167038__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
 * Handles Sending Touch messages to the UE Instance
 */
var UeInputTouchMessage = /** @class */ (function (_super) {
    __extends(UeInputTouchMessage, _super);
    /**
     * @param datachannelController - Data channel Controller
     */
    function UeInputTouchMessage(datachannelController, videoElementProvider) {
        var _this = _super.call(this, datachannelController) || this;
        _this.unsignedOutOfRange = 65535;
        _this.signedOutOfRange = 32767;
        _this.videoElementProvider = videoElementProvider;
        _this.fingersIds = {};
        _this.fingers = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
        _this.printInputs = false;
        return _this;
    }
    /**
     * Handles Touch event Start
     * @param touches - Touch List
     */
    UeInputTouchMessage.prototype.sendTouchStart = function (touches) {
        this.sendTouch(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_2__.UeMessageType.touchStart, touches);
    };
    /**
     * Handles Touch event End
     * @param touches - Touch List
     */
    UeInputTouchMessage.prototype.sendTouchEnd = function (touches) {
        this.sendTouch(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_2__.UeMessageType.touchEnd, touches);
    };
    /**
     * Handles Touch event Move
     * @param touches - Touch List
     */
    UeInputTouchMessage.prototype.sendTouchMove = function (touches) {
        this.sendTouch(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_2__.UeMessageType.touchMove, touches);
    };
    /**
     * Handles Sending the Touch Event to the UE Instance via the Data channel
     * @param touches - Touch List
     */
    UeInputTouchMessage.prototype.sendTouch = function (touchType, touches) {
        var data = new DataView(new ArrayBuffer(2 + 7 * touches.length));
        data.setUint8(0, touchType);
        data.setUint8(1, touches.length);
        var byte = 2;
        for (var t = 0; t < touches.length; t++) {
            var touch = touches[t];
            var x = touch.clientX; //- offsetLeft;
            var y = touch.clientY; //- offsetTop;
            var coord = this.normaliseAndQuantiseUnsigned(x, y);
            //      byte =  2
            data.setUint16(byte, coord.x, true);
            byte += 2;
            //      byte =  4
            data.setUint16(byte, coord.y, true);
            byte += 2;
            //      byte =  6
            data.setUint8(byte, this.fingersIds[touch.identifier]);
            byte += 1;
            //      byte =  7
            data.setUint8(byte, 255 * touch.force); // force is between 0.0 and 1.0 so quantize into byte.
            byte += 1;
            //      byte =  8
            data.setUint8(byte, coord.inRange ? 1 : 0); // mark the touch as in the player or not
            byte += 1;
        }
        this.sendData(data.buffer);
    };
    /**
     * TO DO
     * @param x - X Coordinate
     * @param y - Y Coordinate
     * @returns - Normalised and Quantised Unsigned values
     */
    UeInputTouchMessage.prototype.normaliseAndQuantiseUnsigned = function (x, y) {
        var rootDiv = this.videoElementProvider.getVideoParentElement();
        var videoElement = this.videoElementProvider.getVideoElement();
        if (rootDiv && videoElement) {
            var playerAspectRatio = rootDiv.clientHeight / rootDiv.clientWidth;
            var videoAspectRatio = videoElement.videoHeight / videoElement.videoWidth;
            // Unsigned XY positions are the ratio (0.0..1.0) along a viewport axis,
            // quantized into an uint16 (0..65536).
            // Signed XY deltas are the ratio (-1.0..1.0) along a viewport axis,
            // quantized into an int16 (-32767..32767).
            // This allows the browser viewport and client viewport to have a different
            // size.
            // Hack: Currently we set an out-of-range position to an extreme (65535)
            // as we can't yet accurately detect mouse enter and leave events
            // precisely inside a video with an aspect ratio which causes mattes.
            if (playerAspectRatio > videoAspectRatio) {
                var ratio = playerAspectRatio / videoAspectRatio;
                // Unsigned.
                var normalizedX = x / rootDiv.clientWidth;
                var normalizedY = ratio * (y / rootDiv.clientHeight - 0.5) + 0.5;
                if (normalizedX < 0.0 || normalizedX > 1.0 || normalizedY < 0.0 || normalizedY > 1.0) {
                    return {
                        inRange: false,
                        x: this.unsignedOutOfRange,
                        y: this.unsignedOutOfRange
                    };
                }
                else {
                    return {
                        inRange: true,
                        x: normalizedX * (this.unsignedOutOfRange + 1),
                        y: normalizedY * (this.unsignedOutOfRange + 1)
                    };
                }
            }
            else {
                if (this.printInputs) {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio', 6);
                }
                var ratio = videoAspectRatio / playerAspectRatio;
                // Unsigned. 
                var normalizedX = ratio * (x / rootDiv.clientWidth - 0.5) + 0.5;
                var normalizedY = y / rootDiv.clientHeight;
                if (normalizedX < 0.0 || normalizedX > 1.0 || normalizedY < 0.0 || normalizedY > 1.0) {
                    return {
                        inRange: false,
                        x: this.unsignedOutOfRange,
                        y: this.unsignedOutOfRange
                    };
                }
                else {
                    return {
                        inRange: true,
                        x: normalizedX * (this.unsignedOutOfRange + 1),
                        y: normalizedY * (this.unsignedOutOfRange + 1)
                    };
                }
            }
        }
    };
    return UeInputTouchMessage;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_1__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeMessageTypes.ts":
/*!*************************************************!*\
  !*** ./src/UeInstanceMessage/UeMessageTypes.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_174975__) => {

__nested_webpack_require_174975__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_174975__.d(__webpack_exports__, {
/* harmony export */   "UeMessageType": () => (/* binding */ UeMessageType)
/* harmony export */ });
/**
 * The Type of message sent to the UE instance over the data channel
 * Must be kept in sync with PixelStreamingProtocol::EToUE4Msg C++ enum.
 * {@link https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Plugins/Media/PixelStreaming/Source/PixelStreaming/Private/ProtocolDefs.h} Requires Login
 */
var UeMessageType = /** @class */ (function () {
    function UeMessageType() {
    }
    /**********************************************************************/
    /*
     * Control Messages. Range = 0..49.
     */
    UeMessageType.iFrameRequest = 0;
    UeMessageType.requestQualityControl = 1;
    UeMessageType.maxFpsRequest = 2;
    UeMessageType.averageBitrateRequest = 3;
    UeMessageType.startStreaming = 4;
    UeMessageType.stopStreaming = 5;
    UeMessageType.latencyTest = 6;
    UeMessageType.requestInitialSettings = 7;
    /**********************************************************************/
    /*
     * Input Messages. Range = 50..89.
     */
    // Generic Input Messages. Range = 50..59.
    UeMessageType.uiInteraction = 50;
    UeMessageType.command = 51;
    // Keyboard Input Message. Range = 60..69.
    UeMessageType.keyDown = 60;
    UeMessageType.keyUp = 61;
    UeMessageType.keyPress = 62;
    // Mouse Input Messages. Range = 70..79.
    UeMessageType.mouseEnter = 70;
    UeMessageType.mouseLeave = 71;
    UeMessageType.mouseDown = 72;
    UeMessageType.mouseUp = 73;
    UeMessageType.mouseMove = 74;
    UeMessageType.mouseWheel = 75;
    // Touch Input Messages. Range = 80..89.
    UeMessageType.touchStart = 80;
    UeMessageType.touchEnd = 81;
    UeMessageType.touchMove = 82;
    // Gamepad Input Messages. Range = 90..99
    UeMessageType.gamepadButtonPressed = 90;
    UeMessageType.gamepadButtonReleased = 91;
    UeMessageType.gamepadAnalog = 92;
    return UeMessageType;
}());



/***/ }),

/***/ "./src/Ui/UiController.ts":
/*!********************************!*\
  !*** ./src/Ui/UiController.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_177272__) => {

__nested_webpack_require_177272__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_177272__.d(__webpack_exports__, {
/* harmony export */   "UiController": () => (/* binding */ UiController),
/* harmony export */   "playerStyleAttributes": () => (/* binding */ playerStyleAttributes)
/* harmony export */ });
/**
 * The Ui Controller class handles all methods that interact with the UI
 */
var UiController = /** @class */ (function () {
    function UiController(videoPlayerProvider) {
        var _this = this;
        this.lastTimeResized = new Date().getTime();
        this.videoPlayerProvider = videoPlayerProvider;
        this.playerStyleAttributes = new playerStyleAttributes();
        // set resize events to the windows if it is resized or its orientation is changed
        window.addEventListener('resize', function () { return _this.resizePlayerStyle(); }, true);
        window.addEventListener('orientationchange', function () { return _this.onOrientationChange(); });
    }
    /**
     * Resizes the player element to fill the window
     * @param playerElement - the player DOM element
     */
    UiController.prototype.resizePlayerStyleToFillWindow = function (playerElement) {
        var videoElement = this.videoPlayerProvider.getVideoElement();
        // Fill the player display in window, keeping picture's aspect ratio.
        var windowAspectRatio = window.innerHeight / window.innerWidth;
        var playerAspectRatio = playerElement.clientHeight / playerElement.clientWidth;
        // We want to keep the video ratio correct for the video stream
        var videoWidth;
        var videoHeight;
        if (!videoElement === undefined) {
            videoWidth = parseInt(videoElement.getAttribute("videoWidth"));
            videoHeight = parseInt(videoElement.getAttribute("videoHeight"));
        }
        var videoAspectRatio = videoHeight / videoWidth;
        if (isNaN(videoAspectRatio)) {
            //Video is not initialised yet so set playerElement to size of window
            this.playerStyleAttributes.styleWidth = window.innerWidth;
            this.playerStyleAttributes.styleHeight = window.innerHeight;
            this.playerStyleAttributes.styleTop = 0;
            this.playerStyleAttributes.styleLeft = 0;
            playerElement.setAttribute('style', "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
        }
        else if (windowAspectRatio < playerAspectRatio) {
            // Window height is the constraining factor so to keep aspect ratio change width appropriately
            this.playerStyleAttributes.styleWidth = Math.floor(window.innerHeight / videoAspectRatio);
            this.playerStyleAttributes.styleHeight = window.innerHeight;
            this.playerStyleAttributes.styleTop = 0;
            this.playerStyleAttributes.styleLeft = Math.floor((window.innerWidth - this.playerStyleAttributes.styleWidth) * 0.5);
            playerElement.setAttribute('style', "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
        }
        else {
            // Window width is the constraining factor so to keep aspect ratio change height appropriately
            this.playerStyleAttributes.styleWidth = window.innerWidth;
            this.playerStyleAttributes.styleHeight = Math.floor(window.innerWidth * videoAspectRatio);
            this.playerStyleAttributes.styleTop = Math.floor((window.innerHeight - this.playerStyleAttributes.styleHeight) * 0.5);
            this.playerStyleAttributes.styleLeft = 0;
            playerElement.setAttribute('style', "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
        }
    };
    /**
     * Resizes the player element to fit the actual size of the stream
     * @param playerElement - the player DOM element
     */
    UiController.prototype.resizePlayerStyleToActualSize = function (playerElement) {
        var videoElement = this.videoPlayerProvider.getVideoElement();
        var videoElementLength;
        if (!videoElement === undefined) {
            videoElementLength = parseInt(videoElement.getAttribute("length"));
        }
        if (videoElementLength > 0) {
            // Display image in its actual size
            this.playerStyleAttributes.styleWidth = videoElement.videoWidth;
            this.playerStyleAttributes.styleHeight = videoElement.videoHeight;
            var Top = Math.floor((window.innerHeight - this.playerStyleAttributes.styleHeight) * 0.5);
            var Left = Math.floor((window.innerWidth - this.playerStyleAttributes.styleWidth) * 0.5);
            this.playerStyleAttributes.styleTop = (Top > 0) ? Top : 0;
            this.playerStyleAttributes.styleLeft = (Left > 0) ? Left : 0;
            playerElement.setAttribute('style', "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
        }
    };
    /**
     * Resizes the player element to fit an arbitrary size
     * @param playerElement - the player DOM element
     */
    UiController.prototype.resizePlayerStyleToArbitrarySize = function (playerElement) {
        playerElement.setAttribute('style', "top: 0px; left: 0px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
    };
    /**
     * An override for setting up the mouse and freezeFrame
     * @param element - the player DOM element
     */
    UiController.prototype.setUpMouseAndFreezeFrame = function (element) { };
    /**
     * An override for updating the video stream size
     */
    UiController.prototype.updateVideoStreamSize = function () { };
    /**
     * Resizes the player style based on the window height and width
     * @returns - nil if requirements are satisfied
     */
    UiController.prototype.resizePlayerStyle = function () {
        var playerElement = this.videoPlayerProvider.getVideoParentElement();
        if (!playerElement) {
            return;
        }
        this.updateVideoStreamSize();
        if (playerElement.classList.contains('fixed-size')) {
            this.setUpMouseAndFreezeFrame(playerElement);
            return;
        }
        // controls for resizing the player 
        var videoWidth = parseInt(playerElement.getAttribute("videoWidth"));
        var videoHeight = parseInt(playerElement.getAttribute("videoHeight"));
        var windowSmallerThanPlayer = window.innerWidth < videoWidth || window.innerHeight < videoHeight;
        if (this.enlargeDisplayToFillWindow !== null) {
            if (this.enlargeDisplayToFillWindow === true || windowSmallerThanPlayer) {
                this.resizePlayerStyleToFillWindow(playerElement);
            }
            else {
                this.resizePlayerStyleToActualSize(playerElement);
            }
        }
        else {
            this.resizePlayerStyleToArbitrarySize(playerElement);
        }
        this.setUpMouseAndFreezeFrame(playerElement);
    };
    /**
     * On the orientation change of a window clear the timeout
     */
    UiController.prototype.onOrientationChange = function () {
        var _this = this;
        clearTimeout(this.orientationChangeTimeout);
        this.orientationChangeTimeout = setTimeout(function () { _this.resizePlayerStyle(); }, 500);
    };
    return UiController;
}());

/**
 * Handles the player style attributes so they can be instantiated
 */
var playerStyleAttributes = /** @class */ (function () {
    function playerStyleAttributes() {
        this.styleCursor = 'default';
    }
    return playerStyleAttributes;
}());



/***/ }),

/***/ "./src/VideoPlayer/StreamController.ts":
/*!*********************************************!*\
  !*** ./src/VideoPlayer/StreamController.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_186215__) => {

__nested_webpack_require_186215__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_186215__.d(__webpack_exports__, {
/* harmony export */   "StreamController": () => (/* binding */ StreamController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_186215__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");

/**
 * Video Player Controller handles the creation of the video HTML element and all handlers
 */
var StreamController = /** @class */ (function () {
    function StreamController(videoElementProvider) {
        this.videoElementProvider = videoElementProvider;
        this.audioElement = document.createElement("Audio");
    }
    /**
     * Handles when the Peer connection has a track event
     * @param rtcTrackEvent - RTC Track Event
     */
    StreamController.prototype.handleOnTrack = function (rtcTrackEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "handleOnTrack " + JSON.stringify(rtcTrackEvent.streams), 6);
        var videoElement = this.videoElementProvider.getVideoElement();
        if (rtcTrackEvent.track) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Got track - ' + rtcTrackEvent.track.kind + ' id=' + rtcTrackEvent.track.id + ' readyState=' + rtcTrackEvent.track.readyState, 6);
        }
        if (rtcTrackEvent.track.kind == "audio") {
            this.CreateAudioTrack(rtcTrackEvent.streams[0]);
            return;
        }
        else if (rtcTrackEvent.track.kind == "video" && videoElement.srcObject !== rtcTrackEvent.streams[0]) {
            videoElement.srcObject = rtcTrackEvent.streams[0];
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Set video source from video track ontrack.');
            return;
        }
    };
    /**
    * Creates the audio device when receiving an RTCTrackEvent with the kind of "audio"
    * @param audioMediaStream - Audio Media stream track
    */
    StreamController.prototype.CreateAudioTrack = function (audioMediaStream) {
        var videoElement = this.videoElementProvider.getVideoElement();
        // do nothing the video has the same media stream as the audio track we have here (they are linked)
        if (videoElement.srcObject == audioMediaStream) {
            return;
        }
        // video element has some other media stream that is not associated with this audio track
        else if (videoElement.srcObject && videoElement.srcObject !== audioMediaStream) {
            // create a new audio element
            this.audioElement.srcObject = audioMediaStream;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Created new audio element to play separate audio stream.');
        }
    };
    return StreamController;
}());



/***/ }),

/***/ "./src/VideoPlayer/VideoPlayer.ts":
/*!****************************************!*\
  !*** ./src/VideoPlayer/VideoPlayer.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_189530__) => {

__nested_webpack_require_189530__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_189530__.d(__webpack_exports__, {
/* harmony export */   "VideoPlayer": () => (/* binding */ VideoPlayer)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_189530__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");

var VideoPlayer = /** @class */ (function () {
    function VideoPlayer(rootDiv, startVideoMuted) {
        this.videoElement = document.createElement("video");
        this.videoElement.id = "streamingVideo";
        this.videoElement.muted = startVideoMuted;
        this.videoElement.disablePictureInPicture = true;
        this.videoElement.playsInline = true;
        this.videoElement.style.width = "100%";
        this.videoElement.style.height = "100%";
        this.videoElement.style.position = "absolute";
        rootDiv.appendChild(this.videoElement);
    }
    /**
     * Get the current context of the html video element
     * @returns the current context of the video element
     */
    VideoPlayer.prototype.getVideoElement = function () {
        return this.videoElement;
    };
    /**
     * Get the current context of the html video elements parent
     * @returns the current context of the video elements parent
     */
    VideoPlayer.prototype.getVideoParentElement = function () {
        return this.videoElement.parentElement;
    };
    /**
     * Set the click actions for when the Element is mouse clicked
     * @param event - Mouse Event
     */
    VideoPlayer.prototype.setClickActions = function (event) {
        if (this.videoElement.paused) {
            this.videoElement.play();
        }
        // minor hack to alleviate ios not supporting pointerlock
        if (this.videoElement.requestPointerLock) {
            this.videoElement.requestPointerLock();
        }
    };
    /**
    * Set the mouse enter and mouse leave events
    */
    VideoPlayer.prototype.setMouseEnterAndLeaveEvents = function (mouseEnterCallBack, mouseLeaveCallBack) {
        // Handle when the Mouse has entered the element
        this.videoElement.onmouseenter = function (event) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Mouse Entered", 6);
            mouseEnterCallBack();
        };
        // Handles when the mouse has left the element 
        this.videoElement.onmouseleave = function (event) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Mouse Left", 6);
            mouseLeaveCallBack();
        };
    };
    /**
    * Set the Video Elements src object tracks to enable
    * @param enabled - Enable Tracks on the Src Object
    */
    VideoPlayer.prototype.setVideoEnabled = function (enabled) {
        // this is a temporary hack until type scripts video element is updated to reflect the need for tracks on a html video element 
        var videoElement = this.videoElement;
        videoElement.srcObject.getTracks().forEach(function (track) { return track.enabled = enabled; });
    };
    return VideoPlayer;
}());



/***/ }),

/***/ "./src/VideoPlayer/VideoPlayerMouseHoverEvents.ts":
/*!********************************************************!*\
  !*** ./src/VideoPlayer/VideoPlayerMouseHoverEvents.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_193066__) => {

__nested_webpack_require_193066__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_193066__.d(__webpack_exports__, {
/* harmony export */   "VideoPlayerMouseHoverEvents": () => (/* binding */ VideoPlayerMouseHoverEvents)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_193066__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");

/**
 * Video Player mouse Hover handler
 */
var VideoPlayerMouseHoverEvents = /** @class */ (function () {
    /**
     * @param mouseController - Mouse Controller
     */
    function VideoPlayerMouseHoverEvents(mouseController) {
        this.mouseController = mouseController;
    }
    /**
     * Satisfies the interfaces handleLockStateChange requirement
     */
    VideoPlayerMouseHoverEvents.prototype.handleLockStateChange = function () { };
    /**
     * Handle the mouse move event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleMouseMove = function (mouseEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "MouseMove", 6);
        this.mouseController.sendMouseMove(mouseEvent.offsetX, mouseEvent.offsetY, mouseEvent.movementX, mouseEvent.movementY);
        mouseEvent.preventDefault();
    };
    /**
     * Handle the mouse Down event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleMouseDown = function (mouseEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "onMouse Down", 6);
        this.mouseController.sendMouseDown(mouseEvent.button, mouseEvent.offsetX, mouseEvent.offsetY);
        mouseEvent.preventDefault();
    };
    /**
     * Handle the mouse Up event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleMouseUp = function (mouseEvent) {
        this.mouseController.sendMouseUp(mouseEvent.button, mouseEvent.offsetX, mouseEvent.offsetY);
        mouseEvent.preventDefault();
    };
    /**
     * Handle the mouse wheel event, sends the mouse wheel data to the UE Instance
     * @param wheelEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleMouseWheel = function (wheelEvent) {
        this.mouseController.sendMouseWheel(wheelEvent.detail * -120, wheelEvent.offsetX, wheelEvent.offsetY);
        wheelEvent.preventDefault();
    };
    /**
     * Handle the mouse context menu event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleContextMenu = function (mouseEvent) {
        this.mouseController.sendMouseUp(mouseEvent.button, mouseEvent.offsetX, mouseEvent.offsetY);
        mouseEvent.preventDefault();
    };
    return VideoPlayerMouseHoverEvents;
}());



/***/ }),

/***/ "./src/VideoPlayer/VideoPlayerMouseLockedEvents.ts":
/*!*********************************************************!*\
  !*** ./src/VideoPlayer/VideoPlayerMouseLockedEvents.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_196439__) => {

__nested_webpack_require_196439__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_196439__.d(__webpack_exports__, {
/* harmony export */   "VideoPlayerMouseLockedEvents": () => (/* binding */ VideoPlayerMouseLockedEvents)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_196439__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");

/**
 * Handle the mouse locked events
 */
var VideoPlayerMouseLockedEvents = /** @class */ (function () {
    /**
     * @param videoElementProvider - The HTML Video Element provider
     * @param mouseController  - Mouse Controller
     */
    function VideoPlayerMouseLockedEvents(videoElementProvider, mouseController) {
        this.videoElementProvider = videoElementProvider;
        this.mouseController = mouseController;
        var videoElement = this.videoElementProvider.getVideoElement();
        this.x = videoElement.width / 2;
        this.y = videoElement.height / 2;
    }
    /**
     * Handle when the locked state Changed
     */
    VideoPlayerMouseLockedEvents.prototype.handleLockStateChange = function () {
        var _this = this;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Lock state has changed", 6);
        var videoElement = this.videoElementProvider.getVideoElement();
        if (document.pointerLockElement === videoElement) {
            document.onmousemove = function (mouseEvent) { return _this.handleMouseMove(mouseEvent); };
            document.onwheel = function (wheelEvent) { return _this.handleMouseWheel(wheelEvent); };
            videoElement.onmousedown = function (wheelEvent) { return _this.handleMouseDown(wheelEvent); };
            videoElement.onmouseup = function (mouseEvent) { return _this.handleMouseUp(mouseEvent); };
        }
        else {
            document.onmousemove = null;
            videoElement.onmousedown = null;
            videoElement.onmouseup = null;
            videoElement.onwheel = null;
        }
    };
    /**
     * Handle the mouse move event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleMouseMove = function (mouseEvent) {
        var videoElement = this.videoElementProvider.getVideoElement();
        this.x += mouseEvent.movementX;
        this.y += mouseEvent.movementY;
        if (this.x > videoElement.clientWidth) {
            this.x -= videoElement.clientWidth;
        }
        if (this.y > videoElement.clientHeight) {
            this.y -= videoElement.clientHeight;
        }
        if (this.x < 0) {
            this.x = videoElement.clientWidth + this.x;
        }
        if (this.y < 0) {
            this.y = videoElement.clientHeight - this.y;
        }
        this.mouseController.sendMouseMove(this.x, this.y, mouseEvent.movementX, mouseEvent.movementY);
    };
    /**
     * Handle the mouse Down event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleMouseDown = function (mouseEvent) {
        this.mouseController.sendMouseDown(mouseEvent.button, mouseEvent.x, mouseEvent.y);
    };
    /**
     * Handle the mouse Up event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleMouseUp = function (mouseEvent) {
        this.mouseController.sendMouseUp(mouseEvent.button, mouseEvent.x, mouseEvent.y);
    };
    /**
     * Handle the mouse wheel event, sends the mouse wheel data to the UE Instance
     * @param wheelEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleMouseWheel = function (wheelEvent) {
        this.mouseController.sendMouseWheel(wheelEvent.deltaY, wheelEvent.x, wheelEvent.y);
    };
    /**
     * Handle the mouse context menu event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleContextMenu = function (mouseEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "onContextMenu");
    };
    return VideoPlayerMouseLockedEvents;
}());



/***/ }),

/***/ "./src/WebRtcPlayer/WebRtcPlayerController.ts":
/*!****************************************************!*\
  !*** ./src/WebRtcPlayer/WebRtcPlayerController.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_201080__) => {

__nested_webpack_require_201080__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_201080__.d(__webpack_exports__, {
/* harmony export */   "webRtcPlayerController": () => (/* binding */ webRtcPlayerController)
/* harmony export */ });
/* harmony import */ var _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_201080__(/*! ../WebSockets/WebSocketController */ "./src/WebSockets/WebSocketController.ts");
/* harmony import */ var _VideoPlayer_StreamController__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_201080__(/*! ../VideoPlayer/StreamController */ "./src/VideoPlayer/StreamController.ts");
/* harmony import */ var _Ui_UiController__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_201080__(/*! ../Ui/UiController */ "./src/Ui/UiController.ts");
/* harmony import */ var _FreezeFrame_FreezeFrameController__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_201080__(/*! ../FreezeFrame/FreezeFrameController */ "./src/FreezeFrame/FreezeFrameController.ts");
/* harmony import */ var _Afk_AfkLogic__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_201080__(/*! ../Afk/AfkLogic */ "./src/Afk/AfkLogic.ts");
/* harmony import */ var _DataChannel_DataChannelController__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_201080__(/*! ../DataChannel/DataChannelController */ "./src/DataChannel/DataChannelController.ts");
/* harmony import */ var _PeerConnectionController_PeerConnectionController__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_201080__(/*! ../PeerConnectionController/PeerConnectionController */ "./src/PeerConnectionController/PeerConnectionController.ts");
/* harmony import */ var _UeInstanceMessage_UeDescriptorUi__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_201080__(/*! ../UeInstanceMessage/UeDescriptorUi */ "./src/UeInstanceMessage/UeDescriptorUi.ts");
/* harmony import */ var _UeInstanceMessage_UeControlMessage__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_201080__(/*! ../UeInstanceMessage/UeControlMessage */ "./src/UeInstanceMessage/UeControlMessage.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_201080__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Inputs_InputController__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_201080__(/*! ../Inputs/InputController */ "./src/Inputs/InputController.ts");
/* harmony import */ var _MicPlayer_MicController__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_201080__(/*! ../MicPlayer/MicController */ "./src/MicPlayer/MicController.ts");
/* harmony import */ var _VideoPlayer_VideoPlayer__WEBPACK_IMPORTED_MODULE_12__ = __nested_webpack_require_201080__(/*! ../VideoPlayer/VideoPlayer */ "./src/VideoPlayer/VideoPlayer.ts");













/**
 * Entry point for the Web RTC Player
 */
var webRtcPlayerController = /** @class */ (function () {
    /**
     *
     * @param config - the frontend config object
     * @param delegate - the delegate interface object
     */
    function webRtcPlayerController(config, delegate) {
        var _this = this;
        this.shouldShowPlayOverlay = true;
        this.lastTimeResized = new Date().getTime();
        this.config = config;
        this.delegate = delegate;
        this.sdpConstraints = {
            offerToReceiveAudio: true,
            offerToReceiveVideo: true
        };
        // set up the afk logic class and connect up its method for closing the signaling server 
        this.afkLogic = new _Afk_AfkLogic__WEBPACK_IMPORTED_MODULE_4__.AfkLogic(this.config.controlScheme, this.config.afkTimeout);
        this.afkLogic.setDisconnectMessageOverride = function (message) { return _this.setDisconnectMessageOverride(message); };
        this.afkLogic.closeWebSocket = function () { return _this.closeSignalingServer(); };
        this.freezeFrameController = new _FreezeFrame_FreezeFrameController__WEBPACK_IMPORTED_MODULE_3__.FreezeFrameController(this.config.playerElement);
        this.videoPlayer = new _VideoPlayer_VideoPlayer__WEBPACK_IMPORTED_MODULE_12__.VideoPlayer(this.config.playerElement, this.config.startVideoMuted);
        this.streamController = new _VideoPlayer_StreamController__WEBPACK_IMPORTED_MODULE_1__.StreamController(this.videoPlayer);
        this.uiController = new _Ui_UiController__WEBPACK_IMPORTED_MODULE_2__.UiController(this.videoPlayer);
        this.uiController.setUpMouseAndFreezeFrame = function (element) { return _this.setUpMouseAndFreezeFrame(element); };
        this.dataChannelController = new _DataChannel_DataChannelController__WEBPACK_IMPORTED_MODULE_5__.DataChannelController();
        this.dataChannelController.handleOnOpen = function () { return _this.handleDataChannelConnected(); };
        this.dataChannelController.onLatencyTestResult = function (latencyTestResults) { return _this.handleLatencyTestResult(latencyTestResults); };
        this.dataChannelController.onVideoEncoderAvgQP = function (AvgQP) { return _this.handleVideoEncoderAvgQP(AvgQP); };
        this.dataChannelController.OnInitialSettings = function (InitialSettings) { return _this.handleInitialSettings(InitialSettings); };
        this.dataChannelController.onQualityControlOwnership = function (hasQualityOwnership) { return _this.handleQualityControlOwnership(hasQualityOwnership); };
        this.dataChannelController.resetAfkWarningTimerOnDataSend = function () { return _this.afkLogic.resetAfkWarningTimer(); };
        // set up websocket methods
        this.webSocketController = new _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_0__.WebSocketController(this.config.signallingServerAddress);
        this.webSocketController.onConfig = function (messageConfig) { return _this.handleOnConfigMessage(messageConfig); };
        this.webSocketController.onInstanceStateChange = function (instanceState) { return _this.handleInstanceStateChange(instanceState); };
        this.webSocketController.onAuthenticationResponse = function (authResponse) { return _this.handleAuthenticationResponse(authResponse); };
        this.webSocketController.onWebSocketOncloseOverlayMessage = function (event) { return _this.delegate.onDisconnect(event.code + " - " + event.reason); };
        // set up the final webRtc player controller methods from within our delegate so a connection can be activated
        this.delegate.setIWebRtcPlayerController(this);
        // now that the delegate has finished instantiating connect the rest of the afk methods to the afk logic class
        this.afkLogic.showAfkOverlay = function () { return _this.delegate.showAfkOverlay(_this.afkLogic.countDown); };
        this.afkLogic.updateAfkCountdown = function () { return _this.delegate.updateAfkOverlay(_this.afkLogic.countDown); };
        this.afkLogic.hideCurrentOverlay = function () { return _this.delegate.hideCurrentOverlay(); };
        this.webSocketController.stopAfkWarningTimer = function () { return _this.afkLogic.stopAfkWarningTimer(); };
    }
    /**
     * connect up the onAfkClick action with a method so it can be exposed to the delegate
     */
    webRtcPlayerController.prototype.onAfkClick = function () {
        this.afkLogic.onAfkClick();
        // if the stream is paused play it
        if (this.videoPlayer.videoElement.paused === true) {
            this.playStream();
        }
    };
    /**
     * Restart the stream automaticity without refreshing the page
     */
    webRtcPlayerController.prototype.restartStreamAutomaticity = function () {
        var _this = this;
        // if there is no webSocketController return immediately or this will not work
        if (!this.webSocketController) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "The Web Socket Controller does not exist so this will not work right now.");
            return;
        }
        // if a websocket object has not been created connect normally without closing 
        if (!this.webSocketController.webSocket) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "A websocket connection has not been made yet so we will start the stream");
            this.delegate.onWebRtcAutoConnect();
            this.connectToSignallingSever();
        }
        else {
            // set the replay status so we get a text overlay over an action overlay
            this.delegate.showActionOrErrorOnDisconnect = false;
            // set the disconnect message
            this.setDisconnectMessageOverride("Restarting stream manually");
            // close the connection 
            this.closeSignalingServer();
            // wait for the connection to close and restart the connection
            var autoConnectTimeout_1 = setTimeout(function () {
                _this.delegate.onWebRtcAutoConnect();
                _this.connectToSignallingSever();
                clearTimeout(autoConnectTimeout_1);
            }, 3000);
        }
    };
    /**
     * Sets if we are enlarging the display to fill the window for freeze frames and ui controller
     * @param isFilling is the display filling or not
     */
    webRtcPlayerController.prototype.setEnlargeToFillDisplay = function (isFilling) {
        this.freezeFrameController.freezeFrame.enlargeDisplayToFillWindow = isFilling;
        this.uiController.enlargeDisplayToFillWindow = isFilling;
    };
    /**
     * Loads a freeze frame if it is required otherwise shows the play overlay
     */
    webRtcPlayerController.prototype.loadFreezeFrameOrShowPlayOverlay = function () {
        if (this.shouldShowPlayOverlay === true) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "showing play overlay");
            this.delegate.showPlayOverlay();
            this.resizePlayerStyle();
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "showing freeze frame");
            this.freezeFrameController.showFreezeFrame();
        }
        this.videoPlayer.setVideoEnabled(false);
    };
    /**
     * Enable the video after hiding a freeze frame
     */
    webRtcPlayerController.prototype.InvalidateFreezeFrameAndEnableVideo = function () {
        this.freezeFrameController.hideFreezeFrame();
        if (this.videoPlayer.videoElement) {
            this.videoPlayer.setVideoEnabled(true);
        }
    };
    /**
     * Plays the stream audio and video source and sets up other pieces while the stream starts
     */
    webRtcPlayerController.prototype.playStream = function () {
        var _this = this;
        if (!this.videoPlayer.videoElement) {
            this.delegate.showErrorOverlay("Could not player video stream because the video player was not initialised correctly.");
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Could not player video stream because the video player was not initialised correctly.");
            // set the disconnect message
            this.setDisconnectMessageOverride("Stream not initialised correctly");
            // close the connection 
            this.closeSignalingServer();
        }
        else {
            this.inputController.registerTouch(this.config.fakeMouseWithTouches, this.videoPlayer.videoElement);
            if (this.streamController.audioElement) {
                this.streamController.audioElement.play().then(function () {
                    _this.playVideo();
                }).catch(function (onRejectedReason) {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), onRejectedReason);
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Browser does not support autoplaying video without interaction - to resolve this we are going to show the play button overlay.");
                    _this.delegate.showPlayOverlay();
                });
            }
            else {
                this.playVideo();
            }
            this.shouldShowPlayOverlay = false;
            this.freezeFrameController.showFreezeFrame();
            this.delegate.hideCurrentOverlay();
        }
    };
    /**
     * Plays the video stream
     */
    webRtcPlayerController.prototype.playVideo = function () {
        var _this = this;
        // // handle play() with .then as it is an asynchronous call  
        this.videoPlayer.videoElement.play().catch(function (onRejectedReason) {
            if (_this.streamController.audioElement.srcObject) {
                _this.streamController.audioElement.pause();
            }
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), onRejectedReason);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Browser does not support autoplaying video without interaction - to resolve this we are going to show the play button overlay.");
            _this.delegate.showPlayOverlay();
        });
    };
    /**
     * Enable the video to play automaticity if enableSpsAutoplay is true
     */
    webRtcPlayerController.prototype.autoPlayVideoOrSetUpPlayOverlay = function () {
        if (this.config.enableSpsAutoplay === true) {
            // set up the auto play on the video element  
            this.videoPlayer.videoElement.autoplay = true;
            // attempt to play the video
            this.playStream();
        }
        else {
            this.delegate.showPlayOverlay();
        }
        // send and request initial stats
        this.ueControlMessage.SendRequestInitialSettings();
        this.ueControlMessage.SendRequestQualityControl();
    };
    /**
     * Connect to the Signaling server
     */
    webRtcPlayerController.prototype.connectToSignallingSever = function () {
        this.webSocketController.connect();
    };
    /**
     * This will start the handshake to the signalling server
     * @param peerConfig  - RTC Configuration Options from the Signaling server
     * @remark RTC Peer Connection on Ice Candidate event have it handled by handle Send Ice Candidate
     */
    webRtcPlayerController.prototype.startSession = function (peerConfig) {
        var _this = this;
        // set up url params for STUN, Mic and SFU
        this.urlParams = new URLSearchParams(window.location.search);
        // check for forcing turn
        if (this.urlParams.has('ForceTURN')) {
            // check for a turn server
            var hasTurnServer = this.checkTurnServerAvailability(peerConfig);
            // close and error if turn is forced and there is no turn server
            if (!hasTurnServer) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "No turn server was found in the Peer Connection Options. TURN cannot be forced, closing connection. Please use STUN instead");
                this.setDisconnectMessageOverride("TURN cannot be forced, closing connection. Please use STUN instead.");
                this.closeSignalingServer();
                return;
            }
        }
        // set up the peer connection controller
        this.peerConnectionController = new _PeerConnectionController_PeerConnectionController__WEBPACK_IMPORTED_MODULE_6__.PeerConnectionController(peerConfig, this.urlParams.has('ForceTURN'));
        //set up mic controller
        this.micController = new _MicPlayer_MicController__WEBPACK_IMPORTED_MODULE_11__.MicController(this.urlParams);
        // set up peer connection controller video stats
        this.peerConnectionController.onVideoStats = function (event) { return _this.handleVideoStats(event); };
        /* When the Peer Connection Wants to send an offer have it handled */
        this.peerConnectionController.onSendWebRTCOffer = function (offer) { return _this.handleSendWebRTCOffer(offer); };
        /* When the Peer connection ice candidate is added have it handled */
        this.peerConnectionController.onPeerIceCandidate = function (peerConnectionIceEvent) { return _this.handleSendIceCandidate(peerConnectionIceEvent); };
        // handel mic connections with promise
        this.dataChannelController.createDataChannel(this.peerConnectionController.peerConnection, "cirrus", this.datachannelOptions);
        // set up webRtc text overlays 
        this.peerConnectionController.showTextOverlayConnecting = function () { return _this.delegate.onWebRtcConnecting(); };
        this.peerConnectionController.showTextOverlaySetupFailure = function () { return _this.delegate.onWebRtcFailed(); };
        /* RTC Peer Connection on Track event -> handle on track */
        this.peerConnectionController.onTrack = function (trackEvent) { return _this.streamController.handleOnTrack(trackEvent); };
        /* Start the Hand shake process by creating an Offer */
        this.peerConnectionController.createOffer(this.sdpConstraints, this.micController.useMic);
    };
    /**
     * Checks the peer connection options for a turn server and returns true or false
     */
    webRtcPlayerController.prototype.checkTurnServerAvailability = function (options) {
        // if iceServers is empty return false this should not be the general use case but is here incase
        if (!options.iceServers) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), 'A turn sever was not found');
            return false;
        }
        // loop through the ice servers to check for a turn url
        for (var _i = 0, _a = options.iceServers; _i < _a.length; _i++) {
            var iceServer = _a[_i];
            for (var _b = 0, _c = iceServer.urls; _b < _c.length; _b++) {
                var url = _c[_b];
                if (url.includes('turn')) {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "A turn sever was found at " + url);
                    return true;
                }
            }
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), 'A turn sever was not found');
        return false;
    };
    /**
     * Handles when a Config Message is received contains the Peer Connection Options required (STUN and TURN Server Info)
     * @param messageConfig - Config Message received from the signaling server
     */
    webRtcPlayerController.prototype.handleOnConfigMessage = function (messageConfig) {
        var _this = this;
        // Tell the WebRtcController to start a session with the peer options sent from the signaling server
        this.startSession(messageConfig.peerConnectionOptions);
        // When the signaling server sends a WebRTC Answer over the websocket connection have the WebRtcController handle the message
        this.webSocketController.onWebRtcAnswer = function (messageAnswer) { return _this.handleWebRtcAnswer(messageAnswer); };
        // When the signaling server sends a IceCandidate over the websocket connection have the WebRtcController handle the message
        this.webSocketController.onIceCandidate = function (iceCandidate) { return _this.handleIceCandidate(iceCandidate); };
    };
    /**
     * Handle the RTC Answer from the signaling server
     * @param Answer - Answer Message from the Signaling server
     */
    webRtcPlayerController.prototype.handleWebRtcAnswer = function (Answer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "There is an answer", 6);
        var sdpAnswer = {
            sdp: Answer.sdp,
            type: "answer"
        };
        this.peerConnectionController.handleAnswer(sdpAnswer);
        // start the afk warning timer as the container is now running
        this.afkLogic.startAfkWarningTimer();
        // show the overlay that we have an answer
        this.delegate.onWebRtcAnswer();
    };
    /**
     * When an ice Candidate is received from the Signaling server add it to the Peer Connection Client
     * @param iceCandidate - Ice Candidate from Server
     */
    webRtcPlayerController.prototype.handleIceCandidate = function (iceCandidate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Web RTC Controller: onWebRtcIce", 6);
        var candidate = new RTCIceCandidate(iceCandidate);
        this.peerConnectionController.handleOnIce(candidate);
    };
    /**
     * Send the ice Candidate to the signaling server via websocket
       * @param iceEvent - RTC Peer ConnectionIceEvent) {
     */
    webRtcPlayerController.prototype.handleSendIceCandidate = function (iceEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "OnIceCandidate", 6);
        if (iceEvent.candidate && iceEvent.candidate.candidate) {
            this.webSocketController.sendIceCandidate(iceEvent.candidate);
        }
    };
    /**
     * Send the RTC Offer Session to the Signaling server via websocket
     * @param offer - RTC Session Description
     */
    webRtcPlayerController.prototype.handleSendWebRTCOffer = function (offer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Sending the offer to the Server", 6);
        this.webSocketController.sendWebRtcOffer(offer);
    };
    /**
     * registers the mouse for use in IWebRtcPlayerController
     */
    webRtcPlayerController.prototype.activateRegisterMouse = function () {
        this.inputController.registerMouse(this.config.controlScheme);
    };
    /**
     * Sets up the Data channel Keyboard, Mouse, UE Control Message, UE Descriptor
     */
    webRtcPlayerController.prototype.handleDataChannelConnected = function () {
        var _this = this;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Data Channel is open", 6);
        // show the connected overlay 
        this.delegate.onWebRtcConnected();
        this.inputController = new _Inputs_InputController__WEBPACK_IMPORTED_MODULE_10__.InputController(this.dataChannelController, this.videoPlayer);
        this.ueControlMessage = new _UeInstanceMessage_UeControlMessage__WEBPACK_IMPORTED_MODULE_8__.UeControlMessage(this.dataChannelController);
        this.ueDescriptorUi = new _UeInstanceMessage_UeDescriptorUi__WEBPACK_IMPORTED_MODULE_7__.UeDescriptorUi(this.dataChannelController);
        this.activateRegisterMouse();
        this.inputController.registerKeyBoard(this.config.suppressBrowserKeys);
        this.inputController.registerGamePad();
        this.videoPlayer.setMouseEnterAndLeaveEvents(function () { return _this.inputController.mouseController.sendMouseEnter(); }, function () { return _this.inputController.mouseController.sendMouseLeave(); });
        this.resizePlayerStyle();
        this.dataChannelController.processFreezeFrameMessage = function (view) { return _this.freezeFrameController.processFreezeFrameMessage(view, function () { return _this.loadFreezeFrameOrShowPlayOverlay(); }); };
        this.dataChannelController.onUnFreezeFrame = function () { return _this.InvalidateFreezeFrameAndEnableVideo(); };
        setInterval(function () { return _this.getStats(); }, 1000);
        // either autoplay the video or set up the play overlay
        this.autoPlayVideoOrSetUpPlayOverlay();
        this.resizePlayerStyle();
        this.ueDescriptorUi.sendUpdateVideoStreamSize(this.videoPlayer.videoElement.clientWidth, this.videoPlayer.videoElement.clientHeight);
        this.delegate.onVideoInitialised();
        this.uiController.updateVideoStreamSize = function () { return _this.updateVideoStreamSize(); };
    };
    /**
     * Handles when the web socket receives an authentication response
     * @param authResponse - Authentication Response
     */
    webRtcPlayerController.prototype.handleAuthenticationResponse = function (authResponse) {
        this.delegate.onAuthenticationResponse(authResponse);
    };
    /**
     * Handles when the stream size changes
     */
    webRtcPlayerController.prototype.updateVideoStreamSize = function () {
        // Call the setter before calling this function
        if (!this.matchViewportResolution) {
            return;
        }
        var now = new Date().getTime();
        if (now - this.lastTimeResized > 1000) {
            // get the root div from config 
            if (!this.config.playerElement) {
                return;
            }
            this.ueDescriptorUi.sendUpdateVideoStreamSize(this.videoPlayer.videoElement.clientWidth, this.videoPlayer.videoElement.clientHeight);
            this.lastTimeResized = new Date().getTime();
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), 'Resizing too often - skipping', 6);
            clearTimeout(this.resizeTimeout);
            this.resizeTimeout = setTimeout(this.updateVideoStreamSize, 1000);
        }
    };
    /**
     * Handles when the Instance State Changes
     * @param instanceState  - Instance State
     */
    webRtcPlayerController.prototype.handleInstanceStateChange = function (instanceState) {
        this.delegate.onInstanceStateChange(instanceState);
    };
    /**
     * Set the freeze frame overlay to the player div
     * @param playerElement - The div element of the Player
     */
    webRtcPlayerController.prototype.setUpMouseAndFreezeFrame = function (playerElement) {
        // Calculating and normalizing positions depends on the width and height of the player.
        this.playerElementClientRect = playerElement.getBoundingClientRect();
        this.freezeFrameController.freezeFrame.resize();
    };
    /**
     * Close the Connection to the signaling server
     */
    webRtcPlayerController.prototype.closeSignalingServer = function () {
        this.webSocketController.close();
    };
    /**
     * Fires a Video Stats Event in the RTC Peer Connection
     */
    webRtcPlayerController.prototype.getStats = function () {
        this.peerConnectionController.generateStats();
    };
    /**
     * Send a Latency Test Request to the UE Instance
     */
    webRtcPlayerController.prototype.sendLatencyTest = function () {
        this.latencyStartTime = Date.now();
        this.ueControlMessage.sendLatencyTest(this.latencyStartTime);
    };
    /**
     * Send the Encoder Settings to the UE Instance as a UE UI Descriptor.
     * @param encoder - Encoder Settings
     */
    webRtcPlayerController.prototype.sendEncoderSettings = function (encoder) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "----   Encoder Settings    ----\n" + JSON.stringify(encoder, undefined, 4) + "\n-------------------------------", 6);
        if (encoder.RateControl != null) {
            this.ueDescriptorUi.sendEncoderRateControl(encoder.RateControl);
        }
        if (encoder.TargetBitrate != null) {
            this.ueDescriptorUi.sendEncoderTargetBitRate(encoder.TargetBitrate);
        }
        if (encoder.MaxBitrate != null) {
            this.ueDescriptorUi.sendEncoderMaxBitrateVbr(encoder.MaxBitrate);
        }
        if (encoder.MinQP != null) {
            this.ueDescriptorUi.sendEncoderMinQP(encoder.MinQP);
        }
        if (encoder.MaxQP != null) {
            this.ueDescriptorUi.sendEncoderMaxQP(encoder.MaxQP);
        }
        if (encoder.FillerData != null) {
            this.ueDescriptorUi.sendEncoderEnableFillerData(encoder.FillerData);
        }
        if (encoder.MultiPass != null) {
            this.ueDescriptorUi.sendEncoderMultiPass(encoder.MultiPass);
        }
    };
    /**
     * Send the WebRTC Settings to the UE Instance as a UE UI Descriptor.
     * @param webRTC - Web RTC Settings
     */
    webRtcPlayerController.prototype.sendWebRtcSettings = function (webRTC) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "----   WebRTC Settings    ----\n" + JSON.stringify(webRTC, undefined, 4) + "\n-------------------------------", 6);
        if (webRTC.DegradationPref != null) {
            this.ueDescriptorUi.sendWebRtcDegradationPreference(webRTC.DegradationPref);
        }
        if (webRTC.FPS != null) {
            this.ueDescriptorUi.sendWebRtcFps(webRTC.FPS);
            this.ueDescriptorUi.sendWebRtcMaxFps(webRTC.FPS);
        }
        if (webRTC.MinBitrate != null) {
            this.ueDescriptorUi.sendWebRtcMinBitrate(webRTC.MinBitrate);
        }
        if (webRTC.MaxBitrate != null) {
            this.ueDescriptorUi.sendWebRtcMaxBitrate(webRTC.MaxBitrate);
        }
        if (webRTC.LowQP != null) {
            this.ueDescriptorUi.sendWebRtcLowQpThreshold(webRTC.LowQP);
        }
        if (webRTC.HighQP != null) {
            this.ueDescriptorUi.sendWebRtcHighQpThreshold(webRTC.HighQP);
        }
    };
    /**
     * Send Aggregated Stats to the Signaling Server
     * @param stats - Aggregated Stats
     */
    webRtcPlayerController.prototype.sendStatsToSignallingServer = function (stats) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "----   Sending Aggregated Stats to Signaling Server   ----\n" + JSON.stringify(stats, undefined, 4) + "\n-----------------------------------------------------------", 6);
        this.webSocketController.sendStats(stats);
    };
    /**
     * Sends a UI Interaction Descriptor to the UE Instance
     * @param message - String to send to the UE Instance
     */
    webRtcPlayerController.prototype.sendUeUiDescriptor = function (message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "----   UE UI Interaction String   ----\n" + JSON.stringify(message, undefined, 4) + "\n---------------------------------------", 6);
        this.ueDescriptorUi.sendUiInteraction(message);
    };
    /**
     * Sends the UI Descriptor `stat fps` to the UE Instance
     */
    webRtcPlayerController.prototype.sendShowFps = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "----   Sending show stat to UE   ----", 6);
        this.ueDescriptorUi.sendShowFps();
    };
    /**
     * Sends a request to the UE Instance to have ownership of Quality
     */
    webRtcPlayerController.prototype.sendRequestQualityControlOwnership = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "----   Sending Request to Control Quality  ----", 6);
        this.ueControlMessage.SendRequestQualityControl();
    };
    /**
     * Handles when a Latency Test Result are received from the UE Instance
     * @param latencyTimings - Latency Test Timings
     */
    webRtcPlayerController.prototype.handleLatencyTestResult = function (latencyTimings) {
        latencyTimings.testStartTimeMs = this.latencyStartTime;
        latencyTimings.browserReceiptTimeMs = Date.now();
        latencyTimings.latencyExcludingDecode = ~~(latencyTimings.browserReceiptTimeMs - latencyTimings.testStartTimeMs);
        latencyTimings.testDuration = ~~(latencyTimings.TransmissionTimeMs - latencyTimings.ReceiptTimeMs);
        latencyTimings.networkLatency = ~~(latencyTimings.latencyExcludingDecode - latencyTimings.testDuration);
        if (latencyTimings.frameDisplayDeltaTimeMs && latencyTimings.browserReceiptTimeMs) {
            latencyTimings.endToEndLatency = ~~(latencyTimings.frameDisplayDeltaTimeMs + latencyTimings.networkLatency, +latencyTimings.CaptureToSendMs);
        }
        this.delegate.onLatencyTestResult(latencyTimings);
    };
    /**
     * Handles when the Encoder and Web RTC Settings are received from the UE Instance
     * @param settings - Initial Encoder and Web RTC Settings
     */
    webRtcPlayerController.prototype.handleInitialSettings = function (settings) {
        this.delegate.onInitialSettings(settings);
    };
    /**
     * Handles when the Quantization Parameter are received from the UE Instance
     * @param AvgQP - Encoders Quantization Parameter
     */
    webRtcPlayerController.prototype.handleVideoEncoderAvgQP = function (AvgQP) {
        this.delegate.onVideoEncoderAvgQP(AvgQP);
    };
    /**
     * Flag set if the user has Quality Ownership
     * @param hasQualityOwnership - Does the current client have Quality Ownership
     */
    webRtcPlayerController.prototype.handleQualityControlOwnership = function (hasQualityOwnership) {
        this.delegate.onQualityControlOwnership(hasQualityOwnership);
    };
    /**
     * Handles when the Aggregated stats are Collected
     * @param stats - Aggregated Stats
     */
    webRtcPlayerController.prototype.handleVideoStats = function (stats) {
        this.delegate.onVideoStats(stats);
    };
    /**
    * To Resize the Video Player element
    */
    webRtcPlayerController.prototype.resizePlayerStyle = function () {
        this.uiController.resizePlayerStyle();
    };
    /**
     * Get the overridden disconnect message
     */
    webRtcPlayerController.prototype.getDisconnectMessageOverride = function () {
        return this.disconnectMessageOverride;
    };
    /**
     * Set the override for the disconnect message
     */
    webRtcPlayerController.prototype.setDisconnectMessageOverride = function (message) {
        this.disconnectMessageOverride = message;
    };
    return webRtcPlayerController;
}());



/***/ }),

/***/ "./src/WebSockets/MessageReceive.ts":
/*!******************************************!*\
  !*** ./src/WebSockets/MessageReceive.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_235634__) => {

__nested_webpack_require_235634__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_235634__.d(__webpack_exports__, {
/* harmony export */   "InstanceState": () => (/* binding */ InstanceState),
/* harmony export */   "MessageAnswer": () => (/* binding */ MessageAnswer),
/* harmony export */   "MessageAuthRequired": () => (/* binding */ MessageAuthRequired),
/* harmony export */   "MessageAuthResponse": () => (/* binding */ MessageAuthResponse),
/* harmony export */   "MessageAuthResponseOutcomeType": () => (/* binding */ MessageAuthResponseOutcomeType),
/* harmony export */   "MessageConfig": () => (/* binding */ MessageConfig),
/* harmony export */   "MessageIceCandidate": () => (/* binding */ MessageIceCandidate),
/* harmony export */   "MessageInstanceState": () => (/* binding */ MessageInstanceState),
/* harmony export */   "MessagePlayerCount": () => (/* binding */ MessagePlayerCount),
/* harmony export */   "MessageRecv": () => (/* binding */ MessageRecv),
/* harmony export */   "MessageRecvTypes": () => (/* binding */ MessageRecvTypes)
/* harmony export */ });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * The Types of Messages that will be received
 */
var MessageRecvTypes;
(function (MessageRecvTypes) {
    MessageRecvTypes["AUTHENTICATION_REQUIRED"] = "authenticationRequired";
    MessageRecvTypes["AUTHENTICATION_RESPONSE"] = "authenticationResponse";
    MessageRecvTypes["INSTANCE_STATE"] = "instanceState";
    MessageRecvTypes["CONFIG"] = "config";
    MessageRecvTypes["PLAYER_COUNT"] = "playerCount";
    MessageRecvTypes["ANSWER"] = "answer";
    MessageRecvTypes["ICE_CANDIDATE"] = "iceCandidate";
    MessageRecvTypes["PING"] = "ping";
})(MessageRecvTypes || (MessageRecvTypes = {}));
/**
 * Types of Authentication reposes
 */
var MessageAuthResponseOutcomeType;
(function (MessageAuthResponseOutcomeType) {
    MessageAuthResponseOutcomeType["REDIRECT"] = "REDIRECT";
    MessageAuthResponseOutcomeType["INVALID_TOKEN"] = "INVALID_TOKEN";
    MessageAuthResponseOutcomeType["AUTHENTICATED"] = "AUTHENTICATED";
    MessageAuthResponseOutcomeType["ERROR"] = "ERROR";
})(MessageAuthResponseOutcomeType || (MessageAuthResponseOutcomeType = {}));
/**
 * States of the UE Instance
 */
var InstanceState;
(function (InstanceState) {
    InstanceState["UNALLOCATED"] = "UNALLOCATED";
    InstanceState["PENDING"] = "PENDING";
    InstanceState["FAILED"] = "FAILED";
    InstanceState["READY"] = "READY";
})(InstanceState || (InstanceState = {}));
/**
 * Concrete Received Message wrapper
 */
var MessageRecv = /** @class */ (function () {
    function MessageRecv() {
    }
    return MessageRecv;
}());

/**
 * Authentication Required Message wrapper
 */
var MessageAuthRequired = /** @class */ (function (_super) {
    __extends(MessageAuthRequired, _super);
    function MessageAuthRequired() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageAuthRequired;
}(MessageRecv));

/**
 * Authentication Response Message wrapper
 */
var MessageAuthResponse = /** @class */ (function (_super) {
    __extends(MessageAuthResponse, _super);
    function MessageAuthResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageAuthResponse;
}(MessageRecv));

/**
 * Instance State Message wrapper
 */
var MessageInstanceState = /** @class */ (function (_super) {
    __extends(MessageInstanceState, _super);
    function MessageInstanceState() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageInstanceState;
}(MessageRecv));

/**
 * Config Message Wrapper
 */
var MessageConfig = /** @class */ (function (_super) {
    __extends(MessageConfig, _super);
    function MessageConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageConfig;
}(MessageRecv));

/**
 * Player Count Message wrapper
 */
var MessagePlayerCount = /** @class */ (function (_super) {
    __extends(MessagePlayerCount, _super);
    function MessagePlayerCount() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessagePlayerCount;
}(MessageRecv));

/**
 * Web RTC offer Answer Message wrapper
 */
var MessageAnswer = /** @class */ (function (_super) {
    __extends(MessageAnswer, _super);
    function MessageAnswer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageAnswer;
}(MessageRecv));

/**
 * Ice Candidate Message wrapper
 */
var MessageIceCandidate = /** @class */ (function (_super) {
    __extends(MessageIceCandidate, _super);
    function MessageIceCandidate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageIceCandidate;
}(MessageRecv));



/***/ }),

/***/ "./src/WebSockets/MessageSend.ts":
/*!***************************************!*\
  !*** ./src/WebSockets/MessageSend.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_241425__) => {

__nested_webpack_require_241425__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_241425__.d(__webpack_exports__, {
/* harmony export */   "MessageAuthRequest": () => (/* binding */ MessageAuthRequest),
/* harmony export */   "MessageIceCandidate": () => (/* binding */ MessageIceCandidate),
/* harmony export */   "MessagePong": () => (/* binding */ MessagePong),
/* harmony export */   "MessageRequestInstance": () => (/* binding */ MessageRequestInstance),
/* harmony export */   "MessageSend": () => (/* binding */ MessageSend),
/* harmony export */   "MessageSendTypes": () => (/* binding */ MessageSendTypes),
/* harmony export */   "MessageStats": () => (/* binding */ MessageStats),
/* harmony export */   "MessageWebRTCOffer": () => (/* binding */ MessageWebRTCOffer)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_241425__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * The Send Types that are pushed from the signaling server
 */
var MessageSendTypes;
(function (MessageSendTypes) {
    MessageSendTypes["ICE_CANDIDATE"] = "iceCandidate";
    MessageSendTypes["STATS"] = "stats";
    MessageSendTypes["AUTHENTICATION_REQUEST"] = "authenticationRequest";
    MessageSendTypes["REQUEST_INSTANCE"] = "requestInstance";
    MessageSendTypes["OFFER"] = "offer";
    MessageSendTypes["PONG"] = "pong";
})(MessageSendTypes || (MessageSendTypes = {}));
/**
 * A Wrapper for the message to send to the signaling server
 */
var MessageSend = /** @class */ (function () {
    function MessageSend() {
    }
    /**
     * Turns the wrapper into a JSON String
     * @returns - JSON String of the Message to send
     */
    MessageSend.prototype.payload = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Sending => \n" + JSON.stringify(this, undefined, 4), 6);
        return JSON.stringify(this);
    };
    return MessageSend;
}());

/**
 * Auth Request Message Wrapper
 */
var MessageAuthRequest = /** @class */ (function (_super) {
    __extends(MessageAuthRequest, _super);
    /**
     * @param token - Token Provided by the Auth Provider
     * @param provider - Name of the provider that is registered in the auth plugin
     */
    function MessageAuthRequest(token, provider) {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.AUTHENTICATION_REQUEST;
        _this.token = token;
        _this.provider = provider;
        return _this;
    }
    return MessageAuthRequest;
}(MessageSend));

/**
 * Instance Request Message Wrapper
 */
var MessagePong = /** @class */ (function (_super) {
    __extends(MessagePong, _super);
    function MessagePong(time) {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.PONG;
        _this.time = time;
        return _this;
    }
    return MessagePong;
}(MessageSend));

/**
 * Instance Request Message Wrapper
 */
var MessageRequestInstance = /** @class */ (function (_super) {
    __extends(MessageRequestInstance, _super);
    function MessageRequestInstance() {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.REQUEST_INSTANCE;
        return _this;
    }
    return MessageRequestInstance;
}(MessageSend));

/**
 * Aggregated Stats Message Wrapper
 */
var MessageStats = /** @class */ (function (_super) {
    __extends(MessageStats, _super);
    /**
     * @param aggregatedStats - Aggregated Stats
     */
    function MessageStats(aggregatedStats) {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.STATS;
        _this.inboundVideoStats = aggregatedStats.inboundVideoStats;
        _this.inboundAudioStats = aggregatedStats.inboundAudioStats;
        _this.candidatePair = aggregatedStats.candidatePair;
        _this.dataChannelStats = aggregatedStats.dataChannelStats;
        _this.localCandidates = aggregatedStats.localCandidates;
        _this.remoteCandidates = aggregatedStats.remoteCandidates;
        _this.outboundVideoStats = aggregatedStats.outBoundVideoStats;
        return _this;
    }
    return MessageStats;
}(MessageSend));

/**
 *  Web RTC Offer message wrapper
 */
var MessageWebRTCOffer = /** @class */ (function (_super) {
    __extends(MessageWebRTCOffer, _super);
    /**
     * @param offer - Generated Web RTC Offer
     */
    function MessageWebRTCOffer(offer) {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.OFFER;
        if (offer) {
            _this.type = offer.type;
            _this.sdp = offer.sdp;
        }
        return _this;
    }
    return MessageWebRTCOffer;
}(MessageSend));

/**
 * RTC Ice Candidate Wrapper
 */
var MessageIceCandidate = /** @class */ (function () {
    /**
     * @param candidate - RTC Ice Candidate
     */
    function MessageIceCandidate(candidate) {
        this.type = MessageSendTypes.ICE_CANDIDATE;
        this.candidate = candidate;
    }
    /**
     * Turns the wrapper into a JSON String
     * @returns - JSON String of the Message to send
     */
    MessageIceCandidate.prototype.payload = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Sending => \n" + JSON.stringify(this, undefined, 4), 6);
        return JSON.stringify(this);
    };
    return MessageIceCandidate;
}());



/***/ }),

/***/ "./src/WebSockets/WebSocketController.ts":
/*!***********************************************!*\
  !*** ./src/WebSockets/WebSocketController.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_247966__) => {

__nested_webpack_require_247966__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_247966__.d(__webpack_exports__, {
/* harmony export */   "WebSocketController": () => (/* binding */ WebSocketController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_247966__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _MessageReceive__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_247966__(/*! ./MessageReceive */ "./src/WebSockets/MessageReceive.ts");
/* harmony import */ var _MessageSend__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_247966__(/*! ./MessageSend */ "./src/WebSockets/MessageSend.ts");



/**
 * The controller for the WebSocket and all associated methods
 */
var WebSocketController = /** @class */ (function () {
    /**
     * @param Address - The Address of the signaling server
     */
    function WebSocketController(Address) {
        this.WS_OPEN_STATE = 1;
        this.address = Address;
    }
    /**
     * Connect to the signaling server
     * @returns - If there is a connection
     */
    WebSocketController.prototype.connect = function () {
        var _this = this;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), this.address, 6);
        try {
            this.webSocket = new WebSocket(this.address);
            this.webSocket.onopen = function (event) { return _this.handleOnOpen(event); };
            this.webSocket.onerror = function (event) { return _this.handleOnError(event); };
            this.webSocket.onclose = function (event) { return _this.handleOnClose(event); };
            this.webSocket.onmessage = function (event) { return _this.handleOnMessage(event); };
            this.webSocket.onmessagebinary = function (event) { return _this.handelOnMessageBinary(event); };
            return true;
        }
        catch (error) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(error, error);
            return false;
        }
    };
    /**
     * Handles what happens when a message is received in binary form
     * @param event - Message Received
     */
    WebSocketController.prototype.handelOnMessageBinary = function (event) {
        var _this = this;
        // if the event is empty return
        if (!event || !event.data) {
            return;
        }
        // handel the binary and then handel the message
        event.data.text().then(function (messageString) {
            // build a new message
            var constructedMessage = new MessageEvent('messageFromBinary', {
                data: messageString
            });
            // send the new stringified event back into `onmessage`
            _this.handelOnMessageBinary(constructedMessage);
        }).catch(function (error) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Failed to parse binary blob from websocket, reason: " + error);
        });
    };
    /**
     * Handles what happens when a message is received
     * @param event - Message Received
     */
    WebSocketController.prototype.handleOnMessage = function (event) {
        // Check if websocket message is binary, if so, stringify it.
        if (event.data && event.data instanceof Blob) {
            this.handelOnMessageBinary(event);
            return;
        }
        var message = JSON.parse(event.data);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "received => \n" + JSON.stringify(JSON.parse(event.data), undefined, 4), 6);
        switch (message.type) {
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PING: {
                // send our pong payload back to the signalling server
                var payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessagePong(new Date().getTime()).payload();
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PING + ": " + payload, 6);
                this.webSocket.send(payload);
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.AUTHENTICATION_REQUIRED: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "AUTHENTICATION_REQUIRED", 6);
                var authenticationRequired = JSON.parse(event.data);
                var url_string = window.location.href;
                var url = new URL(url_string);
                var authRequest = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageAuthRequest(url.searchParams.get("code"), url.searchParams.get("provider"));
                this.webSocket.send(authRequest.payload());
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.AUTHENTICATION_RESPONSE: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "AUTHENTICATION_RESPONSE", 6);
                var authenticationResponse = JSON.parse(event.data);
                this.onAuthenticationResponse(authenticationResponse);
                switch (authenticationResponse.outcome) {
                    case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageAuthResponseOutcomeType.REDIRECT: {
                        window.location.href = authenticationResponse.redirect;
                        break;
                    }
                    case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageAuthResponseOutcomeType.AUTHENTICATED: {
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "User is authenticated and now requesting an instance", 6);
                        this.webSocket.send(new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageRequestInstance().payload());
                        break;
                    }
                    case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageAuthResponseOutcomeType.INVALID_TOKEN: {
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Authentication error : Invalid Token");
                        break;
                    }
                    case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageAuthResponseOutcomeType.ERROR: {
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Authentication Error from server Check what you are sending");
                        break;
                    }
                    default: {
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "The Outcome Message has not been handled : this is really bad");
                        break;
                    }
                }
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.INSTANCE_STATE: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "INSTANCE_STATE", 6);
                var instanceState = JSON.parse(event.data);
                this.onInstanceStateChange(instanceState);
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.CONFIG: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "CONFIG", 6);
                var config = JSON.parse(event.data);
                this.onConfig(config);
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PLAYER_COUNT: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "PLAYER_COUNT", 6);
                var playerCount = JSON.parse(event.data);
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Player Count: " + (playerCount.count - 1), 6);
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ANSWER: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "ANSWER", 6);
                var answer = JSON.parse(event.data);
                this.onWebRtcAnswer(answer);
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ICE_CANDIDATE: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "ICE_CANDIDATE", 6);
                var iceCandidate = JSON.parse(event.data);
                this.onIceCandidate(iceCandidate.candidate);
                break;
            }
            default: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Error Message type not Defined");
                break;
            }
        }
    };
    /**
     * Handles when the Websocket is opened
     * @param event - Not Used
     */
    WebSocketController.prototype.handleOnOpen = function (event) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Connected to the signalling server via WebSocket", 6);
    };
    /**
     * Handles when there is an error on the websocket
     * @param event - Error Payload
     */
    WebSocketController.prototype.handleOnError = function (event) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'WebSocket error: ');
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), event.toString());
    };
    /**
     * Handles when the Websocket is closed
     * @param event - Close Event
     */
    WebSocketController.prototype.handleOnClose = function (event) {
        this.onWebSocketOncloseOverlayMessage(event);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Disconnected to the signalling server via WebSocket: " + JSON.stringify(event.code) + " - " + event.reason);
        this.stopAfkWarningTimer();
    };
    /**
     * An override for stopping the afk warning timer
     */
    WebSocketController.prototype.stopAfkWarningTimer = function () { };
    WebSocketController.prototype.sendWebRtcOffer = function (offer) {
        var payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageWebRTCOffer(offer);
        this.webSocket.send(payload.payload());
    };
    /**
     * Sends an RTC Ice Candidate to the Server
     * @param candidate - RTC Ice Candidate
     */
    WebSocketController.prototype.sendIceCandidate = function (candidate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Sending Ice Candidate");
        if (this.webSocket && this.webSocket.readyState === this.WS_OPEN_STATE) {
            //ws.send(JSON.stringify({ type: 'iceCandidate', candidate: candidate }));
            var IceCandidate = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageIceCandidate(candidate);
            this.webSocket.send(IceCandidate.payload());
        }
    };
    /**
     * Closes the Websocket connection
     */
    WebSocketController.prototype.close = function () {
        this.webSocket.close();
    };
    /**
     * Sends the Aggregated Stats to the signaling server
     * @param stats - Stats Payload
     */
    WebSocketController.prototype.sendStats = function (stats) {
        var data = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageStats(stats);
        this.webSocket.send(data.payload());
    };
    /** Event used for Displaying websocket closed messages */
    WebSocketController.prototype.onWebSocketOncloseOverlayMessage = function (event) { };
    /**
     * The Message Contains the payload of the peer connection options used for the RTC Peer hand shake
     * @param messageConfig - Config Message received from he signaling server
     */
    WebSocketController.prototype.onConfig = function (messageConfig) { };
    /**
     * @param iceCandidate - Ice Candidate sent from the Signaling server server's RTC hand shake
     */
    WebSocketController.prototype.onIceCandidate = function (iceCandidate) { };
    /**
     * Event is fired when the websocket receives the answer for the RTC peer Connection
     * @param messageAnswer - The RTC Answer payload from the signaling server
     */
    WebSocketController.prototype.onWebRtcAnswer = function (messageAnswer) { };
    /**
     * Event fired with the websocket receives a instance state
     * @param instanceState - UE Instance State
     */
    WebSocketController.prototype.onInstanceStateChange = function (instanceState) { };
    /**
     * Event fired with the websocket receives a Authentication Response
     * @param authResponse - Authentication Response
     */
    WebSocketController.prototype.onAuthenticationResponse = function (authResponse) { };
    return WebSocketController;
}());

/* 524f4d4d */ 


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_262184__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_262184__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__nested_webpack_require_262184__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__nested_webpack_require_262184__.o(definition, key) && !__nested_webpack_require_262184__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__nested_webpack_require_262184__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__nested_webpack_require_262184__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__nested_webpack_require_262184__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_262184__.d(__webpack_exports__, {
/* harmony export */   "AfkLogic": () => (/* reexport safe */ _Afk_AfkLogic__WEBPACK_IMPORTED_MODULE_3__.AfkLogic),
/* harmony export */   "AggregatedStats": () => (/* reexport safe */ _PeerConnectionController_AggregatedStats__WEBPACK_IMPORTED_MODULE_6__.AggregatedStats),
/* harmony export */   "Config": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_1__.Config),
/* harmony export */   "ControlSchemeType": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_1__.ControlSchemeType),
/* harmony export */   "DelegateBase": () => (/* reexport safe */ _Delegate_DelegateBase__WEBPACK_IMPORTED_MODULE_2__.DelegateBase),
/* harmony export */   "Encoder": () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_5__.Encoder),
/* harmony export */   "InitialSettings": () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_5__.InitialSettings),
/* harmony export */   "InstanceState": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_7__.InstanceState),
/* harmony export */   "LatencyTestResults": () => (/* reexport safe */ _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_4__.LatencyTestResults),
/* harmony export */   "Logger": () => (/* reexport safe */ _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__.Logger),
/* harmony export */   "MessageAuthResponse": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_7__.MessageAuthResponse),
/* harmony export */   "MessageAuthResponseOutcomeType": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_7__.MessageAuthResponseOutcomeType),
/* harmony export */   "MessageInstanceState": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_7__.MessageInstanceState),
/* harmony export */   "WebRTC": () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_5__.WebRTC),
/* harmony export */   "version": () => (/* binding */ version),
/* harmony export */   "webRtcPlayerController": () => (/* reexport safe */ _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_0__.webRtcPlayerController)
/* harmony export */ });
/* harmony import */ var _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_262184__(/*! ./WebRtcPlayer/WebRtcPlayerController */ "./src/WebRtcPlayer/WebRtcPlayerController.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_262184__(/*! ./Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Delegate_DelegateBase__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_262184__(/*! ./Delegate/DelegateBase */ "./src/Delegate/DelegateBase.ts");
/* harmony import */ var _Afk_AfkLogic__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_262184__(/*! ./Afk/AfkLogic */ "./src/Afk/AfkLogic.ts");
/* harmony import */ var _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_262184__(/*! ./DataChannel/LatencyTestResults */ "./src/DataChannel/LatencyTestResults.ts");
/* harmony import */ var _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_262184__(/*! ./DataChannel/InitialSettings */ "./src/DataChannel/InitialSettings.ts");
/* harmony import */ var _PeerConnectionController_AggregatedStats__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_262184__(/*! ./PeerConnectionController/AggregatedStats */ "./src/PeerConnectionController/AggregatedStats.ts");
/* harmony import */ var _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_262184__(/*! ./WebSockets/MessageReceive */ "./src/WebSockets/MessageReceive.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_262184__(/*! ./Logger/Logger */ "./src/Logger/Logger.ts");









var version = "0.1.4";

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./node_modules/bootstrap/dist/js/bootstrap.js":
/*!*****************************************************!*\
  !*** ./node_modules/bootstrap/dist/js/bootstrap.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/*!
  * Bootstrap v5.1.0 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
(function (global, factory) {
   true ? module.exports = factory(__webpack_require__(/*! @popperjs/core */ "./node_modules/@popperjs/core/dist/umd/popper.js")) :
  0;
}(this, (function (Popper) { 'use strict';

  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () {
              return e[k];
            }
          });
        }
      });
    }
    n['default'] = e;
    return Object.freeze(n);
  }

  var Popper__namespace = /*#__PURE__*/_interopNamespace(Popper);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): util/index.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  const MAX_UID = 1000000;
  const MILLISECONDS_MULTIPLIER = 1000;
  const TRANSITION_END = 'transitionend'; // Shoutout AngusCroll (https://goo.gl/pxwQGp)

  const toType = obj => {
    if (obj === null || obj === undefined) {
      return `${obj}`;
    }

    return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
  };
  /**
   * --------------------------------------------------------------------------
   * Public Util Api
   * --------------------------------------------------------------------------
   */


  const getUID = prefix => {
    do {
      prefix += Math.floor(Math.random() * MAX_UID);
    } while (document.getElementById(prefix));

    return prefix;
  };

  const getSelector = element => {
    let selector = element.getAttribute('data-bs-target');

    if (!selector || selector === '#') {
      let hrefAttr = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,
      // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
      // `document.querySelector` will rightfully complain it is invalid.
      // See https://github.com/twbs/bootstrap/issues/32273

      if (!hrefAttr || !hrefAttr.includes('#') && !hrefAttr.startsWith('.')) {
        return null;
      } // Just in case some CMS puts out a full URL with the anchor appended


      if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) {
        hrefAttr = `#${hrefAttr.split('#')[1]}`;
      }

      selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null;
    }

    return selector;
  };

  const getSelectorFromElement = element => {
    const selector = getSelector(element);

    if (selector) {
      return document.querySelector(selector) ? selector : null;
    }

    return null;
  };

  const getElementFromSelector = element => {
    const selector = getSelector(element);
    return selector ? document.querySelector(selector) : null;
  };

  const getTransitionDurationFromElement = element => {
    if (!element) {
      return 0;
    } // Get transition-duration of the element


    let {
      transitionDuration,
      transitionDelay
    } = window.getComputedStyle(element);
    const floatTransitionDuration = Number.parseFloat(transitionDuration);
    const floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

    if (!floatTransitionDuration && !floatTransitionDelay) {
      return 0;
    } // If multiple durations are defined, take the first


    transitionDuration = transitionDuration.split(',')[0];
    transitionDelay = transitionDelay.split(',')[0];
    return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
  };

  const triggerTransitionEnd = element => {
    element.dispatchEvent(new Event(TRANSITION_END));
  };

  const isElement = obj => {
    if (!obj || typeof obj !== 'object') {
      return false;
    }

    if (typeof obj.jquery !== 'undefined') {
      obj = obj[0];
    }

    return typeof obj.nodeType !== 'undefined';
  };

  const getElement = obj => {
    if (isElement(obj)) {
      // it's a jQuery object or a node element
      return obj.jquery ? obj[0] : obj;
    }

    if (typeof obj === 'string' && obj.length > 0) {
      return document.querySelector(obj);
    }

    return null;
  };

  const typeCheckConfig = (componentName, config, configTypes) => {
    Object.keys(configTypes).forEach(property => {
      const expectedTypes = configTypes[property];
      const value = config[property];
      const valueType = value && isElement(value) ? 'element' : toType(value);

      if (!new RegExp(expectedTypes).test(valueType)) {
        throw new TypeError(`${componentName.toUpperCase()}: Option "${property}" provided type "${valueType}" but expected type "${expectedTypes}".`);
      }
    });
  };

  const isVisible = element => {
    if (!isElement(element) || element.getClientRects().length === 0) {
      return false;
    }

    return getComputedStyle(element).getPropertyValue('visibility') === 'visible';
  };

  const isDisabled = element => {
    if (!element || element.nodeType !== Node.ELEMENT_NODE) {
      return true;
    }

    if (element.classList.contains('disabled')) {
      return true;
    }

    if (typeof element.disabled !== 'undefined') {
      return element.disabled;
    }

    return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';
  };

  const findShadowRoot = element => {
    if (!document.documentElement.attachShadow) {
      return null;
    } // Can find the shadow root otherwise it'll return the document


    if (typeof element.getRootNode === 'function') {
      const root = element.getRootNode();
      return root instanceof ShadowRoot ? root : null;
    }

    if (element instanceof ShadowRoot) {
      return element;
    } // when we don't find a shadow root


    if (!element.parentNode) {
      return null;
    }

    return findShadowRoot(element.parentNode);
  };

  const noop = () => {};
  /**
   * Trick to restart an element's animation
   *
   * @param {HTMLElement} element
   * @return void
   *
   * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation
   */


  const reflow = element => {
    // eslint-disable-next-line no-unused-expressions
    element.offsetHeight;
  };

  const getjQuery = () => {
    const {
      jQuery
    } = window;

    if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
      return jQuery;
    }

    return null;
  };

  const DOMContentLoadedCallbacks = [];

  const onDOMContentLoaded = callback => {
    if (document.readyState === 'loading') {
      // add listener on the first call when the document is in loading state
      if (!DOMContentLoadedCallbacks.length) {
        document.addEventListener('DOMContentLoaded', () => {
          DOMContentLoadedCallbacks.forEach(callback => callback());
        });
      }

      DOMContentLoadedCallbacks.push(callback);
    } else {
      callback();
    }
  };

  const isRTL = () => document.documentElement.dir === 'rtl';

  const defineJQueryPlugin = plugin => {
    onDOMContentLoaded(() => {
      const $ = getjQuery();
      /* istanbul ignore if */

      if ($) {
        const name = plugin.NAME;
        const JQUERY_NO_CONFLICT = $.fn[name];
        $.fn[name] = plugin.jQueryInterface;
        $.fn[name].Constructor = plugin;

        $.fn[name].noConflict = () => {
          $.fn[name] = JQUERY_NO_CONFLICT;
          return plugin.jQueryInterface;
        };
      }
    });
  };

  const execute = callback => {
    if (typeof callback === 'function') {
      callback();
    }
  };

  const executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {
    if (!waitForTransition) {
      execute(callback);
      return;
    }

    const durationPadding = 5;
    const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
    let called = false;

    const handler = ({
      target
    }) => {
      if (target !== transitionElement) {
        return;
      }

      called = true;
      transitionElement.removeEventListener(TRANSITION_END, handler);
      execute(callback);
    };

    transitionElement.addEventListener(TRANSITION_END, handler);
    setTimeout(() => {
      if (!called) {
        triggerTransitionEnd(transitionElement);
      }
    }, emulatedDuration);
  };
  /**
   * Return the previous/next element of a list.
   *
   * @param {array} list    The list of elements
   * @param activeElement   The active element
   * @param shouldGetNext   Choose to get next or previous element
   * @param isCycleAllowed
   * @return {Element|elem} The proper element
   */


  const getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {
    let index = list.indexOf(activeElement); // if the element does not exist in the list return an element depending on the direction and if cycle is allowed

    if (index === -1) {
      return list[!shouldGetNext && isCycleAllowed ? list.length - 1 : 0];
    }

    const listLength = list.length;
    index += shouldGetNext ? 1 : -1;

    if (isCycleAllowed) {
      index = (index + listLength) % listLength;
    }

    return list[Math.max(0, Math.min(index, listLength - 1))];
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): dom/event-handler.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  const namespaceRegex = /[^.]*(?=\..*)\.|.*/;
  const stripNameRegex = /\..*/;
  const stripUidRegex = /::\d+$/;
  const eventRegistry = {}; // Events storage

  let uidEvent = 1;
  const customEvents = {
    mouseenter: 'mouseover',
    mouseleave: 'mouseout'
  };
  const customEventsRegex = /^(mouseenter|mouseleave)/i;
  const nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);
  /**
   * ------------------------------------------------------------------------
   * Private methods
   * ------------------------------------------------------------------------
   */

  function getUidEvent(element, uid) {
    return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;
  }

  function getEvent(element) {
    const uid = getUidEvent(element);
    element.uidEvent = uid;
    eventRegistry[uid] = eventRegistry[uid] || {};
    return eventRegistry[uid];
  }

  function bootstrapHandler(element, fn) {
    return function handler(event) {
      event.delegateTarget = element;

      if (handler.oneOff) {
        EventHandler.off(element, event.type, fn);
      }

      return fn.apply(element, [event]);
    };
  }

  function bootstrapDelegationHandler(element, selector, fn) {
    return function handler(event) {
      const domElements = element.querySelectorAll(selector);

      for (let {
        target
      } = event; target && target !== this; target = target.parentNode) {
        for (let i = domElements.length; i--;) {
          if (domElements[i] === target) {
            event.delegateTarget = target;

            if (handler.oneOff) {
              // eslint-disable-next-line unicorn/consistent-destructuring
              EventHandler.off(element, event.type, selector, fn);
            }

            return fn.apply(target, [event]);
          }
        }
      } // To please ESLint


      return null;
    };
  }

  function findHandler(events, handler, delegationSelector = null) {
    const uidEventList = Object.keys(events);

    for (let i = 0, len = uidEventList.length; i < len; i++) {
      const event = events[uidEventList[i]];

      if (event.originalHandler === handler && event.delegationSelector === delegationSelector) {
        return event;
      }
    }

    return null;
  }

  function normalizeParams(originalTypeEvent, handler, delegationFn) {
    const delegation = typeof handler === 'string';
    const originalHandler = delegation ? delegationFn : handler;
    let typeEvent = getTypeEvent(originalTypeEvent);
    const isNative = nativeEvents.has(typeEvent);

    if (!isNative) {
      typeEvent = originalTypeEvent;
    }

    return [delegation, originalHandler, typeEvent];
  }

  function addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {
    if (typeof originalTypeEvent !== 'string' || !element) {
      return;
    }

    if (!handler) {
      handler = delegationFn;
      delegationFn = null;
    } // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position
    // this prevents the handler from being dispatched the same way as mouseover or mouseout does


    if (customEventsRegex.test(originalTypeEvent)) {
      const wrapFn = fn => {
        return function (event) {
          if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {
            return fn.call(this, event);
          }
        };
      };

      if (delegationFn) {
        delegationFn = wrapFn(delegationFn);
      } else {
        handler = wrapFn(handler);
      }
    }

    const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);
    const events = getEvent(element);
    const handlers = events[typeEvent] || (events[typeEvent] = {});
    const previousFn = findHandler(handlers, originalHandler, delegation ? handler : null);

    if (previousFn) {
      previousFn.oneOff = previousFn.oneOff && oneOff;
      return;
    }

    const uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''));
    const fn = delegation ? bootstrapDelegationHandler(element, handler, delegationFn) : bootstrapHandler(element, handler);
    fn.delegationSelector = delegation ? handler : null;
    fn.originalHandler = originalHandler;
    fn.oneOff = oneOff;
    fn.uidEvent = uid;
    handlers[uid] = fn;
    element.addEventListener(typeEvent, fn, delegation);
  }

  function removeHandler(element, events, typeEvent, handler, delegationSelector) {
    const fn = findHandler(events[typeEvent], handler, delegationSelector);

    if (!fn) {
      return;
    }

    element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));
    delete events[typeEvent][fn.uidEvent];
  }

  function removeNamespacedHandlers(element, events, typeEvent, namespace) {
    const storeElementEvent = events[typeEvent] || {};
    Object.keys(storeElementEvent).forEach(handlerKey => {
      if (handlerKey.includes(namespace)) {
        const event = storeElementEvent[handlerKey];
        removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);
      }
    });
  }

  function getTypeEvent(event) {
    // allow to get the native events from namespaced events ('click.bs.button' --> 'click')
    event = event.replace(stripNameRegex, '');
    return customEvents[event] || event;
  }

  const EventHandler = {
    on(element, event, handler, delegationFn) {
      addHandler(element, event, handler, delegationFn, false);
    },

    one(element, event, handler, delegationFn) {
      addHandler(element, event, handler, delegationFn, true);
    },

    off(element, originalTypeEvent, handler, delegationFn) {
      if (typeof originalTypeEvent !== 'string' || !element) {
        return;
      }

      const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);
      const inNamespace = typeEvent !== originalTypeEvent;
      const events = getEvent(element);
      const isNamespace = originalTypeEvent.startsWith('.');

      if (typeof originalHandler !== 'undefined') {
        // Simplest case: handler is passed, remove that listener ONLY.
        if (!events || !events[typeEvent]) {
          return;
        }

        removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null);
        return;
      }

      if (isNamespace) {
        Object.keys(events).forEach(elementEvent => {
          removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
        });
      }

      const storeElementEvent = events[typeEvent] || {};
      Object.keys(storeElementEvent).forEach(keyHandlers => {
        const handlerKey = keyHandlers.replace(stripUidRegex, '');

        if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
          const event = storeElementEvent[keyHandlers];
          removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);
        }
      });
    },

    trigger(element, event, args) {
      if (typeof event !== 'string' || !element) {
        return null;
      }

      const $ = getjQuery();
      const typeEvent = getTypeEvent(event);
      const inNamespace = event !== typeEvent;
      const isNative = nativeEvents.has(typeEvent);
      let jQueryEvent;
      let bubbles = true;
      let nativeDispatch = true;
      let defaultPrevented = false;
      let evt = null;

      if (inNamespace && $) {
        jQueryEvent = $.Event(event, args);
        $(element).trigger(jQueryEvent);
        bubbles = !jQueryEvent.isPropagationStopped();
        nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
        defaultPrevented = jQueryEvent.isDefaultPrevented();
      }

      if (isNative) {
        evt = document.createEvent('HTMLEvents');
        evt.initEvent(typeEvent, bubbles, true);
      } else {
        evt = new CustomEvent(event, {
          bubbles,
          cancelable: true
        });
      } // merge custom information in our event


      if (typeof args !== 'undefined') {
        Object.keys(args).forEach(key => {
          Object.defineProperty(evt, key, {
            get() {
              return args[key];
            }

          });
        });
      }

      if (defaultPrevented) {
        evt.preventDefault();
      }

      if (nativeDispatch) {
        element.dispatchEvent(evt);
      }

      if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') {
        jQueryEvent.preventDefault();
      }

      return evt;
    }

  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): dom/data.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  const elementMap = new Map();
  var Data = {
    set(element, key, instance) {
      if (!elementMap.has(element)) {
        elementMap.set(element, new Map());
      }

      const instanceMap = elementMap.get(element); // make it clear we only want one instance per element
      // can be removed later when multiple key/instances are fine to be used

      if (!instanceMap.has(key) && instanceMap.size !== 0) {
        // eslint-disable-next-line no-console
        console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);
        return;
      }

      instanceMap.set(key, instance);
    },

    get(element, key) {
      if (elementMap.has(element)) {
        return elementMap.get(element).get(key) || null;
      }

      return null;
    },

    remove(element, key) {
      if (!elementMap.has(element)) {
        return;
      }

      const instanceMap = elementMap.get(element);
      instanceMap.delete(key); // free up element references if there are no instances left for an element

      if (instanceMap.size === 0) {
        elementMap.delete(element);
      }
    }

  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): base-component.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  const VERSION = '5.1.0';

  class BaseComponent {
    constructor(element) {
      element = getElement(element);

      if (!element) {
        return;
      }

      this._element = element;
      Data.set(this._element, this.constructor.DATA_KEY, this);
    }

    dispose() {
      Data.remove(this._element, this.constructor.DATA_KEY);
      EventHandler.off(this._element, this.constructor.EVENT_KEY);
      Object.getOwnPropertyNames(this).forEach(propertyName => {
        this[propertyName] = null;
      });
    }

    _queueCallback(callback, element, isAnimated = true) {
      executeAfterTransition(callback, element, isAnimated);
    }
    /** Static */


    static getInstance(element) {
      return Data.get(getElement(element), this.DATA_KEY);
    }

    static getOrCreateInstance(element, config = {}) {
      return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null);
    }

    static get VERSION() {
      return VERSION;
    }

    static get NAME() {
      throw new Error('You have to implement the static method "NAME", for each component!');
    }

    static get DATA_KEY() {
      return `bs.${this.NAME}`;
    }

    static get EVENT_KEY() {
      return `.${this.DATA_KEY}`;
    }

  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): util/component-functions.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  const enableDismissTrigger = (component, method = 'hide') => {
    const clickEvent = `click.dismiss${component.EVENT_KEY}`;
    const name = component.NAME;
    EventHandler.on(document, clickEvent, `[data-bs-dismiss="${name}"]`, function (event) {
      if (['A', 'AREA'].includes(this.tagName)) {
        event.preventDefault();
      }

      if (isDisabled(this)) {
        return;
      }

      const target = getElementFromSelector(this) || this.closest(`.${name}`);
      const instance = component.getOrCreateInstance(target); // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method

      instance[method]();
    });
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): alert.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  const NAME$d = 'alert';
  const DATA_KEY$c = 'bs.alert';
  const EVENT_KEY$c = `.${DATA_KEY$c}`;
  const EVENT_CLOSE = `close${EVENT_KEY$c}`;
  const EVENT_CLOSED = `closed${EVENT_KEY$c}`;
  const CLASS_NAME_FADE$5 = 'fade';
  const CLASS_NAME_SHOW$8 = 'show';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  class Alert extends BaseComponent {
    // Getters
    static get NAME() {
      return NAME$d;
    } // Public


    close() {
      const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);

      if (closeEvent.defaultPrevented) {
        return;
      }

      this._element.classList.remove(CLASS_NAME_SHOW$8);

      const isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);

      this._queueCallback(() => this._destroyElement(), this._element, isAnimated);
    } // Private


    _destroyElement() {
      this._element.remove();

      EventHandler.trigger(this._element, EVENT_CLOSED);
      this.dispose();
    } // Static


    static jQueryInterface(config) {
      return this.each(function () {
        const data = Alert.getOrCreateInstance(this);

        if (typeof config !== 'string') {
          return;
        }

        if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
          throw new TypeError(`No method named "${config}"`);
        }

        data[config](this);
      });
    }

  }
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  enableDismissTrigger(Alert, 'close');
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Alert to jQuery only if jQuery is present
   */

  defineJQueryPlugin(Alert);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): button.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  const NAME$c = 'button';
  const DATA_KEY$b = 'bs.button';
  const EVENT_KEY$b = `.${DATA_KEY$b}`;
  const DATA_API_KEY$7 = '.data-api';
  const CLASS_NAME_ACTIVE$3 = 'active';
  const SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle="button"]';
  const EVENT_CLICK_DATA_API$6 = `click${EVENT_KEY$b}${DATA_API_KEY$7}`;
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  class Button extends BaseComponent {
    // Getters
    static get NAME() {
      return NAME$c;
    } // Public


    toggle() {
      // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method
      this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE$3));
    } // Static


    static jQueryInterface(config) {
      return this.each(function () {
        const data = Button.getOrCreateInstance(this);

        if (config === 'toggle') {
          data[config]();
        }
      });
    }

  }
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, event => {
    event.preventDefault();
    const button = event.target.closest(SELECTOR_DATA_TOGGLE$5);
    const data = Button.getOrCreateInstance(button);
    data.toggle();
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Button to jQuery only if jQuery is present
   */

  defineJQueryPlugin(Button);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): dom/manipulator.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  function normalizeData(val) {
    if (val === 'true') {
      return true;
    }

    if (val === 'false') {
      return false;
    }

    if (val === Number(val).toString()) {
      return Number(val);
    }

    if (val === '' || val === 'null') {
      return null;
    }

    return val;
  }

  function normalizeDataKey(key) {
    return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`);
  }

  const Manipulator = {
    setDataAttribute(element, key, value) {
      element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);
    },

    removeDataAttribute(element, key) {
      element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);
    },

    getDataAttributes(element) {
      if (!element) {
        return {};
      }

      const attributes = {};
      Object.keys(element.dataset).filter(key => key.startsWith('bs')).forEach(key => {
        let pureKey = key.replace(/^bs/, '');
        pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
        attributes[pureKey] = normalizeData(element.dataset[key]);
      });
      return attributes;
    },

    getDataAttribute(element, key) {
      return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));
    },

    offset(element) {
      const rect = element.getBoundingClientRect();
      return {
        top: rect.top + window.pageYOffset,
        left: rect.left + window.pageXOffset
      };
    },

    position(element) {
      return {
        top: element.offsetTop,
        left: element.offsetLeft
      };
    }

  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): dom/selector-engine.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  const NODE_TEXT = 3;
  const SelectorEngine = {
    find(selector, element = document.documentElement) {
      return [].concat(...Element.prototype.querySelectorAll.call(element, selector));
    },

    findOne(selector, element = document.documentElement) {
      return Element.prototype.querySelector.call(element, selector);
    },

    children(element, selector) {
      return [].concat(...element.children).filter(child => child.matches(selector));
    },

    parents(element, selector) {
      const parents = [];
      let ancestor = element.parentNode;

      while (ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== NODE_TEXT) {
        if (ancestor.matches(selector)) {
          parents.push(ancestor);
        }

        ancestor = ancestor.parentNode;
      }

      return parents;
    },

    prev(element, selector) {
      let previous = element.previousElementSibling;

      while (previous) {
        if (previous.matches(selector)) {
          return [previous];
        }

        previous = previous.previousElementSibling;
      }

      return [];
    },

    next(element, selector) {
      let next = element.nextElementSibling;

      while (next) {
        if (next.matches(selector)) {
          return [next];
        }

        next = next.nextElementSibling;
      }

      return [];
    },

    focusableChildren(element) {
      const focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable="true"]'].map(selector => `${selector}:not([tabindex^="-"])`).join(', ');
      return this.find(focusables, element).filter(el => !isDisabled(el) && isVisible(el));
    }

  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): carousel.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  const NAME$b = 'carousel';
  const DATA_KEY$a = 'bs.carousel';
  const EVENT_KEY$a = `.${DATA_KEY$a}`;
  const DATA_API_KEY$6 = '.data-api';
  const ARROW_LEFT_KEY = 'ArrowLeft';
  const ARROW_RIGHT_KEY = 'ArrowRight';
  const TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

  const SWIPE_THRESHOLD = 40;
  const Default$a = {
    interval: 5000,
    keyboard: true,
    slide: false,
    pause: 'hover',
    wrap: true,
    touch: true
  };
  const DefaultType$a = {
    interval: '(number|boolean)',
    keyboard: 'boolean',
    slide: '(boolean|string)',
    pause: '(string|boolean)',
    wrap: 'boolean',
    touch: 'boolean'
  };
  const ORDER_NEXT = 'next';
  const ORDER_PREV = 'prev';
  const DIRECTION_LEFT = 'left';
  const DIRECTION_RIGHT = 'right';
  const KEY_TO_DIRECTION = {
    [ARROW_LEFT_KEY]: DIRECTION_RIGHT,
    [ARROW_RIGHT_KEY]: DIRECTION_LEFT
  };
  const EVENT_SLIDE = `slide${EVENT_KEY$a}`;
  const EVENT_SLID = `slid${EVENT_KEY$a}`;
  const EVENT_KEYDOWN = `keydown${EVENT_KEY$a}`;
  const EVENT_MOUSEENTER = `mouseenter${EVENT_KEY$a}`;
  const EVENT_MOUSELEAVE = `mouseleave${EVENT_KEY$a}`;
  const EVENT_TOUCHSTART = `touchstart${EVENT_KEY$a}`;
  const EVENT_TOUCHMOVE = `touchmove${EVENT_KEY$a}`;
  const EVENT_TOUCHEND = `touchend${EVENT_KEY$a}`;
  const EVENT_POINTERDOWN = `pointerdown${EVENT_KEY$a}`;
  const EVENT_POINTERUP = `pointerup${EVENT_KEY$a}`;
  const EVENT_DRAG_START = `dragstart${EVENT_KEY$a}`;
  const EVENT_LOAD_DATA_API$2 = `load${EVENT_KEY$a}${DATA_API_KEY$6}`;
  const EVENT_CLICK_DATA_API$5 = `click${EVENT_KEY$a}${DATA_API_KEY$6}`;
  const CLASS_NAME_CAROUSEL = 'carousel';
  const CLASS_NAME_ACTIVE$2 = 'active';
  const CLASS_NAME_SLIDE = 'slide';
  const CLASS_NAME_END = 'carousel-item-end';
  const CLASS_NAME_START = 'carousel-item-start';
  const CLASS_NAME_NEXT = 'carousel-item-next';
  const CLASS_NAME_PREV = 'carousel-item-prev';
  const CLASS_NAME_POINTER_EVENT = 'pointer-event';
  const SELECTOR_ACTIVE$1 = '.active';
  const SELECTOR_ACTIVE_ITEM = '.active.carousel-item';
  const SELECTOR_ITEM = '.carousel-item';
  const SELECTOR_ITEM_IMG = '.carousel-item img';
  const SELECTOR_NEXT_PREV = '.carousel-item-next, .carousel-item-prev';
  const SELECTOR_INDICATORS = '.carousel-indicators';
  const SELECTOR_INDICATOR = '[data-bs-target]';
  const SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]';
  const SELECTOR_DATA_RIDE = '[data-bs-ride="carousel"]';
  const POINTER_TYPE_TOUCH = 'touch';
  const POINTER_TYPE_PEN = 'pen';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  class Carousel extends BaseComponent {
    constructor(element, config) {
      super(element);
      this._items = null;
      this._interval = null;
      this._activeElement = null;
      this._isPaused = false;
      this._isSliding = false;
      this.touchTimeout = null;
      this.touchStartX = 0;
      this.touchDeltaX = 0;
      this._config = this._getConfig(config);
      this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element);
      this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
      this._pointerEvent = Boolean(window.PointerEvent);

      this._addEventListeners();
    } // Getters


    static get Default() {
      return Default$a;
    }

    static get NAME() {
      return NAME$b;
    } // Public


    next() {
      this._slide(ORDER_NEXT);
    }

    nextWhenVisible() {
      // Don't call next when the page isn't visible
      // or the carousel or its parent isn't visible
      if (!document.hidden && isVisible(this._element)) {
        this.next();
      }
    }

    prev() {
      this._slide(ORDER_PREV);
    }

    pause(event) {
      if (!event) {
        this._isPaused = true;
      }

      if (SelectorEngine.findOne(SELECTOR_NEXT_PREV, this._element)) {
        triggerTransitionEnd(this._element);
        this.cycle(true);
      }

      clearInterval(this._interval);
      this._interval = null;
    }

    cycle(event) {
      if (!event) {
        this._isPaused = false;
      }

      if (this._interval) {
        clearInterval(this._interval);
        this._interval = null;
      }

      if (this._config && this._config.interval && !this._isPaused) {
        this._updateInterval();

        this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
      }
    }

    to(index) {
      this._activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);

      const activeIndex = this._getItemIndex(this._activeElement);

      if (index > this._items.length - 1 || index < 0) {
        return;
      }

      if (this._isSliding) {
        EventHandler.one(this._element, EVENT_SLID, () => this.to(index));
        return;
      }

      if (activeIndex === index) {
        this.pause();
        this.cycle();
        return;
      }

      const order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;

      this._slide(order, this._items[index]);
    } // Private


    _getConfig(config) {
      config = { ...Default$a,
        ...Manipulator.getDataAttributes(this._element),
        ...(typeof config === 'object' ? config : {})
      };
      typeCheckConfig(NAME$b, config, DefaultType$a);
      return config;
    }

    _handleSwipe() {
      const absDeltax = Math.abs(this.touchDeltaX);

      if (absDeltax <= SWIPE_THRESHOLD) {
        return;
      }

      const direction = absDeltax / this.touchDeltaX;
      this.touchDeltaX = 0;

      if (!direction) {
        return;
      }

      this._slide(direction > 0 ? DIRECTION_RIGHT : DIRECTION_LEFT);
    }

    _addEventListeners() {
      if (this._config.keyboard) {
        EventHandler.on(this._element, EVENT_KEYDOWN, event => this._keydown(event));
      }

      if (this._config.pause === 'hover') {
        EventHandler.on(this._element, EVENT_MOUSEENTER, event => this.pause(event));
        EventHandler.on(this._element, EVENT_MOUSELEAVE, event => this.cycle(event));
      }

      if (this._config.touch && this._touchSupported) {
        this._addTouchEventListeners();
      }
    }

    _addTouchEventListeners() {
      const start = event => {
        if (this._pointerEvent && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH)) {
          this.touchStartX = event.clientX;
        } else if (!this._pointerEvent) {
          this.touchStartX = event.touches[0].clientX;
        }
      };

      const move = event => {
        // ensure swiping with one touch and not pinching
        this.touchDeltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this.touchStartX;
      };

      const end = event => {
        if (this._pointerEvent && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH)) {
          this.touchDeltaX = event.clientX - this.touchStartX;
        }

        this._handleSwipe();

        if (this._config.pause === 'hover') {
          // If it's a touch-enabled device, mouseenter/leave are fired as
          // part of the mouse compatibility events on first tap - the carousel
          // would stop cycling until user tapped out of it;
          // here, we listen for touchend, explicitly pause the carousel
          // (as if it's the second time we tap on it, mouseenter compat event
          // is NOT fired) and after a timeout (to allow for mouse compatibility
          // events to fire) we explicitly restart cycling
          this.pause();

          if (this.touchTimeout) {
            clearTimeout(this.touchTimeout);
          }

          this.touchTimeout = setTimeout(event => this.cycle(event), TOUCHEVENT_COMPAT_WAIT + this._config.interval);
        }
      };

      SelectorEngine.find(SELECTOR_ITEM_IMG, this._element).forEach(itemImg => {
        EventHandler.on(itemImg, EVENT_DRAG_START, e => e.preventDefault());
      });

      if (this._pointerEvent) {
        EventHandler.on(this._element, EVENT_POINTERDOWN, event => start(event));
        EventHandler.on(this._element, EVENT_POINTERUP, event => end(event));

        this._element.classList.add(CLASS_NAME_POINTER_EVENT);
      } else {
        EventHandler.on(this._element, EVENT_TOUCHSTART, event => start(event));
        EventHandler.on(this._element, EVENT_TOUCHMOVE, event => move(event));
        EventHandler.on(this._element, EVENT_TOUCHEND, event => end(event));
      }
    }

    _keydown(event) {
      if (/input|textarea/i.test(event.target.tagName)) {
        return;
      }

      const direction = KEY_TO_DIRECTION[event.key];

      if (direction) {
        event.preventDefault();

        this._slide(direction);
      }
    }

    _getItemIndex(element) {
      this._items = element && element.parentNode ? SelectorEngine.find(SELECTOR_ITEM, element.parentNode) : [];
      return this._items.indexOf(element);
    }

    _getItemByOrder(order, activeElement) {
      const isNext = order === ORDER_NEXT;
      return getNextActiveElement(this._items, activeElement, isNext, this._config.wrap);
    }

    _triggerSlideEvent(relatedTarget, eventDirectionName) {
      const targetIndex = this._getItemIndex(relatedTarget);

      const fromIndex = this._getItemIndex(SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element));

      return EventHandler.trigger(this._element, EVENT_SLIDE, {
        relatedTarget,
        direction: eventDirectionName,
        from: fromIndex,
        to: targetIndex
      });
    }

    _setActiveIndicatorElement(element) {
      if (this._indicatorsElement) {
        const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE$1, this._indicatorsElement);
        activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);
        activeIndicator.removeAttribute('aria-current');
        const indicators = SelectorEngine.find(SELECTOR_INDICATOR, this._indicatorsElement);

        for (let i = 0; i < indicators.length; i++) {
          if (Number.parseInt(indicators[i].getAttribute('data-bs-slide-to'), 10) === this._getItemIndex(element)) {
            indicators[i].classList.add(CLASS_NAME_ACTIVE$2);
            indicators[i].setAttribute('aria-current', 'true');
            break;
          }
        }
      }
    }

    _updateInterval() {
      const element = this._activeElement || SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);

      if (!element) {
        return;
      }

      const elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10);

      if (elementInterval) {
        this._config.defaultInterval = this._config.defaultInterval || this._config.interval;
        this._config.interval = elementInterval;
      } else {
        this._config.interval = this._config.defaultInterval || this._config.interval;
      }
    }

    _slide(directionOrOrder, element) {
      const order = this._directionToOrder(directionOrOrder);

      const activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);

      const activeElementIndex = this._getItemIndex(activeElement);

      const nextElement = element || this._getItemByOrder(order, activeElement);

      const nextElementIndex = this._getItemIndex(nextElement);

      const isCycling = Boolean(this._interval);
      const isNext = order === ORDER_NEXT;
      const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;
      const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;

      const eventDirectionName = this._orderToDirection(order);

      if (nextElement && nextElement.classList.contains(CLASS_NAME_ACTIVE$2)) {
        this._isSliding = false;
        return;
      }

      if (this._isSliding) {
        return;
      }

      const slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);

      if (slideEvent.defaultPrevented) {
        return;
      }

      if (!activeElement || !nextElement) {
        // Some weirdness is happening, so we bail
        return;
      }

      this._isSliding = true;

      if (isCycling) {
        this.pause();
      }

      this._setActiveIndicatorElement(nextElement);

      this._activeElement = nextElement;

      const triggerSlidEvent = () => {
        EventHandler.trigger(this._element, EVENT_SLID, {
          relatedTarget: nextElement,
          direction: eventDirectionName,
          from: activeElementIndex,
          to: nextElementIndex
        });
      };

      if (this._element.classList.contains(CLASS_NAME_SLIDE)) {
        nextElement.classList.add(orderClassName);
        reflow(nextElement);
        activeElement.classList.add(directionalClassName);
        nextElement.classList.add(directionalClassName);

        const completeCallBack = () => {
          nextElement.classList.remove(directionalClassName, orderClassName);
          nextElement.classList.add(CLASS_NAME_ACTIVE$2);
          activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);
          this._isSliding = false;
          setTimeout(triggerSlidEvent, 0);
        };

        this._queueCallback(completeCallBack, activeElement, true);
      } else {
        activeElement.classList.remove(CLASS_NAME_ACTIVE$2);
        nextElement.classList.add(CLASS_NAME_ACTIVE$2);
        this._isSliding = false;
        triggerSlidEvent();
      }

      if (isCycling) {
        this.cycle();
      }
    }

    _directionToOrder(direction) {
      if (![DIRECTION_RIGHT, DIRECTION_LEFT].includes(direction)) {
        return direction;
      }

      if (isRTL()) {
        return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;
      }

      return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;
    }

    _orderToDirection(order) {
      if (![ORDER_NEXT, ORDER_PREV].includes(order)) {
        return order;
      }

      if (isRTL()) {
        return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;
      }

      return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;
    } // Static


    static carouselInterface(element, config) {
      const data = Carousel.getOrCreateInstance(element, config);
      let {
        _config
      } = data;

      if (typeof config === 'object') {
        _config = { ..._config,
          ...config
        };
      }

      const action = typeof config === 'string' ? config : _config.slide;

      if (typeof config === 'number') {
        data.to(config);
      } else if (typeof action === 'string') {
        if (typeof data[action] === 'undefined') {
          throw new TypeError(`No method named "${action}"`);
        }

        data[action]();
      } else if (_config.interval && _config.ride) {
        data.pause();
        data.cycle();
      }
    }

    static jQueryInterface(config) {
      return this.each(function () {
        Carousel.carouselInterface(this, config);
      });
    }

    static dataApiClickHandler(event) {
      const target = getElementFromSelector(this);

      if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {
        return;
      }

      const config = { ...Manipulator.getDataAttributes(target),
        ...Manipulator.getDataAttributes(this)
      };
      const slideIndex = this.getAttribute('data-bs-slide-to');

      if (slideIndex) {
        config.interval = false;
      }

      Carousel.carouselInterface(target, config);

      if (slideIndex) {
        Carousel.getInstance(target).to(slideIndex);
      }

      event.preventDefault();
    }

  }
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, Carousel.dataApiClickHandler);
  EventHandler.on(window, EVENT_LOAD_DATA_API$2, () => {
    const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);

    for (let i = 0, len = carousels.length; i < len; i++) {
      Carousel.carouselInterface(carousels[i], Carousel.getInstance(carousels[i]));
    }
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Carousel to jQuery only if jQuery is present
   */

  defineJQueryPlugin(Carousel);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): collapse.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  const NAME$a = 'collapse';
  const DATA_KEY$9 = 'bs.collapse';
  const EVENT_KEY$9 = `.${DATA_KEY$9}`;
  const DATA_API_KEY$5 = '.data-api';
  const Default$9 = {
    toggle: true,
    parent: null
  };
  const DefaultType$9 = {
    toggle: 'boolean',
    parent: '(null|element)'
  };
  const EVENT_SHOW$5 = `show${EVENT_KEY$9}`;
  const EVENT_SHOWN$5 = `shown${EVENT_KEY$9}`;
  const EVENT_HIDE$5 = `hide${EVENT_KEY$9}`;
  const EVENT_HIDDEN$5 = `hidden${EVENT_KEY$9}`;
  const EVENT_CLICK_DATA_API$4 = `click${EVENT_KEY$9}${DATA_API_KEY$5}`;
  const CLASS_NAME_SHOW$7 = 'show';
  const CLASS_NAME_COLLAPSE = 'collapse';
  const CLASS_NAME_COLLAPSING = 'collapsing';
  const CLASS_NAME_COLLAPSED = 'collapsed';
  const CLASS_NAME_HORIZONTAL = 'collapse-horizontal';
  const WIDTH = 'width';
  const HEIGHT = 'height';
  const SELECTOR_ACTIVES = '.show, .collapsing';
  const SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle="collapse"]';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  class Collapse extends BaseComponent {
    constructor(element, config) {
      super(element);
      this._isTransitioning = false;
      this._config = this._getConfig(config);
      this._triggerArray = [];
      const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);

      for (let i = 0, len = toggleList.length; i < len; i++) {
        const elem = toggleList[i];
        const selector = getSelectorFromElement(elem);
        const filterElement = SelectorEngine.find(selector).filter(foundElem => foundElem === this._element);

        if (selector !== null && filterElement.length) {
          this._selector = selector;

          this._triggerArray.push(elem);
        }
      }

      this._initializeChildren();

      if (!this._config.parent) {
        this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());
      }

      if (this._config.toggle) {
        this.toggle();
      }
    } // Getters


    static get Default() {
      return Default$9;
    }

    static get NAME() {
      return NAME$a;
    } // Public


    toggle() {
      if (this._isShown()) {
        this.hide();
      } else {
        this.show();
      }
    }

    show() {
      if (this._isTransitioning || this._isShown()) {
        return;
      }

      let actives = [];
      let activesData;

      if (this._config.parent) {
        const children = SelectorEngine.find(`.${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`, this._config.parent);
        actives = SelectorEngine.find(SELECTOR_ACTIVES, this._config.parent).filter(elem => !children.includes(elem)); // remove children if greater depth
      }

      const container = SelectorEngine.findOne(this._selector);

      if (actives.length) {
        const tempActiveData = actives.find(elem => container !== elem);
        activesData = tempActiveData ? Collapse.getInstance(tempActiveData) : null;

        if (activesData && activesData._isTransitioning) {
          return;
        }
      }

      const startEvent = EventHandler.trigger(this._element, EVENT_SHOW$5);

      if (startEvent.defaultPrevented) {
        return;
      }

      actives.forEach(elemActive => {
        if (container !== elemActive) {
          Collapse.getOrCreateInstance(elemActive, {
            toggle: false
          }).hide();
        }

        if (!activesData) {
          Data.set(elemActive, DATA_KEY$9, null);
        }
      });

      const dimension = this._getDimension();

      this._element.classList.remove(CLASS_NAME_COLLAPSE);

      this._element.classList.add(CLASS_NAME_COLLAPSING);

      this._element.style[dimension] = 0;

      this._addAriaAndCollapsedClass(this._triggerArray, true);

      this._isTransitioning = true;

      const complete = () => {
        this._isTransitioning = false;

        this._element.classList.remove(CLASS_NAME_COLLAPSING);

        this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);

        this._element.style[dimension] = '';
        EventHandler.trigger(this._element, EVENT_SHOWN$5);
      };

      const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
      const scrollSize = `scroll${capitalizedDimension}`;

      this._queueCallback(complete, this._element, true);

      this._element.style[dimension] = `${this._element[scrollSize]}px`;
    }

    hide() {
      if (this._isTransitioning || !this._isShown()) {
        return;
      }

      const startEvent = EventHandler.trigger(this._element, EVENT_HIDE$5);

      if (startEvent.defaultPrevented) {
        return;
      }

      const dimension = this._getDimension();

      this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;
      reflow(this._element);

      this._element.classList.add(CLASS_NAME_COLLAPSING);

      this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);

      const triggerArrayLength = this._triggerArray.length;

      for (let i = 0; i < triggerArrayLength; i++) {
        const trigger = this._triggerArray[i];
        const elem = getElementFromSelector(trigger);

        if (elem && !this._isShown(elem)) {
          this._addAriaAndCollapsedClass([trigger], false);
        }
      }

      this._isTransitioning = true;

      const complete = () => {
        this._isTransitioning = false;

        this._element.classList.remove(CLASS_NAME_COLLAPSING);

        this._element.classList.add(CLASS_NAME_COLLAPSE);

        EventHandler.trigger(this._element, EVENT_HIDDEN$5);
      };

      this._element.style[dimension] = '';

      this._queueCallback(complete, this._element, true);
    }

    _isShown(element = this._element) {
      return element.classList.contains(CLASS_NAME_SHOW$7);
    } // Private


    _getConfig(config) {
      config = { ...Default$9,
        ...Manipulator.getDataAttributes(this._element),
        ...config
      };
      config.toggle = Boolean(config.toggle); // Coerce string values

      config.parent = getElement(config.parent);
      typeCheckConfig(NAME$a, config, DefaultType$9);
      return config;
    }

    _getDimension() {
      return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;
    }

    _initializeChildren() {
      if (!this._config.parent) {
        return;
      }

      const children = SelectorEngine.find(`.${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`, this._config.parent);
      SelectorEngine.find(SELECTOR_DATA_TOGGLE$4, this._config.parent).filter(elem => !children.includes(elem)).forEach(element => {
        const selected = getElementFromSelector(element);

        if (selected) {
          this._addAriaAndCollapsedClass([element], this._isShown(selected));
        }
      });
    }

    _addAriaAndCollapsedClass(triggerArray, isOpen) {
      if (!triggerArray.length) {
        return;
      }

      triggerArray.forEach(elem => {
        if (isOpen) {
          elem.classList.remove(CLASS_NAME_COLLAPSED);
        } else {
          elem.classList.add(CLASS_NAME_COLLAPSED);
        }

        elem.setAttribute('aria-expanded', isOpen);
      });
    } // Static


    static jQueryInterface(config) {
      return this.each(function () {
        const _config = {};

        if (typeof config === 'string' && /show|hide/.test(config)) {
          _config.toggle = false;
        }

        const data = Collapse.getOrCreateInstance(this, _config);

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError(`No method named "${config}"`);
          }

          data[config]();
        }
      });
    }

  }
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function (event) {
    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
    if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') {
      event.preventDefault();
    }

    const selector = getSelectorFromElement(this);
    const selectorElements = SelectorEngine.find(selector);
    selectorElements.forEach(element => {
      Collapse.getOrCreateInstance(element, {
        toggle: false
      }).toggle();
    });
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Collapse to jQuery only if jQuery is present
   */

  defineJQueryPlugin(Collapse);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): dropdown.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  const NAME$9 = 'dropdown';
  const DATA_KEY$8 = 'bs.dropdown';
  const EVENT_KEY$8 = `.${DATA_KEY$8}`;
  const DATA_API_KEY$4 = '.data-api';
  const ESCAPE_KEY$2 = 'Escape';
  const SPACE_KEY = 'Space';
  const TAB_KEY$1 = 'Tab';
  const ARROW_UP_KEY = 'ArrowUp';
  const ARROW_DOWN_KEY = 'ArrowDown';
  const RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button

  const REGEXP_KEYDOWN = new RegExp(`${ARROW_UP_KEY}|${ARROW_DOWN_KEY}|${ESCAPE_KEY$2}`);
  const EVENT_HIDE$4 = `hide${EVENT_KEY$8}`;
  const EVENT_HIDDEN$4 = `hidden${EVENT_KEY$8}`;
  const EVENT_SHOW$4 = `show${EVENT_KEY$8}`;
  const EVENT_SHOWN$4 = `shown${EVENT_KEY$8}`;
  const EVENT_CLICK_DATA_API$3 = `click${EVENT_KEY$8}${DATA_API_KEY$4}`;
  const EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY$8}${DATA_API_KEY$4}`;
  const EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY$8}${DATA_API_KEY$4}`;
  const CLASS_NAME_SHOW$6 = 'show';
  const CLASS_NAME_DROPUP = 'dropup';
  const CLASS_NAME_DROPEND = 'dropend';
  const CLASS_NAME_DROPSTART = 'dropstart';
  const CLASS_NAME_NAVBAR = 'navbar';
  const SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle="dropdown"]';
  const SELECTOR_MENU = '.dropdown-menu';
  const SELECTOR_NAVBAR_NAV = '.navbar-nav';
  const SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';
  const PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start';
  const PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end';
  const PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start';
  const PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end';
  const PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start';
  const PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start';
  const Default$8 = {
    offset: [0, 2],
    boundary: 'clippingParents',
    reference: 'toggle',
    display: 'dynamic',
    popperConfig: null,
    autoClose: true
  };
  const DefaultType$8 = {
    offset: '(array|string|function)',
    boundary: '(string|element)',
    reference: '(string|element|object)',
    display: 'string',
    popperConfig: '(null|object|function)',
    autoClose: '(boolean|string)'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  class Dropdown extends BaseComponent {
    constructor(element, config) {
      super(element);
      this._popper = null;
      this._config = this._getConfig(config);
      this._menu = this._getMenuElement();
      this._inNavbar = this._detectNavbar();
    } // Getters


    static get Default() {
      return Default$8;
    }

    static get DefaultType() {
      return DefaultType$8;
    }

    static get NAME() {
      return NAME$9;
    } // Public


    toggle() {
      return this._isShown() ? this.hide() : this.show();
    }

    show() {
      if (isDisabled(this._element) || this._isShown(this._menu)) {
        return;
      }

      const relatedTarget = {
        relatedTarget: this._element
      };
      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, relatedTarget);

      if (showEvent.defaultPrevented) {
        return;
      }

      const parent = Dropdown.getParentFromElement(this._element); // Totally disable Popper for Dropdowns in Navbar

      if (this._inNavbar) {
        Manipulator.setDataAttribute(this._menu, 'popper', 'none');
      } else {
        this._createPopper(parent);
      } // If this is a touch-enabled device we add extra
      // empty mouseover listeners to the body's immediate children;
      // only needed because of broken event delegation on iOS
      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


      if ('ontouchstart' in document.documentElement && !parent.closest(SELECTOR_NAVBAR_NAV)) {
        [].concat(...document.body.children).forEach(elem => EventHandler.on(elem, 'mouseover', noop));
      }

      this._element.focus();

      this._element.setAttribute('aria-expanded', true);

      this._menu.classList.add(CLASS_NAME_SHOW$6);

      this._element.classList.add(CLASS_NAME_SHOW$6);

      EventHandler.trigger(this._element, EVENT_SHOWN$4, relatedTarget);
    }

    hide() {
      if (isDisabled(this._element) || !this._isShown(this._menu)) {
        return;
      }

      const relatedTarget = {
        relatedTarget: this._element
      };

      this._completeHide(relatedTarget);
    }

    dispose() {
      if (this._popper) {
        this._popper.destroy();
      }

      super.dispose();
    }

    update() {
      this._inNavbar = this._detectNavbar();

      if (this._popper) {
        this._popper.update();
      }
    } // Private


    _completeHide(relatedTarget) {
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4, relatedTarget);

      if (hideEvent.defaultPrevented) {
        return;
      } // If this is a touch-enabled device we remove the extra
      // empty mouseover listeners we added for iOS support


      if ('ontouchstart' in document.documentElement) {
        [].concat(...document.body.children).forEach(elem => EventHandler.off(elem, 'mouseover', noop));
      }

      if (this._popper) {
        this._popper.destroy();
      }

      this._menu.classList.remove(CLASS_NAME_SHOW$6);

      this._element.classList.remove(CLASS_NAME_SHOW$6);

      this._element.setAttribute('aria-expanded', 'false');

      Manipulator.removeDataAttribute(this._menu, 'popper');
      EventHandler.trigger(this._element, EVENT_HIDDEN$4, relatedTarget);
    }

    _getConfig(config) {
      config = { ...this.constructor.Default,
        ...Manipulator.getDataAttributes(this._element),
        ...config
      };
      typeCheckConfig(NAME$9, config, this.constructor.DefaultType);

      if (typeof config.reference === 'object' && !isElement(config.reference) && typeof config.reference.getBoundingClientRect !== 'function') {
        // Popper virtual elements require a getBoundingClientRect method
        throw new TypeError(`${NAME$9.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);
      }

      return config;
    }

    _createPopper(parent) {
      if (typeof Popper__namespace === 'undefined') {
        throw new TypeError('Bootstrap\'s dropdowns require Popper (https://popper.js.org)');
      }

      let referenceElement = this._element;

      if (this._config.reference === 'parent') {
        referenceElement = parent;
      } else if (isElement(this._config.reference)) {
        referenceElement = getElement(this._config.reference);
      } else if (typeof this._config.reference === 'object') {
        referenceElement = this._config.reference;
      }

      const popperConfig = this._getPopperConfig();

      const isDisplayStatic = popperConfig.modifiers.find(modifier => modifier.name === 'applyStyles' && modifier.enabled === false);
      this._popper = Popper__namespace.createPopper(referenceElement, this._menu, popperConfig);

      if (isDisplayStatic) {
        Manipulator.setDataAttribute(this._menu, 'popper', 'static');
      }
    }

    _isShown(element = this._element) {
      return element.classList.contains(CLASS_NAME_SHOW$6);
    }

    _getMenuElement() {
      return SelectorEngine.next(this._element, SELECTOR_MENU)[0];
    }

    _getPlacement() {
      const parentDropdown = this._element.parentNode;

      if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {
        return PLACEMENT_RIGHT;
      }

      if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {
        return PLACEMENT_LEFT;
      } // We need to trim the value because custom properties can also include spaces


      const isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';

      if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {
        return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;
      }

      return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;
    }

    _detectNavbar() {
      return this._element.closest(`.${CLASS_NAME_NAVBAR}`) !== null;
    }

    _getOffset() {
      const {
        offset
      } = this._config;

      if (typeof offset === 'string') {
        return offset.split(',').map(val => Number.parseInt(val, 10));
      }

      if (typeof offset === 'function') {
        return popperData => offset(popperData, this._element);
      }

      return offset;
    }

    _getPopperConfig() {
      const defaultBsPopperConfig = {
        placement: this._getPlacement(),
        modifiers: [{
          name: 'preventOverflow',
          options: {
            boundary: this._config.boundary
          }
        }, {
          name: 'offset',
          options: {
            offset: this._getOffset()
          }
        }]
      }; // Disable Popper if we have a static display

      if (this._config.display === 'static') {
        defaultBsPopperConfig.modifiers = [{
          name: 'applyStyles',
          enabled: false
        }];
      }

      return { ...defaultBsPopperConfig,
        ...(typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig)
      };
    }

    _selectMenuItem({
      key,
      target
    }) {
      const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(isVisible);

      if (!items.length) {
        return;
      } // if target isn't included in items (e.g. when expanding the dropdown)
      // allow cycling to get the last item in case key equals ARROW_UP_KEY


      getNextActiveElement(items, target, key === ARROW_DOWN_KEY, !items.includes(target)).focus();
    } // Static


    static jQueryInterface(config) {
      return this.each(function () {
        const data = Dropdown.getOrCreateInstance(this, config);

        if (typeof config !== 'string') {
          return;
        }

        if (typeof data[config] === 'undefined') {
          throw new TypeError(`No method named "${config}"`);
        }

        data[config]();
      });
    }

    static clearMenus(event) {
      if (event && (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY$1)) {
        return;
      }

      const toggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE$3);

      for (let i = 0, len = toggles.length; i < len; i++) {
        const context = Dropdown.getInstance(toggles[i]);

        if (!context || context._config.autoClose === false) {
          continue;
        }

        if (!context._isShown()) {
          continue;
        }

        const relatedTarget = {
          relatedTarget: context._element
        };

        if (event) {
          const composedPath = event.composedPath();
          const isMenuTarget = composedPath.includes(context._menu);

          if (composedPath.includes(context._element) || context._config.autoClose === 'inside' && !isMenuTarget || context._config.autoClose === 'outside' && isMenuTarget) {
            continue;
          } // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu


          if (context._menu.contains(event.target) && (event.type === 'keyup' && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {
            continue;
          }

          if (event.type === 'click') {
            relatedTarget.clickEvent = event;
          }
        }

        context._completeHide(relatedTarget);
      }
    }

    static getParentFromElement(element) {
      return getElementFromSelector(element) || element.parentNode;
    }

    static dataApiKeydownHandler(event) {
      // If not input/textarea:
      //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
      // If input/textarea:
      //  - If space key => not a dropdown command
      //  - If key is other than escape
      //    - If key is not up or down => not a dropdown command
      //    - If trigger inside the menu => not a dropdown command
      if (/input|textarea/i.test(event.target.tagName) ? event.key === SPACE_KEY || event.key !== ESCAPE_KEY$2 && (event.key !== ARROW_DOWN_KEY && event.key !== ARROW_UP_KEY || event.target.closest(SELECTOR_MENU)) : !REGEXP_KEYDOWN.test(event.key)) {
        return;
      }

      const isActive = this.classList.contains(CLASS_NAME_SHOW$6);

      if (!isActive && event.key === ESCAPE_KEY$2) {
        return;
      }

      event.preventDefault();
      event.stopPropagation();

      if (isDisabled(this)) {
        return;
      }

      const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0];
      const instance = Dropdown.getOrCreateInstance(getToggleButton);

      if (event.key === ESCAPE_KEY$2) {
        instance.hide();
        return;
      }

      if (event.key === ARROW_UP_KEY || event.key === ARROW_DOWN_KEY) {
        if (!isActive) {
          instance.show();
        }

        instance._selectMenuItem(event);

        return;
      }

      if (!isActive || event.key === SPACE_KEY) {
        Dropdown.clearMenus();
      }
    }

  }
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);
  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);
  EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);
  EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);
  EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function (event) {
    event.preventDefault();
    Dropdown.getOrCreateInstance(this).toggle();
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Dropdown to jQuery only if jQuery is present
   */

  defineJQueryPlugin(Dropdown);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): util/scrollBar.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  const SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';
  const SELECTOR_STICKY_CONTENT = '.sticky-top';

  class ScrollBarHelper {
    constructor() {
      this._element = document.body;
    }

    getWidth() {
      // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
      const documentWidth = document.documentElement.clientWidth;
      return Math.abs(window.innerWidth - documentWidth);
    }

    hide() {
      const width = this.getWidth();

      this._disableOverFlow(); // give padding to element to balance the hidden scrollbar width


      this._setElementAttributes(this._element, 'paddingRight', calculatedValue => calculatedValue + width); // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth


      this._setElementAttributes(SELECTOR_FIXED_CONTENT, 'paddingRight', calculatedValue => calculatedValue + width);

      this._setElementAttributes(SELECTOR_STICKY_CONTENT, 'marginRight', calculatedValue => calculatedValue - width);
    }

    _disableOverFlow() {
      this._saveInitialAttribute(this._element, 'overflow');

      this._element.style.overflow = 'hidden';
    }

    _setElementAttributes(selector, styleProp, callback) {
      const scrollbarWidth = this.getWidth();

      const manipulationCallBack = element => {
        if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {
          return;
        }

        this._saveInitialAttribute(element, styleProp);

        const calculatedValue = window.getComputedStyle(element)[styleProp];
        element.style[styleProp] = `${callback(Number.parseFloat(calculatedValue))}px`;
      };

      this._applyManipulationCallback(selector, manipulationCallBack);
    }

    reset() {
      this._resetElementAttributes(this._element, 'overflow');

      this._resetElementAttributes(this._element, 'paddingRight');

      this._resetElementAttributes(SELECTOR_FIXED_CONTENT, 'paddingRight');

      this._resetElementAttributes(SELECTOR_STICKY_CONTENT, 'marginRight');
    }

    _saveInitialAttribute(element, styleProp) {
      const actualValue = element.style[styleProp];

      if (actualValue) {
        Manipulator.setDataAttribute(element, styleProp, actualValue);
      }
    }

    _resetElementAttributes(selector, styleProp) {
      const manipulationCallBack = element => {
        const value = Manipulator.getDataAttribute(element, styleProp);

        if (typeof value === 'undefined') {
          element.style.removeProperty(styleProp);
        } else {
          Manipulator.removeDataAttribute(element, styleProp);
          element.style[styleProp] = value;
        }
      };

      this._applyManipulationCallback(selector, manipulationCallBack);
    }

    _applyManipulationCallback(selector, callBack) {
      if (isElement(selector)) {
        callBack(selector);
      } else {
        SelectorEngine.find(selector, this._element).forEach(callBack);
      }
    }

    isOverflowing() {
      return this.getWidth() > 0;
    }

  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): util/backdrop.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */
  const Default$7 = {
    className: 'modal-backdrop',
    isVisible: true,
    // if false, we use the backdrop helper without adding any element to the dom
    isAnimated: false,
    rootElement: 'body',
    // give the choice to place backdrop under different elements
    clickCallback: null
  };
  const DefaultType$7 = {
    className: 'string',
    isVisible: 'boolean',
    isAnimated: 'boolean',
    rootElement: '(element|string)',
    clickCallback: '(function|null)'
  };
  const NAME$8 = 'backdrop';
  const CLASS_NAME_FADE$4 = 'fade';
  const CLASS_NAME_SHOW$5 = 'show';
  const EVENT_MOUSEDOWN = `mousedown.bs.${NAME$8}`;

  class Backdrop {
    constructor(config) {
      this._config = this._getConfig(config);
      this._isAppended = false;
      this._element = null;
    }

    show(callback) {
      if (!this._config.isVisible) {
        execute(callback);
        return;
      }

      this._append();

      if (this._config.isAnimated) {
        reflow(this._getElement());
      }

      this._getElement().classList.add(CLASS_NAME_SHOW$5);

      this._emulateAnimation(() => {
        execute(callback);
      });
    }

    hide(callback) {
      if (!this._config.isVisible) {
        execute(callback);
        return;
      }

      this._getElement().classList.remove(CLASS_NAME_SHOW$5);

      this._emulateAnimation(() => {
        this.dispose();
        execute(callback);
      });
    } // Private


    _getElement() {
      if (!this._element) {
        const backdrop = document.createElement('div');
        backdrop.className = this._config.className;

        if (this._config.isAnimated) {
          backdrop.classList.add(CLASS_NAME_FADE$4);
        }

        this._element = backdrop;
      }

      return this._element;
    }

    _getConfig(config) {
      config = { ...Default$7,
        ...(typeof config === 'object' ? config : {})
      }; // use getElement() with the default "body" to get a fresh Element on each instantiation

      config.rootElement = getElement(config.rootElement);
      typeCheckConfig(NAME$8, config, DefaultType$7);
      return config;
    }

    _append() {
      if (this._isAppended) {
        return;
      }

      this._config.rootElement.append(this._getElement());

      EventHandler.on(this._getElement(), EVENT_MOUSEDOWN, () => {
        execute(this._config.clickCallback);
      });
      this._isAppended = true;
    }

    dispose() {
      if (!this._isAppended) {
        return;
      }

      EventHandler.off(this._element, EVENT_MOUSEDOWN);

      this._element.remove();

      this._isAppended = false;
    }

    _emulateAnimation(callback) {
      executeAfterTransition(callback, this._getElement(), this._config.isAnimated);
    }

  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): util/focustrap.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */
  const Default$6 = {
    trapElement: null,
    // The element to trap focus inside of
    autofocus: true
  };
  const DefaultType$6 = {
    trapElement: 'element',
    autofocus: 'boolean'
  };
  const NAME$7 = 'focustrap';
  const DATA_KEY$7 = 'bs.focustrap';
  const EVENT_KEY$7 = `.${DATA_KEY$7}`;
  const EVENT_FOCUSIN$1 = `focusin${EVENT_KEY$7}`;
  const EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY$7}`;
  const TAB_KEY = 'Tab';
  const TAB_NAV_FORWARD = 'forward';
  const TAB_NAV_BACKWARD = 'backward';

  class FocusTrap {
    constructor(config) {
      this._config = this._getConfig(config);
      this._isActive = false;
      this._lastTabNavDirection = null;
    }

    activate() {
      const {
        trapElement,
        autofocus
      } = this._config;

      if (this._isActive) {
        return;
      }

      if (autofocus) {
        trapElement.focus();
      }

      EventHandler.off(document, EVENT_KEY$7); // guard against infinite focus loop

      EventHandler.on(document, EVENT_FOCUSIN$1, event => this._handleFocusin(event));
      EventHandler.on(document, EVENT_KEYDOWN_TAB, event => this._handleKeydown(event));
      this._isActive = true;
    }

    deactivate() {
      if (!this._isActive) {
        return;
      }

      this._isActive = false;
      EventHandler.off(document, EVENT_KEY$7);
    } // Private


    _handleFocusin(event) {
      const {
        target
      } = event;
      const {
        trapElement
      } = this._config;

      if (target === document || target === trapElement || trapElement.contains(target)) {
        return;
      }

      const elements = SelectorEngine.focusableChildren(trapElement);

      if (elements.length === 0) {
        trapElement.focus();
      } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {
        elements[elements.length - 1].focus();
      } else {
        elements[0].focus();
      }
    }

    _handleKeydown(event) {
      if (event.key !== TAB_KEY) {
        return;
      }

      this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;
    }

    _getConfig(config) {
      config = { ...Default$6,
        ...(typeof config === 'object' ? config : {})
      };
      typeCheckConfig(NAME$7, config, DefaultType$6);
      return config;
    }

  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): modal.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  const NAME$6 = 'modal';
  const DATA_KEY$6 = 'bs.modal';
  const EVENT_KEY$6 = `.${DATA_KEY$6}`;
  const DATA_API_KEY$3 = '.data-api';
  const ESCAPE_KEY$1 = 'Escape';
  const Default$5 = {
    backdrop: true,
    keyboard: true,
    focus: true
  };
  const DefaultType$5 = {
    backdrop: '(boolean|string)',
    keyboard: 'boolean',
    focus: 'boolean'
  };
  const EVENT_HIDE$3 = `hide${EVENT_KEY$6}`;
  const EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY$6}`;
  const EVENT_HIDDEN$3 = `hidden${EVENT_KEY$6}`;
  const EVENT_SHOW$3 = `show${EVENT_KEY$6}`;
  const EVENT_SHOWN$3 = `shown${EVENT_KEY$6}`;
  const EVENT_RESIZE = `resize${EVENT_KEY$6}`;
  const EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY$6}`;
  const EVENT_KEYDOWN_DISMISS$1 = `keydown.dismiss${EVENT_KEY$6}`;
  const EVENT_MOUSEUP_DISMISS = `mouseup.dismiss${EVENT_KEY$6}`;
  const EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY$6}`;
  const EVENT_CLICK_DATA_API$2 = `click${EVENT_KEY$6}${DATA_API_KEY$3}`;
  const CLASS_NAME_OPEN = 'modal-open';
  const CLASS_NAME_FADE$3 = 'fade';
  const CLASS_NAME_SHOW$4 = 'show';
  const CLASS_NAME_STATIC = 'modal-static';
  const SELECTOR_DIALOG = '.modal-dialog';
  const SELECTOR_MODAL_BODY = '.modal-body';
  const SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle="modal"]';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  class Modal extends BaseComponent {
    constructor(element, config) {
      super(element);
      this._config = this._getConfig(config);
      this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element);
      this._backdrop = this._initializeBackDrop();
      this._focustrap = this._initializeFocusTrap();
      this._isShown = false;
      this._ignoreBackdropClick = false;
      this._isTransitioning = false;
      this._scrollBar = new ScrollBarHelper();
    } // Getters


    static get Default() {
      return Default$5;
    }

    static get NAME() {
      return NAME$6;
    } // Public


    toggle(relatedTarget) {
      return this._isShown ? this.hide() : this.show(relatedTarget);
    }

    show(relatedTarget) {
      if (this._isShown || this._isTransitioning) {
        return;
      }

      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {
        relatedTarget
      });

      if (showEvent.defaultPrevented) {
        return;
      }

      this._isShown = true;

      if (this._isAnimated()) {
        this._isTransitioning = true;
      }

      this._scrollBar.hide();

      document.body.classList.add(CLASS_NAME_OPEN);

      this._adjustDialog();

      this._setEscapeEvent();

      this._setResizeEvent();

      EventHandler.on(this._dialog, EVENT_MOUSEDOWN_DISMISS, () => {
        EventHandler.one(this._element, EVENT_MOUSEUP_DISMISS, event => {
          if (event.target === this._element) {
            this._ignoreBackdropClick = true;
          }
        });
      });

      this._showBackdrop(() => this._showElement(relatedTarget));
    }

    hide() {
      if (!this._isShown || this._isTransitioning) {
        return;
      }

      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);

      if (hideEvent.defaultPrevented) {
        return;
      }

      this._isShown = false;

      const isAnimated = this._isAnimated();

      if (isAnimated) {
        this._isTransitioning = true;
      }

      this._setEscapeEvent();

      this._setResizeEvent();

      this._focustrap.deactivate();

      this._element.classList.remove(CLASS_NAME_SHOW$4);

      EventHandler.off(this._element, EVENT_CLICK_DISMISS);
      EventHandler.off(this._dialog, EVENT_MOUSEDOWN_DISMISS);

      this._queueCallback(() => this._hideModal(), this._element, isAnimated);
    }

    dispose() {
      [window, this._dialog].forEach(htmlElement => EventHandler.off(htmlElement, EVENT_KEY$6));

      this._backdrop.dispose();

      this._focustrap.deactivate();

      super.dispose();
    }

    handleUpdate() {
      this._adjustDialog();
    } // Private


    _initializeBackDrop() {
      return new Backdrop({
        isVisible: Boolean(this._config.backdrop),
        // 'static' option will be translated to true, and booleans will keep their value
        isAnimated: this._isAnimated()
      });
    }

    _initializeFocusTrap() {
      return new FocusTrap({
        trapElement: this._element
      });
    }

    _getConfig(config) {
      config = { ...Default$5,
        ...Manipulator.getDataAttributes(this._element),
        ...(typeof config === 'object' ? config : {})
      };
      typeCheckConfig(NAME$6, config, DefaultType$5);
      return config;
    }

    _showElement(relatedTarget) {
      const isAnimated = this._isAnimated();

      const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);

      if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
        // Don't move modal's DOM position
        document.body.append(this._element);
      }

      this._element.style.display = 'block';

      this._element.removeAttribute('aria-hidden');

      this._element.setAttribute('aria-modal', true);

      this._element.setAttribute('role', 'dialog');

      this._element.scrollTop = 0;

      if (modalBody) {
        modalBody.scrollTop = 0;
      }

      if (isAnimated) {
        reflow(this._element);
      }

      this._element.classList.add(CLASS_NAME_SHOW$4);

      const transitionComplete = () => {
        if (this._config.focus) {
          this._focustrap.activate();
        }

        this._isTransitioning = false;
        EventHandler.trigger(this._element, EVENT_SHOWN$3, {
          relatedTarget
        });
      };

      this._queueCallback(transitionComplete, this._dialog, isAnimated);
    }

    _setEscapeEvent() {
      if (this._isShown) {
        EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, event => {
          if (this._config.keyboard && event.key === ESCAPE_KEY$1) {
            event.preventDefault();
            this.hide();
          } else if (!this._config.keyboard && event.key === ESCAPE_KEY$1) {
            this._triggerBackdropTransition();
          }
        });
      } else {
        EventHandler.off(this._element, EVENT_KEYDOWN_DISMISS$1);
      }
    }

    _setResizeEvent() {
      if (this._isShown) {
        EventHandler.on(window, EVENT_RESIZE, () => this._adjustDialog());
      } else {
        EventHandler.off(window, EVENT_RESIZE);
      }
    }

    _hideModal() {
      this._element.style.display = 'none';

      this._element.setAttribute('aria-hidden', true);

      this._element.removeAttribute('aria-modal');

      this._element.removeAttribute('role');

      this._isTransitioning = false;

      this._backdrop.hide(() => {
        document.body.classList.remove(CLASS_NAME_OPEN);

        this._resetAdjustments();

        this._scrollBar.reset();

        EventHandler.trigger(this._element, EVENT_HIDDEN$3);
      });
    }

    _showBackdrop(callback) {
      EventHandler.on(this._element, EVENT_CLICK_DISMISS, event => {
        if (this._ignoreBackdropClick) {
          this._ignoreBackdropClick = false;
          return;
        }

        if (event.target !== event.currentTarget) {
          return;
        }

        if (this._config.backdrop === true) {
          this.hide();
        } else if (this._config.backdrop === 'static') {
          this._triggerBackdropTransition();
        }
      });

      this._backdrop.show(callback);
    }

    _isAnimated() {
      return this._element.classList.contains(CLASS_NAME_FADE$3);
    }

    _triggerBackdropTransition() {
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);

      if (hideEvent.defaultPrevented) {
        return;
      }

      const {
        classList,
        scrollHeight,
        style
      } = this._element;
      const isModalOverflowing = scrollHeight > document.documentElement.clientHeight; // return if the following background transition hasn't yet completed

      if (!isModalOverflowing && style.overflowY === 'hidden' || classList.contains(CLASS_NAME_STATIC)) {
        return;
      }

      if (!isModalOverflowing) {
        style.overflowY = 'hidden';
      }

      classList.add(CLASS_NAME_STATIC);

      this._queueCallback(() => {
        classList.remove(CLASS_NAME_STATIC);

        if (!isModalOverflowing) {
          this._queueCallback(() => {
            style.overflowY = '';
          }, this._dialog);
        }
      }, this._dialog);

      this._element.focus();
    } // ----------------------------------------------------------------------
    // the following methods are used to handle overflowing modals
    // ----------------------------------------------------------------------


    _adjustDialog() {
      const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

      const scrollbarWidth = this._scrollBar.getWidth();

      const isBodyOverflowing = scrollbarWidth > 0;

      if (!isBodyOverflowing && isModalOverflowing && !isRTL() || isBodyOverflowing && !isModalOverflowing && isRTL()) {
        this._element.style.paddingLeft = `${scrollbarWidth}px`;
      }

      if (isBodyOverflowing && !isModalOverflowing && !isRTL() || !isBodyOverflowing && isModalOverflowing && isRTL()) {
        this._element.style.paddingRight = `${scrollbarWidth}px`;
      }
    }

    _resetAdjustments() {
      this._element.style.paddingLeft = '';
      this._element.style.paddingRight = '';
    } // Static


    static jQueryInterface(config, relatedTarget) {
      return this.each(function () {
        const data = Modal.getOrCreateInstance(this, config);

        if (typeof config !== 'string') {
          return;
        }

        if (typeof data[config] === 'undefined') {
          throw new TypeError(`No method named "${config}"`);
        }

        data[config](relatedTarget);
      });
    }

  }
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function (event) {
    const target = getElementFromSelector(this);

    if (['A', 'AREA'].includes(this.tagName)) {
      event.preventDefault();
    }

    EventHandler.one(target, EVENT_SHOW$3, showEvent => {
      if (showEvent.defaultPrevented) {
        // only register focus restorer if modal will actually get shown
        return;
      }

      EventHandler.one(target, EVENT_HIDDEN$3, () => {
        if (isVisible(this)) {
          this.focus();
        }
      });
    });
    const data = Modal.getOrCreateInstance(target);
    data.toggle(this);
  });
  enableDismissTrigger(Modal);
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Modal to jQuery only if jQuery is present
   */

  defineJQueryPlugin(Modal);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): offcanvas.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  const NAME$5 = 'offcanvas';
  const DATA_KEY$5 = 'bs.offcanvas';
  const EVENT_KEY$5 = `.${DATA_KEY$5}`;
  const DATA_API_KEY$2 = '.data-api';
  const EVENT_LOAD_DATA_API$1 = `load${EVENT_KEY$5}${DATA_API_KEY$2}`;
  const ESCAPE_KEY = 'Escape';
  const Default$4 = {
    backdrop: true,
    keyboard: true,
    scroll: false
  };
  const DefaultType$4 = {
    backdrop: 'boolean',
    keyboard: 'boolean',
    scroll: 'boolean'
  };
  const CLASS_NAME_SHOW$3 = 'show';
  const CLASS_NAME_BACKDROP = 'offcanvas-backdrop';
  const OPEN_SELECTOR = '.offcanvas.show';
  const EVENT_SHOW$2 = `show${EVENT_KEY$5}`;
  const EVENT_SHOWN$2 = `shown${EVENT_KEY$5}`;
  const EVENT_HIDE$2 = `hide${EVENT_KEY$5}`;
  const EVENT_HIDDEN$2 = `hidden${EVENT_KEY$5}`;
  const EVENT_CLICK_DATA_API$1 = `click${EVENT_KEY$5}${DATA_API_KEY$2}`;
  const EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY$5}`;
  const SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle="offcanvas"]';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  class Offcanvas extends BaseComponent {
    constructor(element, config) {
      super(element);
      this._config = this._getConfig(config);
      this._isShown = false;
      this._backdrop = this._initializeBackDrop();
      this._focustrap = this._initializeFocusTrap();

      this._addEventListeners();
    } // Getters


    static get NAME() {
      return NAME$5;
    }

    static get Default() {
      return Default$4;
    } // Public


    toggle(relatedTarget) {
      return this._isShown ? this.hide() : this.show(relatedTarget);
    }

    show(relatedTarget) {
      if (this._isShown) {
        return;
      }

      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$2, {
        relatedTarget
      });

      if (showEvent.defaultPrevented) {
        return;
      }

      this._isShown = true;
      this._element.style.visibility = 'visible';

      this._backdrop.show();

      if (!this._config.scroll) {
        new ScrollBarHelper().hide();
      }

      this._element.removeAttribute('aria-hidden');

      this._element.setAttribute('aria-modal', true);

      this._element.setAttribute('role', 'dialog');

      this._element.classList.add(CLASS_NAME_SHOW$3);

      const completeCallBack = () => {
        if (!this._config.scroll) {
          this._focustrap.activate();
        }

        EventHandler.trigger(this._element, EVENT_SHOWN$2, {
          relatedTarget
        });
      };

      this._queueCallback(completeCallBack, this._element, true);
    }

    hide() {
      if (!this._isShown) {
        return;
      }

      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$2);

      if (hideEvent.defaultPrevented) {
        return;
      }

      this._focustrap.deactivate();

      this._element.blur();

      this._isShown = false;

      this._element.classList.remove(CLASS_NAME_SHOW$3);

      this._backdrop.hide();

      const completeCallback = () => {
        this._element.setAttribute('aria-hidden', true);

        this._element.removeAttribute('aria-modal');

        this._element.removeAttribute('role');

        this._element.style.visibility = 'hidden';

        if (!this._config.scroll) {
          new ScrollBarHelper().reset();
        }

        EventHandler.trigger(this._element, EVENT_HIDDEN$2);
      };

      this._queueCallback(completeCallback, this._element, true);
    }

    dispose() {
      this._backdrop.dispose();

      this._focustrap.deactivate();

      super.dispose();
    } // Private


    _getConfig(config) {
      config = { ...Default$4,
        ...Manipulator.getDataAttributes(this._element),
        ...(typeof config === 'object' ? config : {})
      };
      typeCheckConfig(NAME$5, config, DefaultType$4);
      return config;
    }

    _initializeBackDrop() {
      return new Backdrop({
        className: CLASS_NAME_BACKDROP,
        isVisible: this._config.backdrop,
        isAnimated: true,
        rootElement: this._element.parentNode,
        clickCallback: () => this.hide()
      });
    }

    _initializeFocusTrap() {
      return new FocusTrap({
        trapElement: this._element
      });
    }

    _addEventListeners() {
      EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, event => {
        if (this._config.keyboard && event.key === ESCAPE_KEY) {
          this.hide();
        }
      });
    } // Static


    static jQueryInterface(config) {
      return this.each(function () {
        const data = Offcanvas.getOrCreateInstance(this, config);

        if (typeof config !== 'string') {
          return;
        }

        if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
          throw new TypeError(`No method named "${config}"`);
        }

        data[config](this);
      });
    }

  }
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function (event) {
    const target = getElementFromSelector(this);

    if (['A', 'AREA'].includes(this.tagName)) {
      event.preventDefault();
    }

    if (isDisabled(this)) {
      return;
    }

    EventHandler.one(target, EVENT_HIDDEN$2, () => {
      // focus on trigger when it is closed
      if (isVisible(this)) {
        this.focus();
      }
    }); // avoid conflict when clicking a toggler of an offcanvas, while another is open

    const allReadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);

    if (allReadyOpen && allReadyOpen !== target) {
      Offcanvas.getInstance(allReadyOpen).hide();
    }

    const data = Offcanvas.getOrCreateInstance(target);
    data.toggle(this);
  });
  EventHandler.on(window, EVENT_LOAD_DATA_API$1, () => SelectorEngine.find(OPEN_SELECTOR).forEach(el => Offcanvas.getOrCreateInstance(el).show()));
  enableDismissTrigger(Offcanvas);
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  defineJQueryPlugin(Offcanvas);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): util/sanitizer.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  const uriAttrs = new Set(['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href']);
  const ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
  /**
   * A pattern that recognizes a commonly useful subset of URLs that are safe.
   *
   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
   */

  const SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/i;
  /**
   * A pattern that matches safe data URLs. Only matches image, video and audio types.
   *
   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
   */

  const DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;

  const allowedAttribute = (attr, allowedAttributeList) => {
    const attrName = attr.nodeName.toLowerCase();

    if (allowedAttributeList.includes(attrName)) {
      if (uriAttrs.has(attrName)) {
        return Boolean(SAFE_URL_PATTERN.test(attr.nodeValue) || DATA_URL_PATTERN.test(attr.nodeValue));
      }

      return true;
    }

    const regExp = allowedAttributeList.filter(attrRegex => attrRegex instanceof RegExp); // Check if a regular expression validates the attribute.

    for (let i = 0, len = regExp.length; i < len; i++) {
      if (regExp[i].test(attrName)) {
        return true;
      }
    }

    return false;
  };

  const DefaultAllowlist = {
    // Global attributes allowed on any supplied element below.
    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],
    a: ['target', 'href', 'title', 'rel'],
    area: [],
    b: [],
    br: [],
    col: [],
    code: [],
    div: [],
    em: [],
    hr: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    i: [],
    img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],
    li: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    u: [],
    ul: []
  };
  function sanitizeHtml(unsafeHtml, allowList, sanitizeFn) {
    if (!unsafeHtml.length) {
      return unsafeHtml;
    }

    if (sanitizeFn && typeof sanitizeFn === 'function') {
      return sanitizeFn(unsafeHtml);
    }

    const domParser = new window.DOMParser();
    const createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');
    const allowlistKeys = Object.keys(allowList);
    const elements = [].concat(...createdDocument.body.querySelectorAll('*'));

    for (let i = 0, len = elements.length; i < len; i++) {
      const el = elements[i];
      const elName = el.nodeName.toLowerCase();

      if (!allowlistKeys.includes(elName)) {
        el.remove();
        continue;
      }

      const attributeList = [].concat(...el.attributes);
      const allowedAttributes = [].concat(allowList['*'] || [], allowList[elName] || []);
      attributeList.forEach(attr => {
        if (!allowedAttribute(attr, allowedAttributes)) {
          el.removeAttribute(attr.nodeName);
        }
      });
    }

    return createdDocument.body.innerHTML;
  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): tooltip.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  const NAME$4 = 'tooltip';
  const DATA_KEY$4 = 'bs.tooltip';
  const EVENT_KEY$4 = `.${DATA_KEY$4}`;
  const CLASS_PREFIX$1 = 'bs-tooltip';
  const DISALLOWED_ATTRIBUTES = new Set(['sanitize', 'allowList', 'sanitizeFn']);
  const DefaultType$3 = {
    animation: 'boolean',
    template: 'string',
    title: '(string|element|function)',
    trigger: 'string',
    delay: '(number|object)',
    html: 'boolean',
    selector: '(string|boolean)',
    placement: '(string|function)',
    offset: '(array|string|function)',
    container: '(string|element|boolean)',
    fallbackPlacements: 'array',
    boundary: '(string|element)',
    customClass: '(string|function)',
    sanitize: 'boolean',
    sanitizeFn: '(null|function)',
    allowList: 'object',
    popperConfig: '(null|object|function)'
  };
  const AttachmentMap = {
    AUTO: 'auto',
    TOP: 'top',
    RIGHT: isRTL() ? 'left' : 'right',
    BOTTOM: 'bottom',
    LEFT: isRTL() ? 'right' : 'left'
  };
  const Default$3 = {
    animation: true,
    template: '<div class="tooltip" role="tooltip">' + '<div class="tooltip-arrow"></div>' + '<div class="tooltip-inner"></div>' + '</div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    selector: false,
    placement: 'top',
    offset: [0, 0],
    container: false,
    fallbackPlacements: ['top', 'right', 'bottom', 'left'],
    boundary: 'clippingParents',
    customClass: '',
    sanitize: true,
    sanitizeFn: null,
    allowList: DefaultAllowlist,
    popperConfig: null
  };
  const Event$2 = {
    HIDE: `hide${EVENT_KEY$4}`,
    HIDDEN: `hidden${EVENT_KEY$4}`,
    SHOW: `show${EVENT_KEY$4}`,
    SHOWN: `shown${EVENT_KEY$4}`,
    INSERTED: `inserted${EVENT_KEY$4}`,
    CLICK: `click${EVENT_KEY$4}`,
    FOCUSIN: `focusin${EVENT_KEY$4}`,
    FOCUSOUT: `focusout${EVENT_KEY$4}`,
    MOUSEENTER: `mouseenter${EVENT_KEY$4}`,
    MOUSELEAVE: `mouseleave${EVENT_KEY$4}`
  };
  const CLASS_NAME_FADE$2 = 'fade';
  const CLASS_NAME_MODAL = 'modal';
  const CLASS_NAME_SHOW$2 = 'show';
  const HOVER_STATE_SHOW = 'show';
  const HOVER_STATE_OUT = 'out';
  const SELECTOR_TOOLTIP_INNER = '.tooltip-inner';
  const SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`;
  const EVENT_MODAL_HIDE = 'hide.bs.modal';
  const TRIGGER_HOVER = 'hover';
  const TRIGGER_FOCUS = 'focus';
  const TRIGGER_CLICK = 'click';
  const TRIGGER_MANUAL = 'manual';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  class Tooltip extends BaseComponent {
    constructor(element, config) {
      if (typeof Popper__namespace === 'undefined') {
        throw new TypeError('Bootstrap\'s tooltips require Popper (https://popper.js.org)');
      }

      super(element); // private

      this._isEnabled = true;
      this._timeout = 0;
      this._hoverState = '';
      this._activeTrigger = {};
      this._popper = null; // Protected

      this._config = this._getConfig(config);
      this.tip = null;

      this._setListeners();
    } // Getters


    static get Default() {
      return Default$3;
    }

    static get NAME() {
      return NAME$4;
    }

    static get Event() {
      return Event$2;
    }

    static get DefaultType() {
      return DefaultType$3;
    } // Public


    enable() {
      this._isEnabled = true;
    }

    disable() {
      this._isEnabled = false;
    }

    toggleEnabled() {
      this._isEnabled = !this._isEnabled;
    }

    toggle(event) {
      if (!this._isEnabled) {
        return;
      }

      if (event) {
        const context = this._initializeOnDelegatedTarget(event);

        context._activeTrigger.click = !context._activeTrigger.click;

        if (context._isWithActiveTrigger()) {
          context._enter(null, context);
        } else {
          context._leave(null, context);
        }
      } else {
        if (this.getTipElement().classList.contains(CLASS_NAME_SHOW$2)) {
          this._leave(null, this);

          return;
        }

        this._enter(null, this);
      }
    }

    dispose() {
      clearTimeout(this._timeout);
      EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);

      if (this.tip) {
        this.tip.remove();
      }

      if (this._popper) {
        this._popper.destroy();
      }

      super.dispose();
    }

    show() {
      if (this._element.style.display === 'none') {
        throw new Error('Please use show on visible elements');
      }

      if (!(this.isWithContent() && this._isEnabled)) {
        return;
      }

      const showEvent = EventHandler.trigger(this._element, this.constructor.Event.SHOW);
      const shadowRoot = findShadowRoot(this._element);
      const isInTheDom = shadowRoot === null ? this._element.ownerDocument.documentElement.contains(this._element) : shadowRoot.contains(this._element);

      if (showEvent.defaultPrevented || !isInTheDom) {
        return;
      }

      const tip = this.getTipElement();
      const tipId = getUID(this.constructor.NAME);
      tip.setAttribute('id', tipId);

      this._element.setAttribute('aria-describedby', tipId);

      if (this._config.animation) {
        tip.classList.add(CLASS_NAME_FADE$2);
      }

      const placement = typeof this._config.placement === 'function' ? this._config.placement.call(this, tip, this._element) : this._config.placement;

      const attachment = this._getAttachment(placement);

      this._addAttachmentClass(attachment);

      const {
        container
      } = this._config;
      Data.set(tip, this.constructor.DATA_KEY, this);

      if (!this._element.ownerDocument.documentElement.contains(this.tip)) {
        container.append(tip);
        EventHandler.trigger(this._element, this.constructor.Event.INSERTED);
      }

      if (this._popper) {
        this._popper.update();
      } else {
        this._popper = Popper__namespace.createPopper(this._element, tip, this._getPopperConfig(attachment));
      }

      tip.classList.add(CLASS_NAME_SHOW$2);

      const customClass = this._resolvePossibleFunction(this._config.customClass);

      if (customClass) {
        tip.classList.add(...customClass.split(' '));
      } // If this is a touch-enabled device we add extra
      // empty mouseover listeners to the body's immediate children;
      // only needed because of broken event delegation on iOS
      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


      if ('ontouchstart' in document.documentElement) {
        [].concat(...document.body.children).forEach(element => {
          EventHandler.on(element, 'mouseover', noop);
        });
      }

      const complete = () => {
        const prevHoverState = this._hoverState;
        this._hoverState = null;
        EventHandler.trigger(this._element, this.constructor.Event.SHOWN);

        if (prevHoverState === HOVER_STATE_OUT) {
          this._leave(null, this);
        }
      };

      const isAnimated = this.tip.classList.contains(CLASS_NAME_FADE$2);

      this._queueCallback(complete, this.tip, isAnimated);
    }

    hide() {
      if (!this._popper) {
        return;
      }

      const tip = this.getTipElement();

      const complete = () => {
        if (this._isWithActiveTrigger()) {
          return;
        }

        if (this._hoverState !== HOVER_STATE_SHOW) {
          tip.remove();
        }

        this._cleanTipClass();

        this._element.removeAttribute('aria-describedby');

        EventHandler.trigger(this._element, this.constructor.Event.HIDDEN);

        if (this._popper) {
          this._popper.destroy();

          this._popper = null;
        }
      };

      const hideEvent = EventHandler.trigger(this._element, this.constructor.Event.HIDE);

      if (hideEvent.defaultPrevented) {
        return;
      }

      tip.classList.remove(CLASS_NAME_SHOW$2); // If this is a touch-enabled device we remove the extra
      // empty mouseover listeners we added for iOS support

      if ('ontouchstart' in document.documentElement) {
        [].concat(...document.body.children).forEach(element => EventHandler.off(element, 'mouseover', noop));
      }

      this._activeTrigger[TRIGGER_CLICK] = false;
      this._activeTrigger[TRIGGER_FOCUS] = false;
      this._activeTrigger[TRIGGER_HOVER] = false;
      const isAnimated = this.tip.classList.contains(CLASS_NAME_FADE$2);

      this._queueCallback(complete, this.tip, isAnimated);

      this._hoverState = '';
    }

    update() {
      if (this._popper !== null) {
        this._popper.update();
      }
    } // Protected


    isWithContent() {
      return Boolean(this.getTitle());
    }

    getTipElement() {
      if (this.tip) {
        return this.tip;
      }

      const element = document.createElement('div');
      element.innerHTML = this._config.template;
      const tip = element.children[0];
      this.setContent(tip);
      tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2);
      this.tip = tip;
      return this.tip;
    }

    setContent(tip) {
      this._sanitizeAndSetContent(tip, this.getTitle(), SELECTOR_TOOLTIP_INNER);
    }

    _sanitizeAndSetContent(template, content, selector) {
      const templateElement = SelectorEngine.findOne(selector, template);

      if (!content && templateElement) {
        templateElement.remove();
        return;
      } // we use append for html objects to maintain js events


      this.setElementContent(templateElement, content);
    }

    setElementContent(element, content) {
      if (element === null) {
        return;
      }

      if (isElement(content)) {
        content = getElement(content); // content is a DOM node or a jQuery

        if (this._config.html) {
          if (content.parentNode !== element) {
            element.innerHTML = '';
            element.append(content);
          }
        } else {
          element.textContent = content.textContent;
        }

        return;
      }

      if (this._config.html) {
        if (this._config.sanitize) {
          content = sanitizeHtml(content, this._config.allowList, this._config.sanitizeFn);
        }

        element.innerHTML = content;
      } else {
        element.textContent = content;
      }
    }

    getTitle() {
      const title = this._element.getAttribute('data-bs-original-title') || this._config.title;

      return this._resolvePossibleFunction(title);
    }

    updateAttachment(attachment) {
      if (attachment === 'right') {
        return 'end';
      }

      if (attachment === 'left') {
        return 'start';
      }

      return attachment;
    } // Private


    _initializeOnDelegatedTarget(event, context) {
      return context || this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());
    }

    _getOffset() {
      const {
        offset
      } = this._config;

      if (typeof offset === 'string') {
        return offset.split(',').map(val => Number.parseInt(val, 10));
      }

      if (typeof offset === 'function') {
        return popperData => offset(popperData, this._element);
      }

      return offset;
    }

    _resolvePossibleFunction(content) {
      return typeof content === 'function' ? content.call(this._element) : content;
    }

    _getPopperConfig(attachment) {
      const defaultBsPopperConfig = {
        placement: attachment,
        modifiers: [{
          name: 'flip',
          options: {
            fallbackPlacements: this._config.fallbackPlacements
          }
        }, {
          name: 'offset',
          options: {
            offset: this._getOffset()
          }
        }, {
          name: 'preventOverflow',
          options: {
            boundary: this._config.boundary
          }
        }, {
          name: 'arrow',
          options: {
            element: `.${this.constructor.NAME}-arrow`
          }
        }, {
          name: 'onChange',
          enabled: true,
          phase: 'afterWrite',
          fn: data => this._handlePopperPlacementChange(data)
        }],
        onFirstUpdate: data => {
          if (data.options.placement !== data.placement) {
            this._handlePopperPlacementChange(data);
          }
        }
      };
      return { ...defaultBsPopperConfig,
        ...(typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig)
      };
    }

    _addAttachmentClass(attachment) {
      this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(attachment)}`);
    }

    _getAttachment(placement) {
      return AttachmentMap[placement.toUpperCase()];
    }

    _setListeners() {
      const triggers = this._config.trigger.split(' ');

      triggers.forEach(trigger => {
        if (trigger === 'click') {
          EventHandler.on(this._element, this.constructor.Event.CLICK, this._config.selector, event => this.toggle(event));
        } else if (trigger !== TRIGGER_MANUAL) {
          const eventIn = trigger === TRIGGER_HOVER ? this.constructor.Event.MOUSEENTER : this.constructor.Event.FOCUSIN;
          const eventOut = trigger === TRIGGER_HOVER ? this.constructor.Event.MOUSELEAVE : this.constructor.Event.FOCUSOUT;
          EventHandler.on(this._element, eventIn, this._config.selector, event => this._enter(event));
          EventHandler.on(this._element, eventOut, this._config.selector, event => this._leave(event));
        }
      });

      this._hideModalHandler = () => {
        if (this._element) {
          this.hide();
        }
      };

      EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);

      if (this._config.selector) {
        this._config = { ...this._config,
          trigger: 'manual',
          selector: ''
        };
      } else {
        this._fixTitle();
      }
    }

    _fixTitle() {
      const title = this._element.getAttribute('title');

      const originalTitleType = typeof this._element.getAttribute('data-bs-original-title');

      if (title || originalTitleType !== 'string') {
        this._element.setAttribute('data-bs-original-title', title || '');

        if (title && !this._element.getAttribute('aria-label') && !this._element.textContent) {
          this._element.setAttribute('aria-label', title);
        }

        this._element.setAttribute('title', '');
      }
    }

    _enter(event, context) {
      context = this._initializeOnDelegatedTarget(event, context);

      if (event) {
        context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
      }

      if (context.getTipElement().classList.contains(CLASS_NAME_SHOW$2) || context._hoverState === HOVER_STATE_SHOW) {
        context._hoverState = HOVER_STATE_SHOW;
        return;
      }

      clearTimeout(context._timeout);
      context._hoverState = HOVER_STATE_SHOW;

      if (!context._config.delay || !context._config.delay.show) {
        context.show();
        return;
      }

      context._timeout = setTimeout(() => {
        if (context._hoverState === HOVER_STATE_SHOW) {
          context.show();
        }
      }, context._config.delay.show);
    }

    _leave(event, context) {
      context = this._initializeOnDelegatedTarget(event, context);

      if (event) {
        context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);
      }

      if (context._isWithActiveTrigger()) {
        return;
      }

      clearTimeout(context._timeout);
      context._hoverState = HOVER_STATE_OUT;

      if (!context._config.delay || !context._config.delay.hide) {
        context.hide();
        return;
      }

      context._timeout = setTimeout(() => {
        if (context._hoverState === HOVER_STATE_OUT) {
          context.hide();
        }
      }, context._config.delay.hide);
    }

    _isWithActiveTrigger() {
      for (const trigger in this._activeTrigger) {
        if (this._activeTrigger[trigger]) {
          return true;
        }
      }

      return false;
    }

    _getConfig(config) {
      const dataAttributes = Manipulator.getDataAttributes(this._element);
      Object.keys(dataAttributes).forEach(dataAttr => {
        if (DISALLOWED_ATTRIBUTES.has(dataAttr)) {
          delete dataAttributes[dataAttr];
        }
      });
      config = { ...this.constructor.Default,
        ...dataAttributes,
        ...(typeof config === 'object' && config ? config : {})
      };
      config.container = config.container === false ? document.body : getElement(config.container);

      if (typeof config.delay === 'number') {
        config.delay = {
          show: config.delay,
          hide: config.delay
        };
      }

      if (typeof config.title === 'number') {
        config.title = config.title.toString();
      }

      if (typeof config.content === 'number') {
        config.content = config.content.toString();
      }

      typeCheckConfig(NAME$4, config, this.constructor.DefaultType);

      if (config.sanitize) {
        config.template = sanitizeHtml(config.template, config.allowList, config.sanitizeFn);
      }

      return config;
    }

    _getDelegateConfig() {
      const config = {};

      for (const key in this._config) {
        if (this.constructor.Default[key] !== this._config[key]) {
          config[key] = this._config[key];
        }
      } // In the future can be replaced with:
      // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])
      // `Object.fromEntries(keysWithDifferentValues)`


      return config;
    }

    _cleanTipClass() {
      const tip = this.getTipElement();
      const basicClassPrefixRegex = new RegExp(`(^|\\s)${this._getBasicClassPrefix()}\\S+`, 'g');
      const tabClass = tip.getAttribute('class').match(basicClassPrefixRegex);

      if (tabClass !== null && tabClass.length > 0) {
        tabClass.map(token => token.trim()).forEach(tClass => tip.classList.remove(tClass));
      }
    }

    _getBasicClassPrefix() {
      return CLASS_PREFIX$1;
    }

    _handlePopperPlacementChange(popperData) {
      const {
        state
      } = popperData;

      if (!state) {
        return;
      }

      this.tip = state.elements.popper;

      this._cleanTipClass();

      this._addAttachmentClass(this._getAttachment(state.placement));
    } // Static


    static jQueryInterface(config) {
      return this.each(function () {
        const data = Tooltip.getOrCreateInstance(this, config);

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError(`No method named "${config}"`);
          }

          data[config]();
        }
      });
    }

  }
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Tooltip to jQuery only if jQuery is present
   */


  defineJQueryPlugin(Tooltip);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): popover.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  const NAME$3 = 'popover';
  const DATA_KEY$3 = 'bs.popover';
  const EVENT_KEY$3 = `.${DATA_KEY$3}`;
  const CLASS_PREFIX = 'bs-popover';
  const Default$2 = { ...Tooltip.Default,
    placement: 'right',
    offset: [0, 8],
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip">' + '<div class="popover-arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div>' + '</div>'
  };
  const DefaultType$2 = { ...Tooltip.DefaultType,
    content: '(string|element|function)'
  };
  const Event$1 = {
    HIDE: `hide${EVENT_KEY$3}`,
    HIDDEN: `hidden${EVENT_KEY$3}`,
    SHOW: `show${EVENT_KEY$3}`,
    SHOWN: `shown${EVENT_KEY$3}`,
    INSERTED: `inserted${EVENT_KEY$3}`,
    CLICK: `click${EVENT_KEY$3}`,
    FOCUSIN: `focusin${EVENT_KEY$3}`,
    FOCUSOUT: `focusout${EVENT_KEY$3}`,
    MOUSEENTER: `mouseenter${EVENT_KEY$3}`,
    MOUSELEAVE: `mouseleave${EVENT_KEY$3}`
  };
  const SELECTOR_TITLE = '.popover-header';
  const SELECTOR_CONTENT = '.popover-body';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  class Popover extends Tooltip {
    // Getters
    static get Default() {
      return Default$2;
    }

    static get NAME() {
      return NAME$3;
    }

    static get Event() {
      return Event$1;
    }

    static get DefaultType() {
      return DefaultType$2;
    } // Overrides


    isWithContent() {
      return this.getTitle() || this._getContent();
    }

    setContent(tip) {
      this._sanitizeAndSetContent(tip, this.getTitle(), SELECTOR_TITLE);

      this._sanitizeAndSetContent(tip, this._getContent(), SELECTOR_CONTENT);
    } // Private


    _getContent() {
      return this._resolvePossibleFunction(this._config.content);
    }

    _getBasicClassPrefix() {
      return CLASS_PREFIX;
    } // Static


    static jQueryInterface(config) {
      return this.each(function () {
        const data = Popover.getOrCreateInstance(this, config);

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError(`No method named "${config}"`);
          }

          data[config]();
        }
      });
    }

  }
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Popover to jQuery only if jQuery is present
   */


  defineJQueryPlugin(Popover);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): scrollspy.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  const NAME$2 = 'scrollspy';
  const DATA_KEY$2 = 'bs.scrollspy';
  const EVENT_KEY$2 = `.${DATA_KEY$2}`;
  const DATA_API_KEY$1 = '.data-api';
  const Default$1 = {
    offset: 10,
    method: 'auto',
    target: ''
  };
  const DefaultType$1 = {
    offset: 'number',
    method: 'string',
    target: '(string|element)'
  };
  const EVENT_ACTIVATE = `activate${EVENT_KEY$2}`;
  const EVENT_SCROLL = `scroll${EVENT_KEY$2}`;
  const EVENT_LOAD_DATA_API = `load${EVENT_KEY$2}${DATA_API_KEY$1}`;
  const CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';
  const CLASS_NAME_ACTIVE$1 = 'active';
  const SELECTOR_DATA_SPY = '[data-bs-spy="scroll"]';
  const SELECTOR_NAV_LIST_GROUP$1 = '.nav, .list-group';
  const SELECTOR_NAV_LINKS = '.nav-link';
  const SELECTOR_NAV_ITEMS = '.nav-item';
  const SELECTOR_LIST_ITEMS = '.list-group-item';
  const SELECTOR_LINK_ITEMS = `${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}, .${CLASS_NAME_DROPDOWN_ITEM}`;
  const SELECTOR_DROPDOWN$1 = '.dropdown';
  const SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';
  const METHOD_OFFSET = 'offset';
  const METHOD_POSITION = 'position';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  class ScrollSpy extends BaseComponent {
    constructor(element, config) {
      super(element);
      this._scrollElement = this._element.tagName === 'BODY' ? window : this._element;
      this._config = this._getConfig(config);
      this._offsets = [];
      this._targets = [];
      this._activeTarget = null;
      this._scrollHeight = 0;
      EventHandler.on(this._scrollElement, EVENT_SCROLL, () => this._process());
      this.refresh();

      this._process();
    } // Getters


    static get Default() {
      return Default$1;
    }

    static get NAME() {
      return NAME$2;
    } // Public


    refresh() {
      const autoMethod = this._scrollElement === this._scrollElement.window ? METHOD_OFFSET : METHOD_POSITION;
      const offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;
      const offsetBase = offsetMethod === METHOD_POSITION ? this._getScrollTop() : 0;
      this._offsets = [];
      this._targets = [];
      this._scrollHeight = this._getScrollHeight();
      const targets = SelectorEngine.find(SELECTOR_LINK_ITEMS, this._config.target);
      targets.map(element => {
        const targetSelector = getSelectorFromElement(element);
        const target = targetSelector ? SelectorEngine.findOne(targetSelector) : null;

        if (target) {
          const targetBCR = target.getBoundingClientRect();

          if (targetBCR.width || targetBCR.height) {
            return [Manipulator[offsetMethod](target).top + offsetBase, targetSelector];
          }
        }

        return null;
      }).filter(item => item).sort((a, b) => a[0] - b[0]).forEach(item => {
        this._offsets.push(item[0]);

        this._targets.push(item[1]);
      });
    }

    dispose() {
      EventHandler.off(this._scrollElement, EVENT_KEY$2);
      super.dispose();
    } // Private


    _getConfig(config) {
      config = { ...Default$1,
        ...Manipulator.getDataAttributes(this._element),
        ...(typeof config === 'object' && config ? config : {})
      };
      config.target = getElement(config.target) || document.documentElement;
      typeCheckConfig(NAME$2, config, DefaultType$1);
      return config;
    }

    _getScrollTop() {
      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
    }

    _getScrollHeight() {
      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
    }

    _getOffsetHeight() {
      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
    }

    _process() {
      const scrollTop = this._getScrollTop() + this._config.offset;

      const scrollHeight = this._getScrollHeight();

      const maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();

      if (this._scrollHeight !== scrollHeight) {
        this.refresh();
      }

      if (scrollTop >= maxScroll) {
        const target = this._targets[this._targets.length - 1];

        if (this._activeTarget !== target) {
          this._activate(target);
        }

        return;
      }

      if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
        this._activeTarget = null;

        this._clear();

        return;
      }

      for (let i = this._offsets.length; i--;) {
        const isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);

        if (isActiveTarget) {
          this._activate(this._targets[i]);
        }
      }
    }

    _activate(target) {
      this._activeTarget = target;

      this._clear();

      const queries = SELECTOR_LINK_ITEMS.split(',').map(selector => `${selector}[data-bs-target="${target}"],${selector}[href="${target}"]`);
      const link = SelectorEngine.findOne(queries.join(','), this._config.target);
      link.classList.add(CLASS_NAME_ACTIVE$1);

      if (link.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {
        SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, link.closest(SELECTOR_DROPDOWN$1)).classList.add(CLASS_NAME_ACTIVE$1);
      } else {
        SelectorEngine.parents(link, SELECTOR_NAV_LIST_GROUP$1).forEach(listGroup => {
          // Set triggered links parents as active
          // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor
          SelectorEngine.prev(listGroup, `${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}`).forEach(item => item.classList.add(CLASS_NAME_ACTIVE$1)); // Handle special case when .nav-link is inside .nav-item

          SelectorEngine.prev(listGroup, SELECTOR_NAV_ITEMS).forEach(navItem => {
            SelectorEngine.children(navItem, SELECTOR_NAV_LINKS).forEach(item => item.classList.add(CLASS_NAME_ACTIVE$1));
          });
        });
      }

      EventHandler.trigger(this._scrollElement, EVENT_ACTIVATE, {
        relatedTarget: target
      });
    }

    _clear() {
      SelectorEngine.find(SELECTOR_LINK_ITEMS, this._config.target).filter(node => node.classList.contains(CLASS_NAME_ACTIVE$1)).forEach(node => node.classList.remove(CLASS_NAME_ACTIVE$1));
    } // Static


    static jQueryInterface(config) {
      return this.each(function () {
        const data = ScrollSpy.getOrCreateInstance(this, config);

        if (typeof config !== 'string') {
          return;
        }

        if (typeof data[config] === 'undefined') {
          throw new TypeError(`No method named "${config}"`);
        }

        data[config]();
      });
    }

  }
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  EventHandler.on(window, EVENT_LOAD_DATA_API, () => {
    SelectorEngine.find(SELECTOR_DATA_SPY).forEach(spy => new ScrollSpy(spy));
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .ScrollSpy to jQuery only if jQuery is present
   */

  defineJQueryPlugin(ScrollSpy);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): tab.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  const NAME$1 = 'tab';
  const DATA_KEY$1 = 'bs.tab';
  const EVENT_KEY$1 = `.${DATA_KEY$1}`;
  const DATA_API_KEY = '.data-api';
  const EVENT_HIDE$1 = `hide${EVENT_KEY$1}`;
  const EVENT_HIDDEN$1 = `hidden${EVENT_KEY$1}`;
  const EVENT_SHOW$1 = `show${EVENT_KEY$1}`;
  const EVENT_SHOWN$1 = `shown${EVENT_KEY$1}`;
  const EVENT_CLICK_DATA_API = `click${EVENT_KEY$1}${DATA_API_KEY}`;
  const CLASS_NAME_DROPDOWN_MENU = 'dropdown-menu';
  const CLASS_NAME_ACTIVE = 'active';
  const CLASS_NAME_FADE$1 = 'fade';
  const CLASS_NAME_SHOW$1 = 'show';
  const SELECTOR_DROPDOWN = '.dropdown';
  const SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';
  const SELECTOR_ACTIVE = '.active';
  const SELECTOR_ACTIVE_UL = ':scope > li > .active';
  const SELECTOR_DATA_TOGGLE = '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]';
  const SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';
  const SELECTOR_DROPDOWN_ACTIVE_CHILD = ':scope > .dropdown-menu .active';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  class Tab extends BaseComponent {
    // Getters
    static get NAME() {
      return NAME$1;
    } // Public


    show() {
      if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.classList.contains(CLASS_NAME_ACTIVE)) {
        return;
      }

      let previous;
      const target = getElementFromSelector(this._element);

      const listElement = this._element.closest(SELECTOR_NAV_LIST_GROUP);

      if (listElement) {
        const itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? SELECTOR_ACTIVE_UL : SELECTOR_ACTIVE;
        previous = SelectorEngine.find(itemSelector, listElement);
        previous = previous[previous.length - 1];
      }

      const hideEvent = previous ? EventHandler.trigger(previous, EVENT_HIDE$1, {
        relatedTarget: this._element
      }) : null;
      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$1, {
        relatedTarget: previous
      });

      if (showEvent.defaultPrevented || hideEvent !== null && hideEvent.defaultPrevented) {
        return;
      }

      this._activate(this._element, listElement);

      const complete = () => {
        EventHandler.trigger(previous, EVENT_HIDDEN$1, {
          relatedTarget: this._element
        });
        EventHandler.trigger(this._element, EVENT_SHOWN$1, {
          relatedTarget: previous
        });
      };

      if (target) {
        this._activate(target, target.parentNode, complete);
      } else {
        complete();
      }
    } // Private


    _activate(element, container, callback) {
      const activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? SelectorEngine.find(SELECTOR_ACTIVE_UL, container) : SelectorEngine.children(container, SELECTOR_ACTIVE);
      const active = activeElements[0];
      const isTransitioning = callback && active && active.classList.contains(CLASS_NAME_FADE$1);

      const complete = () => this._transitionComplete(element, active, callback);

      if (active && isTransitioning) {
        active.classList.remove(CLASS_NAME_SHOW$1);

        this._queueCallback(complete, element, true);
      } else {
        complete();
      }
    }

    _transitionComplete(element, active, callback) {
      if (active) {
        active.classList.remove(CLASS_NAME_ACTIVE);
        const dropdownChild = SelectorEngine.findOne(SELECTOR_DROPDOWN_ACTIVE_CHILD, active.parentNode);

        if (dropdownChild) {
          dropdownChild.classList.remove(CLASS_NAME_ACTIVE);
        }

        if (active.getAttribute('role') === 'tab') {
          active.setAttribute('aria-selected', false);
        }
      }

      element.classList.add(CLASS_NAME_ACTIVE);

      if (element.getAttribute('role') === 'tab') {
        element.setAttribute('aria-selected', true);
      }

      reflow(element);

      if (element.classList.contains(CLASS_NAME_FADE$1)) {
        element.classList.add(CLASS_NAME_SHOW$1);
      }

      let parent = element.parentNode;

      if (parent && parent.nodeName === 'LI') {
        parent = parent.parentNode;
      }

      if (parent && parent.classList.contains(CLASS_NAME_DROPDOWN_MENU)) {
        const dropdownElement = element.closest(SELECTOR_DROPDOWN);

        if (dropdownElement) {
          SelectorEngine.find(SELECTOR_DROPDOWN_TOGGLE, dropdownElement).forEach(dropdown => dropdown.classList.add(CLASS_NAME_ACTIVE));
        }

        element.setAttribute('aria-expanded', true);
      }

      if (callback) {
        callback();
      }
    } // Static


    static jQueryInterface(config) {
      return this.each(function () {
        const data = Tab.getOrCreateInstance(this);

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError(`No method named "${config}"`);
          }

          data[config]();
        }
      });
    }

  }
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {
    if (['A', 'AREA'].includes(this.tagName)) {
      event.preventDefault();
    }

    if (isDisabled(this)) {
      return;
    }

    const data = Tab.getOrCreateInstance(this);
    data.show();
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Tab to jQuery only if jQuery is present
   */

  defineJQueryPlugin(Tab);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): toast.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  const NAME = 'toast';
  const DATA_KEY = 'bs.toast';
  const EVENT_KEY = `.${DATA_KEY}`;
  const EVENT_MOUSEOVER = `mouseover${EVENT_KEY}`;
  const EVENT_MOUSEOUT = `mouseout${EVENT_KEY}`;
  const EVENT_FOCUSIN = `focusin${EVENT_KEY}`;
  const EVENT_FOCUSOUT = `focusout${EVENT_KEY}`;
  const EVENT_HIDE = `hide${EVENT_KEY}`;
  const EVENT_HIDDEN = `hidden${EVENT_KEY}`;
  const EVENT_SHOW = `show${EVENT_KEY}`;
  const EVENT_SHOWN = `shown${EVENT_KEY}`;
  const CLASS_NAME_FADE = 'fade';
  const CLASS_NAME_HIDE = 'hide'; // @deprecated - kept here only for backwards compatibility

  const CLASS_NAME_SHOW = 'show';
  const CLASS_NAME_SHOWING = 'showing';
  const DefaultType = {
    animation: 'boolean',
    autohide: 'boolean',
    delay: 'number'
  };
  const Default = {
    animation: true,
    autohide: true,
    delay: 5000
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  class Toast extends BaseComponent {
    constructor(element, config) {
      super(element);
      this._config = this._getConfig(config);
      this._timeout = null;
      this._hasMouseInteraction = false;
      this._hasKeyboardInteraction = false;

      this._setListeners();
    } // Getters


    static get DefaultType() {
      return DefaultType;
    }

    static get Default() {
      return Default;
    }

    static get NAME() {
      return NAME;
    } // Public


    show() {
      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW);

      if (showEvent.defaultPrevented) {
        return;
      }

      this._clearTimeout();

      if (this._config.animation) {
        this._element.classList.add(CLASS_NAME_FADE);
      }

      const complete = () => {
        this._element.classList.remove(CLASS_NAME_SHOWING);

        EventHandler.trigger(this._element, EVENT_SHOWN);

        this._maybeScheduleHide();
      };

      this._element.classList.remove(CLASS_NAME_HIDE); // @deprecated


      reflow(this._element);

      this._element.classList.add(CLASS_NAME_SHOW);

      this._element.classList.add(CLASS_NAME_SHOWING);

      this._queueCallback(complete, this._element, this._config.animation);
    }

    hide() {
      if (!this._element.classList.contains(CLASS_NAME_SHOW)) {
        return;
      }

      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);

      if (hideEvent.defaultPrevented) {
        return;
      }

      const complete = () => {
        this._element.classList.add(CLASS_NAME_HIDE); // @deprecated


        this._element.classList.remove(CLASS_NAME_SHOWING);

        this._element.classList.remove(CLASS_NAME_SHOW);

        EventHandler.trigger(this._element, EVENT_HIDDEN);
      };

      this._element.classList.add(CLASS_NAME_SHOWING);

      this._queueCallback(complete, this._element, this._config.animation);
    }

    dispose() {
      this._clearTimeout();

      if (this._element.classList.contains(CLASS_NAME_SHOW)) {
        this._element.classList.remove(CLASS_NAME_SHOW);
      }

      super.dispose();
    } // Private


    _getConfig(config) {
      config = { ...Default,
        ...Manipulator.getDataAttributes(this._element),
        ...(typeof config === 'object' && config ? config : {})
      };
      typeCheckConfig(NAME, config, this.constructor.DefaultType);
      return config;
    }

    _maybeScheduleHide() {
      if (!this._config.autohide) {
        return;
      }

      if (this._hasMouseInteraction || this._hasKeyboardInteraction) {
        return;
      }

      this._timeout = setTimeout(() => {
        this.hide();
      }, this._config.delay);
    }

    _onInteraction(event, isInteracting) {
      switch (event.type) {
        case 'mouseover':
        case 'mouseout':
          this._hasMouseInteraction = isInteracting;
          break;

        case 'focusin':
        case 'focusout':
          this._hasKeyboardInteraction = isInteracting;
          break;
      }

      if (isInteracting) {
        this._clearTimeout();

        return;
      }

      const nextElement = event.relatedTarget;

      if (this._element === nextElement || this._element.contains(nextElement)) {
        return;
      }

      this._maybeScheduleHide();
    }

    _setListeners() {
      EventHandler.on(this._element, EVENT_MOUSEOVER, event => this._onInteraction(event, true));
      EventHandler.on(this._element, EVENT_MOUSEOUT, event => this._onInteraction(event, false));
      EventHandler.on(this._element, EVENT_FOCUSIN, event => this._onInteraction(event, true));
      EventHandler.on(this._element, EVENT_FOCUSOUT, event => this._onInteraction(event, false));
    }

    _clearTimeout() {
      clearTimeout(this._timeout);
      this._timeout = null;
    } // Static


    static jQueryInterface(config) {
      return this.each(function () {
        const data = Toast.getOrCreateInstance(this, config);

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError(`No method named "${config}"`);
          }

          data[config](this);
        }
      });
    }

  }

  enableDismissTrigger(Toast);
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Toast to jQuery only if jQuery is present
   */

  defineJQueryPlugin(Toast);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.0): index.umd.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  var index_umd = {
    Alert,
    Button,
    Carousel,
    Collapse,
    Dropdown,
    Modal,
    Offcanvas,
    Popover,
    ScrollSpy,
    Tab,
    Toast,
    Tooltip
  };

  return index_umd;

})));
//# sourceMappingURL=bootstrap.js.map


/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),

/***/ "./node_modules/bootstrap/dist/css/bootstrap-grid.min.css":
/*!****************************************************************!*\
  !*** ./node_modules/bootstrap/dist/css/bootstrap-grid.min.css ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./node_modules/bootstrap/dist/css/bootstrap-reboot.min.css":
/*!******************************************************************!*\
  !*** ./node_modules/bootstrap/dist/css/bootstrap-reboot.min.css ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./node_modules/bootstrap/dist/css/bootstrap-utilities.min.css":
/*!*********************************************************************!*\
  !*** ./node_modules/bootstrap/dist/css/bootstrap-utilities.min.css ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./node_modules/bootstrap/dist/css/bootstrap.min.css":
/*!***********************************************************!*\
  !*** ./node_modules/bootstrap/dist/css/bootstrap.min.css ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/assets/css/player.css":
/*!***********************************!*\
  !*** ./src/assets/css/player.css ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/NativeDOMDelegate.ts":
/*!**********************************!*\
  !*** ./src/NativeDOMDelegate.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OverlayBase": () => (/* binding */ OverlayBase),
/* harmony export */   "ActionOverlayBase": () => (/* binding */ ActionOverlayBase),
/* harmony export */   "AfkOverlayBase": () => (/* binding */ AfkOverlayBase),
/* harmony export */   "TextOverlayBase": () => (/* binding */ TextOverlayBase),
/* harmony export */   "VideoQpIndicator": () => (/* binding */ VideoQpIndicator),
/* harmony export */   "FullScreenLogic": () => (/* binding */ FullScreenLogic),
/* harmony export */   "NativeDOMDelegate": () => (/* binding */ NativeDOMDelegate)
/* harmony export */ });
/* harmony import */ var _assets_css_player_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assets/css/player.css */ "./src/assets/css/player.css");
/* harmony import */ var _assets_images_Play_png__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assets/images/Play.png */ "./src/assets/images/Play.png");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tensorworks/libspsfrontend */ "./node_modules/@tensorworks/libspsfrontend/dist/libspsfrontend.min.js");
/* harmony import */ var _tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};




/**
 * Class for the base overlay structure
 */
var OverlayBase = /** @class */ (function () {
    /**
     * Construct an overlay
     * @param rootDiv the root element this overlay will be inserted into
     * @param rootElement the root element that is the overlay
     */
    function OverlayBase(rootDiv, rootElement, textElement) {
        this.rootDiv = rootDiv;
        this.rootElement = rootElement;
        this.textElement = textElement;
        this.rootElement.appendChild(this.textElement);
        this.hide();
        this.rootDiv.appendChild(this.rootElement);
    }
    /**
     * Show the overlay
     */
    OverlayBase.prototype.show = function () {
        this.rootElement.classList.remove("hiddenState");
    };
    /**
     * Hide the overlay
     */
    OverlayBase.prototype.hide = function () {
        this.rootElement.classList.add("hiddenState");
    };
    return OverlayBase;
}());

/**
 * Class for the base action overlay structure
 */
var ActionOverlayBase = /** @class */ (function (_super) {
    __extends(ActionOverlayBase, _super);
    /**
     * Construct an action overlay
     * @param rootDiv the root element this overlay will be inserted into
     * @param rootElement the root element that is the overlay
     * @param contentElement an element that contains text for the action overlay
     */
    function ActionOverlayBase(rootDiv, rootElement, contentElement, contentElementSpanId) {
        var _this = _super.call(this, rootDiv, rootElement, contentElement) || this;
        _this.eventEmitter = new events__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
        _this.contentElementSpanId = contentElementSpanId;
        return _this;
    }
    /**
     * Update the text overlays inner text
     * @param text the update text to be inserted into the overlay
     */
    ActionOverlayBase.prototype.update = function (text) {
        if ((text != null || text != undefined) && (this.contentElementSpanId != null || this.contentElementSpanId != undefined)) {
            document.getElementById(this.contentElementSpanId).innerHTML = text;
        }
    };
    /**
     * Set a method as an event emitter callback
     * @param callBack the method that is to be called when the event is emitted
     */
    ActionOverlayBase.prototype.onAction = function (callBack) {
        this.eventEmitter.on("action", callBack);
    };
    /**
     * Activate an event that is attached to the event emitter
     */
    ActionOverlayBase.prototype.activate = function () {
        this.eventEmitter.emit("action");
    };
    return ActionOverlayBase;
}(OverlayBase));

/**
 * Class for the afk overlay base
 */
var AfkOverlayBase = /** @class */ (function (_super) {
    __extends(AfkOverlayBase, _super);
    /**
     * Construct an Afk overlay
     * @param rootDiv the root element this overlay will be inserted into
     * @param rootElement the root element that is the overlay
     * @param textElement an element that contains text for the action overlay
     * @param countDownSpanElementId the id of the span that holds the countdown element
     */
    function AfkOverlayBase(rootDiv, rootElement, textElement, countDownSpanElementId) {
        var _this = _super.call(this, rootDiv, rootElement, textElement) || this;
        _this.countDownSpanElementId = countDownSpanElementId;
        return _this;
    }
    /**
     * Update the count down spans number for the overlay
     * @param countdown the count down number to be inserted into the span for updating
     */
    AfkOverlayBase.prototype.updateCountdown = function (countdown) {
        document.getElementById(this.countDownSpanElementId).innerHTML = countdown.toString();
    };
    return AfkOverlayBase;
}(ActionOverlayBase));

/**
 * Class for the text overlay base
 */
var TextOverlayBase = /** @class */ (function (_super) {
    __extends(TextOverlayBase, _super);
    /**
     * Construct a text overlay
     * @param rootDiv the root element this overlay will be inserted into
     * @param rootElement the root element that is the overlay
     * @param textElement an element that contains text for the action overlay
     */
    function TextOverlayBase(rootDiv, rootElement, textElement) {
        return _super.call(this, rootDiv, rootElement, textElement) || this;
    }
    /**
     * Update the text overlays inner text
     * @param text the update text to be inserted into the overlay
     */
    TextOverlayBase.prototype.update = function (text) {
        if (text != null || text != undefined) {
            this.textElement.innerHTML = text;
        }
    };
    return TextOverlayBase;
}(OverlayBase));

/**
 * Class for the VideoQp indicator
 */
var VideoQpIndicator = /** @class */ (function () {
    /**
     * construct a VideoQpIndicator object
     * @param qualityStatusId the html id of the qualityStatus element
     * @param qualityTextId the html id of the qualityText element
     * @param outerId the html id of the outer element
     * @param middleId the html id of the middle element
     * @param innerId the html id of the inner element
     * @param dotId the html id of the dot element
     */
    function VideoQpIndicator(qualityStatusId, qualityTextId, outerId, middleId, innerId, dotId) {
        this.videoEncoderAvgQP = -1;
        // non html elements 
        this.statsText = "";
        this.color = "";
        // qp colours 
        this.orangeQP = 26;
        this.redQP = 35;
        this.qualityStatus = document.getElementById(qualityStatusId);
        this.qualityText = document.getElementById(qualityTextId);
        this.outer = document.getElementById(outerId);
        this.middle = document.getElementById(middleId);
        this.inner = document.getElementById(innerId);
        this.dot = document.getElementById(dotId);
    }
    /**
     * used to set the speed of the status light
     * @param speed - Set the speed of the blink if the status light higher the speed the faster the blink
     */
    VideoQpIndicator.prototype.blinkVideoQualityStatus = function (speed) {
        var _this = this;
        var iteration = speed;
        var opacity = 1;
        var tickID = setInterval(function () {
            opacity -= 0.1;
            _this.qualityText.style.opacity = String(Math.abs((opacity - 0.5) * 2));
            if (opacity <= 0.1) {
                if (--iteration == 0) {
                    clearInterval(tickID);
                }
                else {
                    opacity = 1;
                }
            }
        }, 100 / speed);
    };
    /**
      * updates the QP tooltip by converting the Video Encoder QP to a colour light
      * @param QP - The video encoder QP number needed to find the average
      */
    VideoQpIndicator.prototype.updateQpTooltip = function (QP) {
        this.videoEncoderAvgQP = QP;
        if (QP > this.redQP) {
            this.color = "red";
            this.blinkVideoQualityStatus(2);
            this.statsText = "<div style=\"color: " + this.color + "\">Poor encoding quality</div>";
            this.outer.style.fill = "#3c3b40";
            this.middle.style.fill = "#3c3b40";
            this.inner.style.fill = this.color;
            this.dot.style.fill = this.color;
        }
        else if (QP > this.orangeQP) {
            this.color = "orange";
            this.blinkVideoQualityStatus(1);
            this.statsText = "<div style=\"color: " + this.color + "\">Blocky encoding quality</div>";
            this.outer.style.fill = "#3c3b40";
            this.middle.style.fill = this.color;
            this.inner.style.fill = this.color;
            this.dot.style.fill = this.color;
        }
        else if (QP <= 0) {
            this.color = "#b0b0b0";
            this.outer.style.fill = "#3c3b40";
            this.middle.style.fill = "#3c3b40";
            this.inner.style.fill = "#3c3b40";
            this.dot.style.fill = "#3c3b40";
            this.statsText = "<div style=\"color: " + this.color + "\">Not connected</div>";
        }
        else {
            this.color = "lime";
            this.qualityStatus.style.opacity = '1';
            this.statsText = "<div style=\"color: " + this.color + "\">Clear encoding quality</div>";
            this.outer.style.fill = this.color;
            this.middle.style.fill = this.color;
            this.inner.style.fill = this.color;
            this.dot.style.fill = this.color;
        }
        this.qualityText.innerHTML = this.statsText;
    };
    return VideoQpIndicator;
}());

/**
 * Class for handling fullscreen logic
 */
var FullScreenLogic = /** @class */ (function () {
    /**
     * Construct a FullScreenLogic object
     */
    function FullScreenLogic() {
        var _this = this;
        this.isFullscreen = false;
        document.getElementById("fullscreen-btn").onclick = function () { return _this.fullscreen(); };
        // set up the full screen events
        document.addEventListener('webkitfullscreenchange', function () { return _this.onFullscreenChange(); }, false);
        document.addEventListener('mozfullscreenchange', function () { return _this.onFullscreenChange(); }, false);
        document.addEventListener('fullscreenchange', function () { return _this.onFullscreenChange(); }, false);
        document.addEventListener('MSFullscreenChange', function () { return _this.onFullscreenChange(); }, false);
    }
    /**
     * Makes the document fullscreen
     * @returns
     */
    FullScreenLogic.prototype.fullscreen = function () {
        // if already full screen; exit
        // else go fullscreen
        if (document.fullscreenElement ||
            document.webkitFullscreenElement ||
            document.mozFullScreenElement ||
            document.msFullscreenElement) {
            if (document.exitFullscreen) {
                document.exitFullscreen();
            }
            else if (document.mozCancelFullScreen) {
                document.mozCancelFullScreen();
            }
            else if (document.webkitExitFullscreen) {
                document.webkitExitFullscreen();
            }
            else if (document.msExitFullscreen) {
                document.msExitFullscreen();
            }
        }
        else {
            var element = void 0;
            //HTML elements controls
            if (!(document.fullscreenEnabled || document.webkitFullscreenEnabled)) {
                element = document.getElementById("streamingVideo");
            }
            else {
                element = document.getElementById("playerUI");
            }
            if (!element) {
                return;
            }
            if (element.requestFullscreen) {
                element.requestFullscreen();
            }
            else if (element.mozRequestFullScreen) {
                element.mozRequestFullScreen();
            }
            else if (element.webkitRequestFullscreen) {
                element.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
            }
            else if (element.msRequestFullscreen) {
                element.msRequestFullscreen();
            }
            else if (element.webkitEnterFullscreen) {
                element.webkitEnterFullscreen(); //for iphone this code worked
            }
        }
        this.onFullscreenChange();
    };
    /**
     * Handles the fullscreen button on change
     */
    FullScreenLogic.prototype.onFullscreenChange = function () {
        this.isFullscreen = (document.webkitIsFullScreen
            || document.mozFullScreen
            || (document.msFullscreenElement && document.msFullscreenElement !== null)
            || (document.fullscreenElement && document.fullscreenElement !== null));
        var minimize = document.getElementById('minimizeIcon');
        var maximize = document.getElementById('maximizeIcon');
        if (minimize && maximize) {
            if (this.isFullscreen) {
                minimize.style.display = 'inline';
                //ios disappearing svg fix
                minimize.style.transform = 'translate(0, 0)';
                maximize.style.display = 'none';
            }
            else {
                minimize.style.display = 'none';
                maximize.style.display = 'inline';
                //ios disappearing svg fix
                maximize.style.transform = 'translate(0, 0)';
            }
        }
    };
    return FullScreenLogic;
}());

var NativeDOMDelegate = /** @class */ (function (_super) {
    __extends(NativeDOMDelegate, _super);
    function NativeDOMDelegate(config) {
        var _this = _super.call(this, config) || this;
        // settings and stats panels
        _this.settingsPanel = document.getElementById('settings-panel');
        _this.statsPanel = document.getElementById('stats-panel');
        // Pre Stream options
        _this.forceTurnToggle = document.getElementById("force-turn-tgl");
        // Viewing
        _this.enlargeDisplayToFillWindow = document.getElementById("enlarge-display-to-fill-window-tgl");
        _this.qualityControlOwnershipCheckBox = document.getElementById("quality-control-ownership-tgl");
        _this.toggleMatchViewPortRes = document.getElementById("match-viewport-res-tgl");
        _this.controlSchemeToggle = document.getElementById("control-scheme-tgl");
        _this.controlSchemeToggleTitle = document.getElementById("control-scheme-title");
        // Commands
        _this.uiDescriptorText = document.getElementById("ui-descriptor-text");
        // Settings
        _this.encoderMinQpText = document.getElementById("encoder-min-qp-text");
        _this.encoderMaxQpText = document.getElementById("encoder-max-qp-text");
        _this.webRtcFpsText = document.getElementById("webrtc-fps-text");
        _this.webRtcMinBitrateText = document.getElementById("webrtc-min-bitrate-text");
        _this.webRtcMaxBitrateText = document.getElementById("webrtc-max-bitrate-text");
        // Statistics
        _this.sendStatsToServer = document.getElementById("send-stats-tgl");
        // Containers Headers
        _this.preStreamContainer = document.getElementById("preStreamOptionsHeader");
        _this.viewSettingsHeader = document.getElementById("viewSettingsHeader");
        _this.commandsHeader = document.getElementById("commandsHeader");
        _this.streamingSettingsHeader = document.getElementById("streamingSettingsHeader");
        _this.statsHeader = document.getElementById("statisticsHeader");
        _this.latencyHeader = document.getElementById("latencyTestHeader");
        // Containers
        _this.viewSettingsContainer = document.getElementById("viewSettingsContainer");
        _this.commandsContainer = document.getElementById("commandsContainer");
        _this.streamingSettingsContainer = document.getElementById("streamingSettingsContainer");
        _this.statsContainer = document.getElementById("statisticsContainer");
        _this.latencyContainer = document.getElementById("latencyTestContainer");
        _this.showStats = true;
        _this.videoQpIndicator = new VideoQpIndicator("connectionStrength", "qualityText", "outer", "middle", "inner", "dot");
        _this.fullScreenLogic = new FullScreenLogic();
        // build all of the overlays 
        _this.buildDisconnectOverlay();
        _this.buildConnectOverlay();
        _this.buildPlayOverlay();
        _this.buildAfkOverlay();
        _this.buildInfoOverlay();
        _this.buildErrorOverlay();
        // configure all buttons 
        _this.ConfigureButtons();
        return _this;
    }
    /**
     * Builds the disconnect overlay
     */
    NativeDOMDelegate.prototype.buildDisconnectOverlay = function () {
        var _this = this;
        // build the overlay base div 
        var disconnectOverlayHtml = document.createElement('div');
        disconnectOverlayHtml.id = "disconnectOverlay";
        disconnectOverlayHtml.className = "clickableState";
        // set the event Listener
        var disconnectOverlayEvent = function () { return _this.onDisconnectionAction(); };
        // add the new event listener 
        disconnectOverlayHtml.addEventListener('click', function onOverlayClick(event) {
            disconnectOverlayEvent(event);
        });
        // build the inner html container 
        var disconnectOverlayHtmlInnerContainer = document.createElement('div');
        disconnectOverlayHtmlInnerContainer.id = 'disconnectButton';
        // build the span that holds error text
        var disconnectOverlayInnerSpan = document.createElement('span');
        disconnectOverlayInnerSpan.id = 'disconnectText';
        disconnectOverlayInnerSpan.innerHTML = 'Click To Restart';
        // build the image element that holds the reconnect element
        var restartSvg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        restartSvg.setAttribute('width', "40");
        restartSvg.setAttribute('height', "40");
        restartSvg.setAttribute('fill', "currentColor");
        restartSvg.setAttribute('class', "bi bi-arrow-counterclockwise m-2");
        restartSvg.setAttribute('viewBox', "0 0 16 16");
        // build the arrow path 
        var restartSvgPathArrow = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        restartSvgPathArrow.setAttribute('fill-rule', "evenodd");
        restartSvgPathArrow.setAttribute('d', "M8 3a5 5 0 1 1-4.546 2.914.5.5 0 0 0-.908-.417A6 6 0 1 0 8 2v1z");
        // build the circle path
        var restartSvgPathCircle = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        restartSvgPathCircle.setAttribute('d', "M8 4.466V.534a.25.25 0 0 0-.41-.192L5.23 2.308a.25.25 0 0 0 0 .384l2.36 1.966A.25.25 0 0 0 8 4.466z");
        // bring it all together
        restartSvg.appendChild(restartSvgPathArrow);
        restartSvg.appendChild(restartSvgPathCircle);
        // append the span and images to the content container 
        disconnectOverlayHtmlInnerContainer.appendChild(disconnectOverlayInnerSpan);
        disconnectOverlayHtmlInnerContainer.appendChild(restartSvg);
        // instantiate the overlay
        this.disconnectOverlay = new ActionOverlayBase(this.config.playerElement, disconnectOverlayHtml, disconnectOverlayHtmlInnerContainer, "disconnectText");
    };
    /**
     * Builds the connect overlay
     */
    NativeDOMDelegate.prototype.buildConnectOverlay = function () {
        var _this = this;
        // build the overlay base div 
        var connectOverlayHtml = document.createElement('div');
        connectOverlayHtml.id = "connectOverlay";
        connectOverlayHtml.className = "clickableState";
        // set the event Listener
        var connectOverlayEvent = function () { return _this.onConnectAction(); };
        // add the new event listener 
        connectOverlayHtml.addEventListener('click', function onOverlayClick(event) {
            connectOverlayEvent(event);
        });
        // build the inner html 
        var connectOverlayHtmlInner = document.createElement('div');
        connectOverlayHtmlInner.id = 'connectButton';
        connectOverlayHtmlInner.innerHTML = 'Click to start';
        // instantiate the overlay
        this.connectOverlay = new ActionOverlayBase(this.config.playerElement, connectOverlayHtml, connectOverlayHtmlInner);
    };
    /**
     * Builds the play overlay
     */
    NativeDOMDelegate.prototype.buildPlayOverlay = function () {
        var _this = this;
        // build the overlay base div 
        var playOverlayHtml = document.createElement('div');
        playOverlayHtml.id = "playOverlay";
        playOverlayHtml.className = "clickableState";
        // set the event Listener
        var playOverlayEvent = function () { return _this.onPlayAction(); };
        // add the new event listener 
        playOverlayHtml.addEventListener('click', function onOverlayClick(event) {
            playOverlayEvent(event);
        });
        // build the inner html 
        var playOverlayHtmlInner = document.createElement('img');
        playOverlayHtmlInner.id = 'playButton';
        playOverlayHtmlInner.src = _assets_images_Play_png__WEBPACK_IMPORTED_MODULE_1__;
        //playOverlayHtmlInner.src = "images/Play.png";
        playOverlayHtmlInner.alt = 'Start Streaming';
        // instantiate the overlay
        this.playOverlay = new ActionOverlayBase(this.config.playerElement, playOverlayHtml, playOverlayHtmlInner);
    };
    /**
     * Builds the Afk overlay
     */
    NativeDOMDelegate.prototype.buildAfkOverlay = function () {
        var _this = this;
        // build the overlay base div 
        var afkOverlayHtml = document.createElement('div');
        afkOverlayHtml.id = "afkOverlay";
        afkOverlayHtml.className = "clickableState";
        var afkOverlayEvent = function () { return _this.onAfkAction(); };
        afkOverlayHtml.addEventListener('click', function onOverlayClick(event) {
            afkOverlayEvent(event);
        });
        // build the inner html
        var afkOverlayHtmlInner = document.createElement('div');
        afkOverlayHtmlInner.id = 'afkOverlayInner';
        afkOverlayHtmlInner.innerHTML = '<center>No activity detected<br>Disconnecting in <span id="afkCountDownNumber"></span> seconds<br>Click to continue<br></center>';
        // instantiate the overlay
        this.afkOverlay = new AfkOverlayBase(this.config.playerElement, afkOverlayHtml, afkOverlayHtmlInner, "afkCountDownNumber");
    };
    /**
     * Builds the info overlay
     */
    NativeDOMDelegate.prototype.buildInfoOverlay = function () {
        // build the overlay base div 
        var infoOverlayHtml = document.createElement('div');
        infoOverlayHtml.id = "infoOverlay";
        infoOverlayHtml.className = "textDisplayState";
        // build the inner html
        var infoOverlayHtmlInner = document.createElement('div');
        infoOverlayHtmlInner.id = 'messageOverlayInner';
        // instantiate the overlay
        this.infoOverlay = new TextOverlayBase(this.config.playerElement, infoOverlayHtml, infoOverlayHtmlInner);
    };
    /**
     * Builds the error overlay
     */
    NativeDOMDelegate.prototype.buildErrorOverlay = function () {
        // build the overlay base div 
        var errorOverlayHtml = document.createElement('div');
        errorOverlayHtml.id = "errorOverlay";
        errorOverlayHtml.className = "textDisplayState";
        // build the inner html
        var errorOverlayHtmlInner = document.createElement('div');
        errorOverlayHtmlInner.id = 'errorOverlayInner';
        errorOverlayHtmlInner.classList.add(".text-danger");
        // instantiate the overlay
        this.errorOverlay = new TextOverlayBase(this.config.playerElement, errorOverlayHtml, errorOverlayHtmlInner);
    };
    /**
     * Shows a text overlay to alert the user the stream is currently loading
     */
    NativeDOMDelegate.prototype.onStreamLoading = function () {
        // build the spinner span
        var spinnerSpan = document.createElement('span');
        spinnerSpan.className = "visually-hidden";
        spinnerSpan.innerHTML = "Loading...";
        // build the spinner div
        var spinnerDiv = document.createElement('div');
        spinnerDiv.id = "loading-spinner";
        spinnerDiv.className = "spinner-border ms-2";
        spinnerDiv.setAttribute("role", "status");
        // append the spinner to the element
        spinnerDiv.appendChild(spinnerSpan);
        this.showTextOverlay("Loading Stream " + spinnerDiv.outerHTML);
    };
    /**
    * Set up functionality to happen when an instance state change occurs and updates the info overlay with the response
    * @param instanceState - the message instance state
    */
    NativeDOMDelegate.prototype.onInstanceStateChange = function (instanceState) {
        var instanceStateMessage = "";
        var isInstancePending = false;
        var isError = false;
        // get the response type
        switch (instanceState.state) {
            case _tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__.InstanceState.UNALLOCATED:
                instanceStateMessage = "Instance Unallocated: " + instanceState.details;
                break;
            case _tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__.InstanceState.FAILED:
                instanceStateMessage = "UE Instance Failed: " + instanceState.details;
                isError = true;
                break;
            case _tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__.InstanceState.PENDING:
                isInstancePending = true;
                if (instanceState.details == undefined || instanceState.details == null) {
                    instanceStateMessage = "Your application is pending";
                }
                else {
                    instanceStateMessage = instanceState.details;
                }
                break;
            case _tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__.InstanceState.READY:
                if (instanceState.details == undefined || instanceState.details == null) {
                    instanceStateMessage = "Instance is Ready";
                }
                else {
                    instanceStateMessage = "Instance is Ready: " + instanceState.details;
                }
                break;
            default:
                instanceStateMessage = "Unhandled Instance State" + instanceState.state + " " + instanceState.details;
                break;
        }
        if (isError) {
            this.showErrorOverlay(instanceStateMessage);
        }
        else if (isInstancePending) {
            //check if there is already and instance pending if so return 
            var preExistingPendingMessage = document.getElementById('loading-spinner');
            if (preExistingPendingMessage) {
                // only update our text div
                var textDiv = document.getElementById("text-" + instanceState.id);
                textDiv.innerHTML = instanceStateMessage;
                return;
            }
            // build a wrapper to hold our text and our spinner
            var wrapperDiv = document.createElement('div');
            // build a text div to hold our text message
            var textSpan = document.createElement('span');
            textSpan.id = "text-" + instanceState.id;
            textSpan.innerHTML = instanceStateMessage;
            // build the spinner span
            var spinnerSpan = document.createElement('span');
            spinnerSpan.className = "visually-hidden";
            spinnerSpan.innerHTML = "Loading...";
            // build the spinner div
            var spinnerDiv = document.createElement('div');
            spinnerDiv.id = "loading-spinner";
            spinnerDiv.className = "spinner-border ms-2";
            spinnerDiv.setAttribute("role", "status");
            // append wrapper and the spinner to the element
            wrapperDiv.appendChild(textSpan);
            wrapperDiv.appendChild(spinnerDiv).appendChild(spinnerSpan);
            // insert the inner html into the base div
            this.showTextOverlay(wrapperDiv.outerHTML);
        }
        else {
            this.showTextOverlay(instanceStateMessage);
        }
    };
    /**
     * Set up functionality to happen when receiving an auth response and updates an info overlay with the response
     * @param authResponse - the auth response message type
     */
    NativeDOMDelegate.prototype.onAuthenticationResponse = function (authResponse) {
        var instanceStateMessage = "";
        var isError = false;
        // get the response type
        switch (authResponse.outcome) {
            case _tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__.MessageAuthResponseOutcomeType.AUTHENTICATED:
                instanceStateMessage = "Authentication has succeeded. Requesting Instance";
                break;
            case _tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__.MessageAuthResponseOutcomeType.INVALID_TOKEN:
                instanceStateMessage = "Invalid Token: " + authResponse.error;
                isError = true;
                break;
            case _tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__.MessageAuthResponseOutcomeType.REDIRECT:
                instanceStateMessage = "Redirecting to: " + authResponse.redirect;
                break;
            case _tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__.MessageAuthResponseOutcomeType.ERROR:
                instanceStateMessage = "Error: " + authResponse.error;
                isError = true;
                break;
            default:
                instanceStateMessage = "Unhandled Auth Response: " + authResponse.outcome;
                break;
        }
        // if the response is an error show the error instead of the info 
        if (isError) {
            this.showErrorOverlay(instanceStateMessage);
        }
        else {
            this.showTextOverlay(instanceStateMessage);
        }
    };
    /**
     * Set up button click functions and button functionality
     */
    NativeDOMDelegate.prototype.ConfigureButtons = function () {
        var _this = this;
        // set up the settings 
        // document.getElementById('settingsBtn').onclick = function () { return _this.settingsClicked(); };
        // document.getElementById('settingsClose').onclick = function () { return _this.settingsClicked(); };
        // setup the info button
        document.getElementById('statsBtn').onclick = function () { return _this.statsClicked(); };
        document.getElementById('statsClose').onclick = function () { return _this.statsClicked(); };
        // setup the Force TURN toggle
        this.setUpToggleWithUrlParams(this.forceTurnToggle, "ForceTURN");
        this.setUpControlSchemeTypeToggle(this.controlSchemeToggle);
        // set up the restart stream button
        document.getElementById("restart-stream-button").onclick = function () {
            _this.settingsPanel.classList.toggle("panel-wrap-visible");
            _this.iWebRtcController.restartStreamAutomaticity();
        };
        document.getElementById("btn-streaming-settings").onclick = function () {
            _tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__.Logger.Log(_tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__.Logger.GetStackTrace(), "--------  Sending Streaming settings  --------", 7);
            var encode = {
                MinQP: Number(_this.encoderMinQpText.value),
                MaxQP: Number(_this.encoderMaxQpText.value),
            };
            var webRtcSettings = {
                FPS: Number(_this.webRtcFpsText.value),
                MinBitrate: Number(_this.webRtcMinBitrateText.value) * 1000,
                MaxBitrate: Number(_this.webRtcMaxBitrateText.value) * 1000,
            };
            _this.iWebRtcController.sendEncoderSettings(encode);
            _this.iWebRtcController.sendWebRtcSettings(webRtcSettings);
            _tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__.Logger.Log(_tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__.Logger.GetStackTrace(), "-------------------------------------------", 7);
        };
        // sending UI descriptors 
        document.getElementById("sendUiDescriptor").onclick = function () {
            _this.iWebRtcController.sendUeUiDescriptor(_this.uiDescriptorText.value);
        };
        // show the current fps on screen 
        document.getElementById("show-fps-button").onclick = function () {
            _this.iWebRtcController.sendShowFps();
        };
        // make the player fill the window
        this.enlargeDisplayToFillWindow.onchange = function () {
            _this.iWebRtcController.resizePlayerStyle();
            _this.iWebRtcController.setEnlargeToFillDisplay(_this.enlargeDisplayToFillWindow.checked);
        };
        // make the player match the view port resolution 
        this.toggleMatchViewPortRes.onchange = function () {
            _this.iWebRtcController.matchViewportResolution = _this.toggleMatchViewPortRes.checked;
            _this.iWebRtcController.updateVideoStreamSize();
        };
        // quality control ownership checkbox 
        this.qualityControlOwnershipCheckBox.onchange = function () {
            if (_this.qualityControlOwnershipCheckBox.checked === false) {
                _this.iWebRtcController.sendRequestQualityControlOwnership();
            }
        };
    };
    /**
     * Shows or hides the settings panel if clicked
     */
    NativeDOMDelegate.prototype.settingsClicked = function () {
        /**
         * Toggle settings panel. If stats panel is already open, close it and then open settings
         */
        if (this.statsPanel.classList.contains("panel-wrap-visible")) {
            this.statsPanel.classList.toggle("panel-wrap-visible");
        }
        this.settingsPanel.classList.toggle("panel-wrap-visible");
    };
    /**
     * Shows or hides the stats panel if clicked
     */
    NativeDOMDelegate.prototype.statsClicked = function () {
        /**
         * Toggle stats panel. If settings panel is already open, close it and then open stats
         */
        if (this.settingsPanel.classList.contains("panel-wrap-visible")) {
            this.settingsPanel.classList.toggle("panel-wrap-visible");
        }
        this.statsPanel.classList.toggle("panel-wrap-visible");
    };
    /**
     * Set up toggle element for controlling hovering mouse or locked mouse
     * @param toggleElement the toggle html element to be set up
     */
    NativeDOMDelegate.prototype.setUpControlSchemeTypeToggle = function (toggleElement) {
        var _this = this;
        if (toggleElement) {
            // set the state for the toggle based on the config
            if (this.config.controlScheme === _tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__.ControlSchemeType.LockedMouse) {
                this.controlSchemeToggleTitle.innerHTML = "Control Scheme: Locked Mouse";
                this.controlSchemeToggle.checked = false;
            }
            else {
                this.controlSchemeToggleTitle.innerHTML = "Control Scheme: Hovering Mouse";
                this.controlSchemeToggle.checked = true;
            }
            // set the onChange event 
            toggleElement.onchange = function () {
                if (toggleElement.checked === true) {
                    _this.controlSchemeToggleTitle.innerHTML = "Control Scheme: Hovering Mouse";
                    _this.config.controlScheme = _tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__.ControlSchemeType.HoveringMouse;
                    _this.iWebRtcController.activateRegisterMouse();
                }
                else {
                    _this.controlSchemeToggleTitle.innerHTML = "Control Scheme: Locked Mouse";
                    _this.config.controlScheme = _tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__.ControlSchemeType.LockedMouse;
                    _this.iWebRtcController.activateRegisterMouse();
                }
            };
        }
    };
    /**
     * Set up url toggle buttons
     * @param toggleElement the toggle element being activated
     * @param urlParameterKey the url key that is being made use of
     */
    NativeDOMDelegate.prototype.setUpToggleWithUrlParams = function (toggleElement, urlParameterKey) {
        if (toggleElement) {
            //Check if the element has been set from the URL Params 
            toggleElement.checked = new URLSearchParams(window.location.search).has(urlParameterKey);
            toggleElement.onchange = function () {
                var urlParams = new URLSearchParams(window.location.search);
                if (toggleElement.checked === true) {
                    urlParams.set(urlParameterKey, "true");
                }
                else {
                    urlParams.delete(urlParameterKey);
                }
                window.history.replaceState({}, '', urlParams.toString() !== "" ? location.pathname + "?" + urlParams : "" + location.pathname);
            };
        }
    };
    /**
     * Disable shared session links for all players
     * @returns false
     */
    NativeDOMDelegate.prototype.IsLinkSharingEnabled = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, false];
            });
        });
    };
    /**
     * Handle when the Video has been Initialised
     */
    NativeDOMDelegate.prototype.onVideoInitialised = function () {
        var _this = this;
        // starting a latency check
        document.getElementById("btn-start-latency-test").onclick = function () {
            _this.iWebRtcController.sendLatencyTest();
        };
        // Set up stream tools header functionality
        this.viewSettingsHeader.onclick = function () {
            _this.viewSettingsContainer.classList.contains("d-none") ? _this.viewSettingsContainer.classList.remove("d-none") : _this.viewSettingsContainer.classList.add("d-none");
        };
        this.commandsHeader.onclick = function () {
            _this.commandsContainer.classList.contains("d-none") ? _this.commandsContainer.classList.remove("d-none") : _this.commandsContainer.classList.add("d-none");
        };
        this.streamingSettingsHeader.onclick = function () {
            _this.streamingSettingsContainer.classList.contains("d-none") ? _this.streamingSettingsContainer.classList.remove("d-none") : _this.streamingSettingsContainer.classList.add("d-none");
        };
        this.statsHeader.onclick = function () {
            _this.statsContainer.classList.contains("d-none") ? _this.statsContainer.classList.remove("d-none") : _this.statsContainer.classList.add("d-none");
        };
        this.latencyHeader.onclick = function () {
            _this.latencyContainer.classList.contains("d-none") ? _this.latencyContainer.classList.remove("d-none") : _this.latencyContainer.classList.add("d-none");
        };
        // Reveal all the container
        this.viewSettingsContainer.classList.remove("d-none");
        this.commandsContainer.classList.remove("d-none");
        this.streamingSettingsContainer.classList.remove("d-none");
        this.statsContainer.classList.remove("d-none");
        this.videoStartTime = Date.now();
    };
    /**
     * Extended from the base functionality; displays the error overlay and resets the buttons stream tools upon disconnect
     * @param eventText
     */
    NativeDOMDelegate.prototype.onDisconnect = function (eventText) {
        // display the text overlay by calling its super method so it will use its default behavior first 
        _super.prototype.onDisconnect.call(this, "" + eventText);
        // update all of the tools upon disconnect 
        this.onVideoEncoderAvgQP(0);
        // starting a latency check
        document.getElementById("btn-start-latency-test").onclick = function () { };
        // Set up stream tools header functionality
        this.viewSettingsHeader.onclick = function () { };
        this.commandsHeader.onclick = function () { };
        this.streamingSettingsHeader.onclick = function () { };
        this.statsHeader.onclick = function () { };
        this.latencyHeader.onclick = function () { };
        // Hide all the containers
        this.viewSettingsContainer.classList.add("d-none");
        this.commandsContainer.classList.add("d-none");
        this.streamingSettingsContainer.classList.add("d-none");
        this.statsContainer.classList.add("d-none");
    };
    /**
     * `Takes the InitialSettings and wired to frontend
     * @param settings - Settings sent from the UE Instance`
     */
    NativeDOMDelegate.prototype.onInitialSettings = function (settings) {
        if (settings.Encoder) {
            this.encoderMinQpText.value = settings.Encoder.MinQP.toString();
            this.encoderMaxQpText.value = settings.Encoder.MaxQP.toString();
        }
        if (settings.WebRTC) {
            this.webRtcMinBitrateText.value = settings.WebRTC.MinBitrate.toString();
            this.webRtcMaxBitrateText.value = settings.WebRTC.MaxBitrate.toString();
            this.webRtcFpsText.value = settings.WebRTC.FPS.toString();
        }
    };
    /**
    * Used to handle the Video Stats from the Peer Connection Client
    * @param stats - Stats generate from the Peer Connection Client
    */
    NativeDOMDelegate.prototype.onVideoStats = function (stats) {
        var runTime = new Date(Date.now() - this.videoStartTime).toISOString().substr(11, 8);
        var statsText = "";
        var inboundData = this.formatBytes(stats.inboundVideoStats.bytesReceived, 2);
        // format numbering based on the browser language
        var numberFormat = new Intl.NumberFormat(window.navigator.language, {
            maximumFractionDigits: 0
        });
        // ensure that we have a currentRoundTripTime coming in from stats and format it if it's a number
        var netRTT = stats.candidatePair.hasOwnProperty('currentRoundTripTime') && stats.isNumber(stats.candidatePair.currentRoundTripTime) ? numberFormat.format(stats.candidatePair.currentRoundTripTime * 1000) : 'Can\'t calculate';
        statsText += "<div>Duration: " + runTime + "</div>";
        statsText += "<div>Received: " + inboundData + "</div>";
        statsText += "<div>Packets Lost: " + stats.inboundVideoStats.packetsLost + "</div>";
        statsText += "<div>Bitrate (kbps): " + stats.inboundVideoStats.bitrate + "</div>";
        statsText += "<div>Video Resolution: " + (stats.inboundVideoStats.hasOwnProperty('frameWidth') && stats.inboundVideoStats.frameWidth && stats.inboundVideoStats.hasOwnProperty('frameHeight') && stats.inboundVideoStats.frameHeight ?
            stats.inboundVideoStats.frameWidth + 'x' + stats.inboundVideoStats.frameHeight : 'Chrome only') + "</div>";
        statsText += "<div>Frames Decoded: " + (stats.inboundVideoStats.hasOwnProperty('framesDecoded') ? numberFormat.format(stats.inboundVideoStats.framesDecoded) : 'Chrome only') + "</div>";
        statsText += "<div>Packets Lost: " + (stats.inboundVideoStats.hasOwnProperty('packetsLost') ? numberFormat.format(stats.inboundVideoStats.packetsLost) : 'Chrome only') + "</div>";
        statsText += "<div>Framerate: " + stats.inboundVideoStats.framerate + "</div>";
        statsText += "<div>Frames dropped: " + stats.inboundVideoStats.framesDropped + "</div>";
        statsText += "<div>Net RTT (ms): " + netRTT + "</div>";
        //statsText += `<div>Browser receive to composite (ms): ${stats.inboundVideoStats.receiveToCompositeMs}</div>`;
        statsText += "<div>Video Quantization Parameter: " + this.videoQpIndicator.videoEncoderAvgQP + "</div>";
        var statsDiv = document.getElementById("statisticsResult");
        statsDiv.innerHTML = statsText;
        _tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__.Logger.Log(_tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__.Logger.GetStackTrace(), "--------- Stats ---------\n " + stats + "\n------------------------", 6);
        if (this.sendStatsToServer.checked === true) {
            this.iWebRtcController.sendStatsToSignallingServer(stats);
        }
    };
    /**
    * formats Bytes coming in for video stats
    * @param bytes number to convert
    * @param decimals number of decimal places
    */
    NativeDOMDelegate.prototype.formatBytes = function (bytes, decimals) {
        if (bytes === 0) {
            return "0";
        }
        var factor = 1024;
        var dm = decimals < 0 ? 0 : decimals;
        var sizes = ['Bytes', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
        var i = Math.floor(Math.log(bytes) / Math.log(factor));
        return parseFloat((bytes / Math.pow(factor, i)).toFixed(dm)) + ' ' + sizes[i];
    };
    /**
    * Handles the result of the UE Latency Test
    * @param latencyTimings - Latency Test Timings sent from the UE Instance
    */
    NativeDOMDelegate.prototype.onLatencyTestResult = function (latencyTimings) {
        _tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__.Logger.Log(_tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__.Logger.GetStackTrace(), latencyTimings.toString(), 6);
        var latencyStatsInnerHTML = '';
        latencyStatsInnerHTML += "<div>Net latency RTT (ms): " + latencyTimings.networkLatency + "</div>";
        latencyStatsInnerHTML += "<div>UE Encode (ms): " + latencyTimings.EncodeMs + "</div>";
        latencyStatsInnerHTML += "<div>UE Capture (ms): " + latencyTimings.CaptureToSendMs + "</div>";
        latencyStatsInnerHTML += "<div>Browser send latency (ms): " + latencyTimings.browserSendLatency + "</div>";
        latencyStatsInnerHTML += latencyTimings.frameDisplayDeltaTimeMs && latencyTimings.browserReceiptTimeMs ? "<div>Browser receive latency (ms): " + latencyTimings.frameDisplayDeltaTimeMs + "</div>" : "";
        latencyStatsInnerHTML += "<div>Total latency (excluding browser) (ms): " + latencyTimings.latencyExcludingDecode + "</div>";
        latencyStatsInnerHTML += latencyTimings.endToEndLatency ? "<div>Total latency (ms): " + latencyTimings.endToEndLatency + "</div>" : "";
        this.latencyContainer.classList.remove("d-none");
        document.getElementById("latencyStatsResults").innerHTML = latencyStatsInnerHTML;
    };
    /**
     * Handles when the ownership flag is sent from the signaling server
     * @param hasQualityOwnership - flag if the user has quality ownership
     */
    NativeDOMDelegate.prototype.onQualityControlOwnership = function (hasQualityOwnership) {
        this.qualityControlOwnershipCheckBox.checked = hasQualityOwnership;
    };
    /**
      * Calls updateQpTooltip to update the QP colour light
      * @param QP - The video encoder QP number needed to find the average
      */
    NativeDOMDelegate.prototype.onVideoEncoderAvgQP = function (QP) {
        this.videoQpIndicator.updateQpTooltip(QP);
    };
    return NativeDOMDelegate;
}(_tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_3__.DelegateBase));



/***/ }),

/***/ "./src/assets/images/Play.png":
/*!************************************!*\
  !*** ./src/assets/images/Play.png ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/Play-07fc6c578b4c3871d74b.png";

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var bootstrap_dist_js_bootstrap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bootstrap/dist/js/bootstrap */ "./node_modules/bootstrap/dist/js/bootstrap.js");
/* harmony import */ var bootstrap_dist_js_bootstrap__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bootstrap_dist_js_bootstrap__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var bootstrap_dist_css_bootstrap_min_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bootstrap/dist/css/bootstrap.min.css */ "./node_modules/bootstrap/dist/css/bootstrap.min.css");
/* harmony import */ var bootstrap_dist_css_bootstrap_grid_min_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bootstrap/dist/css/bootstrap-grid.min.css */ "./node_modules/bootstrap/dist/css/bootstrap-grid.min.css");
/* harmony import */ var bootstrap_dist_css_bootstrap_reboot_min_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! bootstrap/dist/css/bootstrap-reboot.min.css */ "./node_modules/bootstrap/dist/css/bootstrap-reboot.min.css");
/* harmony import */ var bootstrap_dist_css_bootstrap_utilities_min_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! bootstrap/dist/css/bootstrap-utilities.min.css */ "./node_modules/bootstrap/dist/css/bootstrap-utilities.min.css");
/* harmony import */ var _NativeDOMDelegate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./NativeDOMDelegate */ "./src/NativeDOMDelegate.ts");
/* harmony import */ var _tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tensorworks/libspsfrontend */ "./node_modules/@tensorworks/libspsfrontend/dist/libspsfrontend.min.js");
/* harmony import */ var _tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_6__);







var signallingServerAddress = "ws://sps-biome-1662428721.ap-south-1.elb.amazonaws.com/qd-v3ltjga8tk/ws";
if (signallingServerAddress == '') {
    // define our signallingServerProtocol to be used based on whether
    // or not we're accessing our frontend via a tls
    var signallingServerProtocol = 'ws:';
    if (location.protocol === 'https:') {
        signallingServerProtocol = 'wss:';
    }
    // build the websocket endpoint based on the protocol used to load the frontend
    signallingServerAddress = signallingServerProtocol + '//' + window.location.hostname;
    // if the frontend for an application is served from a base-level domain
    // it has a trailing slash, so we need to account for this when appending the 'ws' for the websocket ingress
    if (window.location.pathname == "/") {
        signallingServerAddress += '/ws';
    }
    else {
        signallingServerAddress += (window.location.pathname + '/ws');
    }
}

// prep the player div element 
var playerElement = document.getElementById("player");
// Create a config object
var config = CreateConfig(signallingServerAddress, playerElement);
config.enableSpsAutoConnect = false;
config.enableSpsAutoplay = false;
// Create a Native DOM delegate instance that implements the Delegate interface class
var delegate = new _NativeDOMDelegate__WEBPACK_IMPORTED_MODULE_5__.NativeDOMDelegate(config);
// Create and return a new webRtcPlayerController instance 
var RTCPlayer = create(config, delegate);
// create takes in a delage interface type which our NativeDomDelegate class implements
function create(config, delegate) {
    return new _tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_6__.webRtcPlayerController(config, delegate);
}
document.ontouchmove = function (event) {
    event.preventDefault();
};
// Create a config object instance 
function CreateConfig(signalingAddress, playerElement) {
    var config = new _tensorworks_libspsfrontend__WEBPACK_IMPORTED_MODULE_6__.Config(signalingAddress, playerElement);
    return config;
}

document.getElementById("connectButton").innerHTML = "Connect Now";

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,